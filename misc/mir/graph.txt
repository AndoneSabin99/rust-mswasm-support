digraph Mir_0_3 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let mut _1: [i32; 3];<br align="left"/>let mut _2: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _3: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: &amp;[i32];<br align="left"/>let mut _6: &amp;[i32; 3];<br align="left"/>let mut _7: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _10: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: &amp;mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let _15: usize;<br align="left"/>let _16: i32;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: i32;<br align="left"/>let mut _21: (i32, bool);<br align="left"/>let _22: usize;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: bool;<br align="left"/>debug numbers =&gt; _1;<br align="left"/>debug iter =&gt; _7;<br align="left"/>debug __next =&gt; _8;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug index =&gt; _15;<br align="left"/>debug number =&gt; _16;<br align="left"/>>;
    bb0__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_1 = [const 1_i32, const 2_i32, const 3_i32]<br/>_6 = &amp;_1<br/>_5 = move _6 as &amp;[i32] (Pointer(Unsize))<br/>_4 = Len((*_5))<br/>(_3.0: usize) = const 0_usize<br/>(_3.1: usize) = move _4<br/></td></tr><tr><td align="left">_2 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _3)</td></tr></table>>];
    bb1__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = move _2<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_11 = &amp;mut _7<br/>_10 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _10)</td></tr></table>>];
    bb3__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = const ()<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb5__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_13 = ((_9 as Some).0: usize)<br/>_14 = _13<br/>_8 = move _14<br/>_15 = _8<br/>_17 = _15<br/>_18 = const 3_usize<br/>_19 = Lt(_17, _18)<br/></td></tr><tr><td align="left">assert(move _19, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _18, _17)</td></tr></table>>];
    bb7__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_16 = _1[_17]<br/>_20 = _16<br/>_21 = CheckedMul(_20, const 2_i32)<br/></td></tr><tr><td align="left">assert(!move (_21.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _20, const 2_i32)</td></tr></table>>];
    bb8__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_22 = _15<br/>_23 = const 3_usize<br/>_24 = Lt(_22, _23)<br/></td></tr><tr><td align="left">assert(move _24, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _23, _22)</td></tr></table>>];
    bb9__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_1[_22] = move (_21.0: i32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_3 -> bb1__0_3 [label="return"];
    bb1__0_3 -> bb2__0_3 [label=""];
    bb2__0_3 -> bb3__0_3 [label="return"];
    bb3__0_3 -> bb4__0_3 [label="0_isize"];
    bb3__0_3 -> bb6__0_3 [label="1_isize"];
    bb3__0_3 -> bb5__0_3 [label="otherwise"];
    bb6__0_3 -> bb7__0_3 [label=""];
    bb7__0_3 -> bb8__0_3 [label=""];
    bb8__0_3 -> bb9__0_3 [label=""];
    bb9__0_3 -> bb2__0_3 [label=""];
}
