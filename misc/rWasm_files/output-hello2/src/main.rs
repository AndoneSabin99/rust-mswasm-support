mod guest_mem_wrapper;

use std::convert::TryInto;

#[derive(Copy, Clone, Debug)]
enum TaggedVal {
    I32(i32),
    I64(i64),
    F32(f32),
    F64(f64),
    Undefined,
}

impl Default for TaggedVal {
    fn default() -> Self {
        TaggedVal::Undefined
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
enum ValType {
    I32,
    I64,
    F32,
    F64,
    Undefined,
}

impl From<TaggedVal> for ValType {
    fn from(v: TaggedVal) -> Self {
        match v {
            TaggedVal::I32(_) => ValType::I32,
            TaggedVal::I64(_) => ValType::I64,
            TaggedVal::F32(_) => ValType::F32,
            TaggedVal::F64(_) => ValType::F64,
            TaggedVal::Undefined => ValType::Undefined,
        }
    }
}

macro_rules! tagged_value_conversion {
    ($ty:ty, $try_as:ident, $e:tt) => {
        impl TaggedVal {
            #[inline]
            #[allow(dead_code)]
            fn $try_as(&self) -> Option<$ty> {
                if let $e(v) = self {
                    Some(*v)
                } else {
                    None
                }
            }
        }

        impl From<$ty> for TaggedVal {
            #[inline]
            #[allow(dead_code)]
            fn from(v: $ty) -> Self {
                $e(v)
            }
        }
    };
}

tagged_value_conversion! {i32, try_as_i32, I32}
tagged_value_conversion! {i64, try_as_i64, I64}
tagged_value_conversion! {f32, try_as_f32, F32}
tagged_value_conversion! {f64, try_as_f64, F64}

impl From<u32> for TaggedVal {
    #[inline]
    #[allow(dead_code)]
    fn from(v: u32) -> Self {
        I32(v as i32)
    }
}

impl From<u64> for TaggedVal {
    #[inline]
    #[allow(dead_code)]
    fn from(v: u64) -> Self {
        I64(v as i64)
    }
}

trait SafeFloatConv<T> {
    fn try_to_int(self) -> Option<T>;
}
macro_rules! safe_float_conv {
    ($from:ty, $to:ty) => {
        impl SafeFloatConv<$to> for $from {
            fn try_to_int(self) -> Option<$to> {
                if self.is_finite() {
                    Some(self as $to)
                } else {
                    None
                }
            }
        }
    };
    ($to: ty) => {
        safe_float_conv! {f32, $to}
        safe_float_conv! {f64, $to}
    };
}
safe_float_conv! {i32}
safe_float_conv! {u32}
safe_float_conv! {i64}
safe_float_conv! {u64}

#[allow(unused_imports)]
use TaggedVal::*;

#[allow(dead_code)]
pub struct WasmModule {
    memory: Vec<u8>,
    globals: Vec<TaggedVal>,
    indirect_call_table: Vec<Option<usize>>,
    context: wasi_common::WasiCtx,
}

macro_rules! memory_accessors {
    ($ty:ty, $read:ident, $write:ident) => {
        #[inline]
        #[allow(dead_code)]
        fn $read(memory: &[u8], addr: usize) -> Option<$ty> {
            Some(<$ty>::from_le_bytes(
                memory
                    .get(addr..addr + std::mem::size_of::<$ty>())?
                    .try_into()
                    .ok()?,
            ))
        }

        #[inline]
        #[allow(dead_code)]
        fn $write(memory: &mut [u8], addr: usize, value: $ty) -> Option<()> {
            memory
                .get_mut(addr..addr + std::mem::size_of::<$ty>())?
                .copy_from_slice(&value.to_le_bytes());
            Some(())
        }
    };
}

memory_accessors! {u8, read_mem_u8, write_mem_u8}
memory_accessors! {u16, read_mem_u16, write_mem_u16}
memory_accessors! {u32, read_mem_u32, write_mem_u32}
memory_accessors! {u64, read_mem_u64, write_mem_u64}

memory_accessors! {i8, read_mem_i8, write_mem_i8}
memory_accessors! {i16, read_mem_i16, write_mem_i16}
memory_accessors! {i32, read_mem_i32, write_mem_i32}
memory_accessors! {i64, read_mem_i64, write_mem_i64}

memory_accessors! {f32, read_mem_f32, write_mem_f32}
memory_accessors! {f64, read_mem_f64, write_mem_f64}

impl WasmModule {
    #[allow(unused_mut)]
    fn try_new() -> Option<Self> {
        let mut m = WasmModule {
            memory: vec![0u8; 1114112],
            globals: vec![],
            indirect_call_table: vec![],
            context: wasi_common::WasiCtx::new(std::env::args())
                .expect("Unable to initialize WASI context"),
        };
        m.globals.resize_with(3, Default::default);
        m.globals[0] = TaggedVal::from(1048576i32);
        m.globals[1] = TaggedVal::from(1058912i32);
        m.globals[2] = TaggedVal::from(1058912i32);
        if m.indirect_call_table.len() < 95 {
            m.indirect_call_table.resize(95, None)
        }
        m.indirect_call_table[1] = Some(11);
        m.indirect_call_table[2] = Some(15);
        m.indirect_call_table[3] = Some(9);
        m.indirect_call_table[4] = Some(16);
        m.indirect_call_table[5] = Some(31);
        m.indirect_call_table[6] = Some(217);
        m.indirect_call_table[7] = Some(27);
        m.indirect_call_table[8] = Some(80);
        m.indirect_call_table[9] = Some(81);
        m.indirect_call_table[10] = Some(29);
        m.indirect_call_table[11] = Some(247);
        m.indirect_call_table[12] = Some(71);
        m.indirect_call_table[13] = Some(187);
        m.indirect_call_table[14] = Some(123);
        m.indirect_call_table[15] = Some(30);
        m.indirect_call_table[16] = Some(116);
        m.indirect_call_table[17] = Some(46);
        m.indirect_call_table[18] = Some(63);
        m.indirect_call_table[19] = Some(56);
        m.indirect_call_table[20] = Some(60);
        m.indirect_call_table[21] = Some(64);
        m.indirect_call_table[22] = Some(59);
        m.indirect_call_table[23] = Some(61);
        m.indirect_call_table[24] = Some(65);
        m.indirect_call_table[25] = Some(57);
        m.indirect_call_table[26] = Some(62);
        m.indirect_call_table[27] = Some(28);
        m.indirect_call_table[28] = Some(22);
        m.indirect_call_table[29] = Some(192);
        m.indirect_call_table[30] = Some(193);
        m.indirect_call_table[31] = Some(53);
        m.indirect_call_table[32] = Some(137);
        m.indirect_call_table[33] = Some(251);
        m.indirect_call_table[34] = Some(49);
        m.indirect_call_table[35] = Some(120);
        m.indirect_call_table[36] = Some(48);
        m.indirect_call_table[37] = Some(84);
        m.indirect_call_table[38] = Some(82);
        m.indirect_call_table[39] = Some(83);
        m.indirect_call_table[40] = Some(85);
        m.indirect_call_table[41] = Some(86);
        m.indirect_call_table[42] = Some(87);
        m.indirect_call_table[43] = Some(47);
        m.indirect_call_table[44] = Some(111);
        m.indirect_call_table[45] = Some(35);
        m.indirect_call_table[46] = Some(37);
        m.indirect_call_table[47] = Some(110);
        m.indirect_call_table[48] = Some(32);
        m.indirect_call_table[49] = Some(38);
        m.indirect_call_table[50] = Some(41);
        m.indirect_call_table[51] = Some(40);
        m.indirect_call_table[52] = Some(52);
        m.indirect_call_table[53] = Some(117);
        m.indirect_call_table[54] = Some(42);
        m.indirect_call_table[55] = Some(43);
        m.indirect_call_table[56] = Some(97);
        m.indirect_call_table[57] = Some(105);
        m.indirect_call_table[58] = Some(106);
        m.indirect_call_table[59] = Some(112);
        m.indirect_call_table[60] = Some(33);
        m.indirect_call_table[61] = Some(108);
        m.indirect_call_table[62] = Some(109);
        m.indirect_call_table[63] = Some(51);
        m.indirect_call_table[64] = Some(91);
        m.indirect_call_table[65] = Some(92);
        m.indirect_call_table[66] = Some(93);
        m.indirect_call_table[67] = Some(94);
        m.indirect_call_table[68] = Some(95);
        m.indirect_call_table[69] = Some(107);
        m.indirect_call_table[70] = Some(96);
        m.indirect_call_table[71] = Some(50);
        m.indirect_call_table[72] = Some(131);
        m.indirect_call_table[73] = Some(132);
        m.indirect_call_table[74] = Some(24);
        m.indirect_call_table[75] = Some(133);
        m.indirect_call_table[76] = Some(134);
        m.indirect_call_table[77] = Some(23);
        m.indirect_call_table[78] = Some(25);
        m.indirect_call_table[79] = Some(197);
        m.indirect_call_table[80] = Some(189);
        m.indirect_call_table[81] = Some(232);
        m.indirect_call_table[82] = Some(178);
        m.indirect_call_table[83] = Some(199);
        m.indirect_call_table[84] = Some(179);
        m.indirect_call_table[85] = Some(191);
        m.indirect_call_table[86] = Some(205);
        m.indirect_call_table[87] = Some(212);
        m.indirect_call_table[88] = Some(213);
        m.indirect_call_table[89] = Some(250);
        m.indirect_call_table[90] = Some(214);
        m.indirect_call_table[91] = Some(215);
        m.indirect_call_table[92] = Some(216);
        m.indirect_call_table[93] = Some(248);
        m.indirect_call_table[94] = Some(249);
        m.memory[1048576..1058253].copy_from_slice(&[
            1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 72, 101, 108,
            108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 10, 0, 0, 24, 0, 16, 0, 14, 0, 0, 0, 40,
            0, 16, 0, 52, 0, 16, 0, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0,
            20, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0,
            0, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 17, 0,
            0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 100, 51,
            102, 98, 48, 48, 53, 97, 51, 57, 101, 54, 50, 53, 48, 49, 98, 56, 98, 48, 98, 51, 53,
            54, 49, 54, 54, 101, 53, 49, 53, 97, 101, 50, 52, 101, 50, 101, 53, 52, 47, 115, 114,
            99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 109, 97, 99, 114, 111, 115, 47, 109, 111,
            100, 46, 114, 115, 0, 0, 0, 144, 0, 16, 0, 73, 0, 0, 0, 10, 0, 0, 0, 9, 0, 0, 0, 97,
            108, 114, 101, 97, 100, 121, 32, 98, 111, 114, 114, 111, 119, 101, 100, 47, 114, 117,
            115, 116, 99, 47, 100, 51, 102, 98, 48, 48, 53, 97, 51, 57, 101, 54, 50, 53, 48, 49,
            98, 56, 98, 48, 98, 51, 53, 54, 49, 54, 54, 101, 53, 49, 53, 97, 101, 50, 52, 101, 50,
            101, 53, 52, 47, 115, 114, 99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 99, 101, 108,
            108, 46, 114, 115, 0, 252, 0, 16, 0, 67, 0, 0, 0, 109, 3, 0, 0, 9, 0, 0, 0, 97, 108,
            114, 101, 97, 100, 121, 32, 109, 117, 116, 97, 98, 108, 121, 32, 98, 111, 114, 114,
            111, 119, 101, 100, 252, 0, 16, 0, 67, 0, 0, 0, 29, 3, 0, 0, 9, 0, 0, 0, 97, 115, 115,
            101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 96, 40, 108,
            101, 102, 116, 32, 61, 61, 32, 114, 105, 103, 104, 116, 41, 96, 10, 32, 32, 108, 101,
            102, 116, 58, 32, 96, 96, 44, 10, 32, 114, 105, 103, 104, 116, 58, 32, 96, 96, 0, 0,
            120, 1, 16, 0, 45, 0, 0, 0, 165, 1, 16, 0, 12, 0, 0, 0, 177, 1, 16, 0, 1, 0, 0, 0, 17,
            0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 28, 0, 0, 0, 96, 58, 32, 0, 120, 1, 16, 0, 45, 0, 0,
            0, 165, 1, 16, 0, 12, 0, 0, 0, 220, 1, 16, 0, 3, 0, 0, 0, 99, 97, 108, 108, 101, 100,
            32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96,
            32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 0, 17,
            0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 29, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 30,
            0, 0, 0, 31, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 99, 97, 108, 108, 101, 100,
            32, 96, 82, 101, 115, 117, 108, 116, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96,
            32, 111, 110, 32, 97, 110, 32, 96, 69, 114, 114, 96, 32, 118, 97, 108, 117, 101, 0, 17,
            0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 35,
            0, 0, 0, 84, 114, 105, 101, 100, 32, 116, 111, 32, 115, 104, 114, 105, 110, 107, 32,
            116, 111, 32, 97, 32, 108, 97, 114, 103, 101, 114, 32, 99, 97, 112, 97, 99, 105, 116,
            121, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 115, 114, 99, 47, 108, 105, 98,
            115, 116, 100, 47, 116, 104, 114, 101, 97, 100, 47, 109, 111, 100, 46, 114, 115, 212,
            2, 16, 0, 24, 0, 0, 0, 138, 3, 0, 0, 17, 0, 0, 0, 105, 110, 99, 111, 110, 115, 105,
            115, 116, 101, 110, 116, 32, 112, 97, 114, 107, 32, 115, 116, 97, 116, 101, 0, 212, 2,
            16, 0, 24, 0, 0, 0, 152, 3, 0, 0, 19, 0, 0, 0, 2, 0, 0, 0, 112, 97, 114, 107, 32, 115,
            116, 97, 116, 101, 32, 99, 104, 97, 110, 103, 101, 100, 32, 117, 110, 101, 120, 112,
            101, 99, 116, 101, 100, 108, 121, 0, 40, 3, 16, 0, 31, 0, 0, 0, 212, 2, 16, 0, 24, 0,
            0, 0, 149, 3, 0, 0, 13, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 103,
            101, 110, 101, 114, 97, 116, 101, 32, 117, 110, 105, 113, 117, 101, 32, 116, 104, 114,
            101, 97, 100, 32, 73, 68, 58, 32, 98, 105, 116, 115, 112, 97, 99, 101, 32, 101, 120,
            104, 97, 117, 115, 116, 101, 100, 0, 212, 2, 16, 0, 24, 0, 0, 0, 46, 4, 0, 0, 17, 0, 0,
            0, 212, 2, 16, 0, 24, 0, 0, 0, 52, 4, 0, 0, 22, 0, 0, 0, 116, 104, 114, 101, 97, 100,
            32, 110, 97, 109, 101, 32, 109, 97, 121, 32, 110, 111, 116, 32, 99, 111, 110, 116, 97,
            105, 110, 32, 105, 110, 116, 101, 114, 105, 111, 114, 32, 110, 117, 108, 108, 32, 98,
            121, 116, 101, 115, 0, 212, 2, 16, 0, 24, 0, 0, 0, 119, 4, 0, 0, 26, 0, 0, 0, 105, 110,
            99, 111, 110, 115, 105, 115, 116, 101, 110, 116, 32, 115, 116, 97, 116, 101, 32, 105,
            110, 32, 117, 110, 112, 97, 114, 107, 212, 2, 16, 0, 24, 0, 0, 0, 175, 4, 0, 0, 18, 0,
            0, 0, 212, 2, 16, 0, 24, 0, 0, 0, 189, 4, 0, 0, 14, 0, 0, 0, 34, 82, 85, 83, 84, 95,
            66, 65, 67, 75, 84, 82, 65, 67, 69, 48, 115, 114, 99, 47, 108, 105, 98, 115, 116, 100,
            47, 101, 110, 118, 46, 114, 115, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 103,
            101, 116, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 118, 97, 114,
            105, 97, 98, 108, 101, 32, 96, 0, 0, 0, 85, 4, 16, 0, 36, 0, 0, 0, 220, 1, 16, 0, 3, 0,
            0, 0, 68, 4, 16, 0, 17, 0, 0, 0, 251, 0, 0, 0, 29, 0, 0, 0, 36, 0, 0, 0, 12, 0, 0, 0,
            4, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 37, 0, 0, 0, 41, 0, 0,
            0, 42, 0, 0, 0, 100, 97, 116, 97, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 99,
            111, 110, 116, 97, 105, 110, 115, 32, 97, 32, 110, 117, 108, 32, 98, 121, 116, 101,
            115, 114, 99, 47, 108, 105, 98, 115, 116, 100, 47, 102, 102, 105, 47, 99, 95, 115, 116,
            114, 46, 114, 115, 229, 4, 16, 0, 23, 0, 0, 0, 170, 4, 0, 0, 10, 0, 0, 0, 115, 114, 99,
            47, 108, 105, 98, 115, 116, 100, 47, 105, 111, 47, 98, 117, 102, 102, 101, 114, 101,
            100, 46, 114, 115, 0, 0, 0, 12, 5, 16, 0, 25, 0, 0, 0, 16, 2, 0, 0, 21, 0, 0, 0, 12, 5,
            16, 0, 25, 0, 0, 0, 16, 2, 0, 0, 57, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116,
            111, 32, 119, 114, 105, 116, 101, 32, 116, 104, 101, 32, 98, 117, 102, 102, 101, 114,
            101, 100, 32, 100, 97, 116, 97, 0, 0, 0, 12, 5, 16, 0, 25, 0, 0, 0, 74, 2, 0, 0, 9, 0,
            0, 0, 12, 5, 16, 0, 25, 0, 0, 0, 5, 4, 0, 0, 35, 0, 0, 0, 117, 110, 101, 120, 112, 101,
            99, 116, 101, 100, 32, 101, 110, 100, 32, 111, 102, 32, 102, 105, 108, 101, 111, 116,
            104, 101, 114, 32, 111, 115, 32, 101, 114, 114, 111, 114, 111, 112, 101, 114, 97, 116,
            105, 111, 110, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 119, 114,
            105, 116, 101, 32, 122, 101, 114, 111, 116, 105, 109, 101, 100, 32, 111, 117, 116, 105,
            110, 118, 97, 108, 105, 100, 32, 100, 97, 116, 97, 105, 110, 118, 97, 108, 105, 100,
            32, 105, 110, 112, 117, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 111, 112,
            101, 114, 97, 116, 105, 111, 110, 32, 119, 111, 117, 108, 100, 32, 98, 108, 111, 99,
            107, 101, 110, 116, 105, 116, 121, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120,
            105, 115, 116, 115, 98, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 97, 100, 100,
            114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 97,
            100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 110, 111, 116, 32, 99,
            111, 110, 110, 101, 99, 116, 101, 100, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110,
            32, 97, 98, 111, 114, 116, 101, 100, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110,
            32, 114, 101, 115, 101, 116, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114,
            101, 102, 117, 115, 101, 100, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32,
            100, 101, 110, 105, 101, 100, 101, 110, 116, 105, 116, 121, 32, 110, 111, 116, 32, 102,
            111, 117, 110, 100, 0, 0, 0, 204, 1, 16, 0, 0, 0, 0, 0, 32, 40, 111, 115, 32, 101, 114,
            114, 111, 114, 32, 41, 204, 1, 16, 0, 0, 0, 0, 0, 192, 6, 16, 0, 11, 0, 0, 0, 203, 6,
            16, 0, 1, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116,
            101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 115, 114, 99, 47,
            108, 105, 98, 115, 116, 100, 47, 105, 111, 47, 115, 116, 100, 105, 111, 46, 114, 115,
            99, 97, 110, 110, 111, 116, 32, 97, 99, 99, 101, 115, 115, 32, 115, 116, 100, 111, 117,
            116, 32, 100, 117, 114, 105, 110, 103, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0,
            0, 0, 7, 16, 0, 22, 0, 0, 0, 15, 2, 0, 0, 25, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32,
            112, 114, 105, 110, 116, 105, 110, 103, 32, 116, 111, 32, 58, 32, 0, 0, 0, 76, 7, 16,
            0, 19, 0, 0, 0, 95, 7, 16, 0, 2, 0, 0, 0, 0, 7, 16, 0, 22, 0, 0, 0, 110, 3, 0, 0, 9, 0,
            0, 0, 115, 116, 100, 111, 117, 116, 115, 114, 99, 47, 108, 105, 98, 115, 116, 100, 47,
            105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 138, 7, 16, 0, 20, 0, 0, 0, 132, 4, 0,
            0, 25, 0, 0, 0, 138, 7, 16, 0, 20, 0, 0, 0, 125, 5, 0, 0, 33, 0, 0, 0, 43, 0, 0, 0, 12,
            0, 0, 0, 4, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 102, 111, 114, 109, 97,
            116, 116, 101, 114, 32, 101, 114, 114, 111, 114, 0, 43, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0,
            0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 97, 116, 116, 101, 109, 112, 116, 101, 100,
            32, 116, 111, 32, 117, 115, 101, 32, 97, 32, 99, 111, 110, 100, 105, 116, 105, 111,
            110, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 116, 119,
            111, 32, 109, 117, 116, 101, 120, 101, 115, 115, 114, 99, 47, 108, 105, 98, 115, 116,
            100, 47, 115, 121, 110, 99, 47, 99, 111, 110, 100, 118, 97, 114, 46, 114, 115, 54, 8,
            16, 0, 26, 0, 0, 0, 63, 2, 0, 0, 18, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 50,
            0, 0, 0, 51, 0, 0, 0, 115, 114, 99, 47, 108, 105, 98, 115, 116, 100, 47, 115, 121, 110,
            99, 47, 111, 110, 99, 101, 46, 114, 115, 0, 116, 8, 16, 0, 23, 0, 0, 0, 8, 1, 0, 0, 41,
            0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100,
            58, 32, 115, 116, 97, 116, 101, 95, 97, 110, 100, 95, 113, 117, 101, 117, 101, 32, 38,
            32, 83, 84, 65, 84, 69, 95, 77, 65, 83, 75, 32, 61, 61, 32, 82, 85, 78, 78, 73, 78, 71,
            0, 0, 0, 116, 8, 16, 0, 23, 0, 0, 0, 167, 1, 0, 0, 21, 0, 0, 0, 79, 110, 99, 101, 32,
            105, 110, 115, 116, 97, 110, 99, 101, 32, 104, 97, 115, 32, 112, 114, 101, 118, 105,
            111, 117, 115, 108, 121, 32, 98, 101, 101, 110, 32, 112, 111, 105, 115, 111, 110, 101,
            100, 0, 0, 116, 8, 16, 0, 23, 0, 0, 0, 139, 1, 0, 0, 21, 0, 0, 0, 116, 8, 16, 0, 23, 0,
            0, 0, 232, 1, 0, 0, 9, 0, 0, 0, 116, 8, 16, 0, 23, 0, 0, 0, 244, 1, 0, 0, 30, 0, 0, 0,
            97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32,
            113, 117, 101, 117, 101, 32, 33, 61, 32, 68, 79, 78, 69, 115, 114, 99, 47, 108, 105,
            98, 115, 116, 100, 47, 115, 121, 115, 95, 99, 111, 109, 109, 111, 110, 47, 97, 116, 95,
            101, 120, 105, 116, 95, 105, 109, 112, 46, 114, 115, 0, 99, 9, 16, 0, 36, 0, 0, 0, 49,
            0, 0, 0, 13, 0, 0, 0, 115, 116, 97, 99, 107, 32, 98, 97, 99, 107, 116, 114, 97, 99,
            101, 58, 10, 0, 0, 0, 152, 9, 16, 0, 17, 0, 0, 0, 52, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0,
            53, 0, 0, 0, 54, 0, 0, 0, 110, 111, 116, 101, 58, 32, 83, 111, 109, 101, 32, 100, 101,
            116, 97, 105, 108, 115, 32, 97, 114, 101, 32, 111, 109, 105, 116, 116, 101, 100, 44,
            32, 114, 117, 110, 32, 119, 105, 116, 104, 32, 96, 82, 85, 83, 84, 95, 66, 65, 67, 75,
            84, 82, 65, 67, 69, 61, 102, 117, 108, 108, 96, 32, 102, 111, 114, 32, 97, 32, 118,
            101, 114, 98, 111, 115, 101, 32, 98, 97, 99, 107, 116, 114, 97, 99, 101, 46, 10, 200,
            9, 16, 0, 88, 0, 0, 0, 102, 117, 108, 108, 60, 117, 110, 107, 110, 111, 119, 110, 62,
            92, 120, 0, 53, 10, 16, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 80, 111, 105, 115, 111, 110, 69, 114,
            114, 111, 114, 32, 123, 32, 105, 110, 110, 101, 114, 58, 32, 46, 46, 32, 125, 115, 114,
            99, 47, 108, 105, 98, 115, 116, 100, 47, 115, 121, 115, 95, 99, 111, 109, 109, 111,
            110, 47, 116, 104, 114, 101, 97, 100, 95, 105, 110, 102, 111, 46, 114, 115, 97, 115,
            115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 99, 46, 98,
            111, 114, 114, 111, 119, 40, 41, 46, 105, 115, 95, 110, 111, 110, 101, 40, 41, 0, 121,
            10, 16, 0, 36, 0, 0, 0, 40, 0, 0, 0, 26, 0, 0, 0, 102, 97, 116, 97, 108, 32, 114, 117,
            110, 116, 105, 109, 101, 32, 101, 114, 114, 111, 114, 58, 32, 10, 0, 0, 212, 10, 16, 0,
            21, 0, 0, 0, 233, 10, 16, 0, 1, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 55, 0, 0,
            0, 109, 101, 109, 111, 114, 121, 32, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 32,
            111, 102, 32, 32, 98, 121, 116, 101, 115, 32, 102, 97, 105, 108, 101, 100, 0, 0, 12,
            11, 16, 0, 21, 0, 0, 0, 33, 11, 16, 0, 13, 0, 0, 0, 115, 114, 99, 47, 108, 105, 98,
            115, 116, 100, 47, 112, 97, 110, 105, 99, 107, 105, 110, 103, 46, 114, 115, 0, 64, 11,
            16, 0, 23, 0, 0, 0, 180, 0, 0, 0, 20, 0, 0, 0, 66, 111, 120, 60, 65, 110, 121, 62, 60,
            117, 110, 110, 97, 109, 101, 100, 62, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 56,
            0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0,
            0, 0, 0, 0, 63, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0,
            67, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 116, 104, 114, 101, 97,
            100, 32, 39, 39, 32, 112, 97, 110, 105, 99, 107, 101, 100, 32, 97, 116, 32, 39, 39, 44,
            32, 0, 0, 212, 11, 16, 0, 8, 0, 0, 0, 220, 11, 16, 0, 15, 0, 0, 0, 235, 11, 16, 0, 3,
            0, 0, 0, 233, 10, 16, 0, 1, 0, 0, 0, 110, 111, 116, 101, 58, 32, 114, 117, 110, 32,
            119, 105, 116, 104, 32, 96, 82, 85, 83, 84, 95, 66, 65, 67, 75, 84, 82, 65, 67, 69, 61,
            49, 96, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 118, 97, 114,
            105, 97, 98, 108, 101, 32, 116, 111, 32, 100, 105, 115, 112, 108, 97, 121, 32, 97, 32,
            98, 97, 99, 107, 116, 114, 97, 99, 101, 10, 0, 0, 16, 12, 16, 0, 78, 0, 0, 0, 64, 11,
            16, 0, 23, 0, 0, 0, 130, 1, 0, 0, 15, 0, 0, 0, 64, 11, 16, 0, 23, 0, 0, 0, 131, 1, 0,
            0, 15, 0, 0, 0, 71, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 36, 0,
            0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 74, 0, 0, 0, 17, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 75, 0,
            0, 0, 76, 0, 0, 0, 17, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 77, 0, 0, 0, 116, 104, 114,
            101, 97, 100, 32, 112, 97, 110, 105, 99, 107, 101, 100, 32, 119, 104, 105, 108, 101,
            32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 112, 97, 110, 105, 99, 46, 32,
            97, 98, 111, 114, 116, 105, 110, 103, 46, 10, 0, 0, 208, 12, 16, 0, 50, 0, 0, 0, 116,
            104, 114, 101, 97, 100, 32, 112, 97, 110, 105, 99, 107, 101, 100, 32, 119, 104, 105,
            108, 101, 32, 112, 97, 110, 105, 99, 107, 105, 110, 103, 46, 32, 97, 98, 111, 114, 116,
            105, 110, 103, 46, 10, 0, 12, 13, 16, 0, 43, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32,
            116, 111, 32, 105, 110, 105, 116, 105, 97, 116, 101, 32, 112, 97, 110, 105, 99, 44, 32,
            101, 114, 114, 111, 114, 32, 64, 13, 16, 0, 32, 0, 0, 0, 78, 117, 108, 69, 114, 114,
            111, 114, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 78, 0, 0, 0, 99, 97, 110, 39, 116, 32,
            98, 108, 111, 99, 107, 32, 119, 105, 116, 104, 32, 119, 101, 98, 32, 97, 115, 115, 101,
            109, 98, 108, 121, 115, 114, 99, 47, 108, 105, 98, 115, 116, 100, 47, 115, 121, 115,
            47, 119, 97, 115, 105, 47, 46, 46, 47, 119, 97, 115, 109, 47, 99, 111, 110, 100, 118,
            97, 114, 46, 114, 115, 0, 157, 13, 16, 0, 38, 0, 0, 0, 21, 0, 0, 0, 9, 0, 0, 0, 97,
            100, 118, 97, 110, 99, 105, 110, 103, 32, 73, 111, 83, 108, 105, 99, 101, 32, 98, 101,
            121, 111, 110, 100, 32, 105, 116, 115, 32, 108, 101, 110, 103, 116, 104, 115, 114, 99,
            47, 108, 105, 98, 115, 116, 100, 47, 115, 121, 115, 47, 119, 97, 115, 105, 47, 105,
            111, 46, 114, 115, 247, 13, 16, 0, 25, 0, 0, 0, 20, 0, 0, 0, 13, 0, 0, 0, 99, 97, 110,
            110, 111, 116, 32, 114, 101, 99, 117, 114, 115, 105, 118, 101, 108, 121, 32, 97, 99,
            113, 117, 105, 114, 101, 32, 109, 117, 116, 101, 120, 115, 114, 99, 47, 108, 105, 98,
            115, 116, 100, 47, 115, 121, 115, 47, 119, 97, 115, 105, 47, 46, 46, 47, 119, 97, 115,
            109, 47, 109, 117, 116, 101, 120, 46, 114, 115, 64, 14, 16, 0, 36, 0, 0, 0, 21, 0, 0,
            0, 9, 0, 0, 0, 115, 116, 114, 101, 114, 114, 111, 114, 95, 114, 32, 102, 97, 105, 108,
            117, 114, 101, 115, 114, 99, 47, 108, 105, 98, 115, 116, 100, 47, 115, 121, 115, 47,
            119, 97, 115, 105, 47, 111, 115, 46, 114, 115, 0, 134, 14, 16, 0, 25, 0, 0, 0, 35, 0,
            0, 0, 13, 0, 0, 0, 134, 14, 16, 0, 25, 0, 0, 0, 37, 0, 0, 0, 9, 0, 0, 0, 114, 119, 108,
            111, 99, 107, 32, 108, 111, 99, 107, 101, 100, 32, 102, 111, 114, 32, 119, 114, 105,
            116, 105, 110, 103, 0, 0, 0, 192, 14, 16, 0, 25, 0, 0, 0, 111, 112, 101, 114, 97, 116,
            105, 111, 110, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32,
            111, 110, 32, 119, 97, 115, 109, 32, 121, 101, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
            18, 68, 59, 2, 63, 44, 71, 20, 61, 51, 48, 10, 27, 6, 70, 75, 69, 55, 15, 73, 14, 23,
            3, 64, 29, 60, 43, 54, 31, 74, 45, 28, 1, 32, 37, 41, 33, 8, 12, 21, 22, 34, 46, 16,
            56, 62, 11, 52, 49, 24, 47, 65, 9, 57, 17, 35, 67, 50, 66, 58, 5, 4, 38, 40, 39, 13,
            42, 30, 53, 7, 26, 72, 19, 36, 76, 255, 0, 0, 83, 117, 99, 99, 101, 115, 115, 0, 73,
            108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110,
            99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115,
            117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97,
            98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105,
            115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97,
            116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100,
            0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105,
            114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111,
            99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97,
            108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32,
            100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32,
            108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32,
            111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101,
            32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32,
            115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99,
            101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118,
            97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101,
            107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110,
            107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121,
            115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116,
            32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32,
            114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97,
            116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110,
            110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111,
            115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65,
            100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107,
            101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78,
            111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100,
            100, 114, 101, 115, 115, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99,
            101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73,
            115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32,
            102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109,
            97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114,
            103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105,
            115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108,
            105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97,
            109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110,
            121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121,
            115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114,
            105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97,
            100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0,
            78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97,
            100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32,
            108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107,
            115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108,
            101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107,
            32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32,
            110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101,
            118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79,
            112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70,
            117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109,
            101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111,
            102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101,
            110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 76, 105,
            110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101,
            100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97,
            100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99,
            107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100,
            100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115,
            115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116,
            111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111,
            114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110,
            111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99,
            111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78,
            111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101,
            115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112,
            111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65,
            100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98,
            108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0,
            78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108,
            101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116,
            32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116,
            105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102,
            101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0,
            83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101,
            100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99,
            116, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97,
            100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101,
            114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115,
            0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0,
            81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 77, 117, 108, 116,
            105, 104, 111, 112, 32, 97, 116, 116, 101, 109, 112, 116, 101, 100, 0, 67, 97, 112, 97,
            98, 105, 108, 105, 116, 105, 101, 115, 32, 105, 110, 115, 117, 102, 102, 105, 99, 105,
            101, 110, 116, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114,
            109, 97, 116, 105, 111, 110, 0, 0, 115, 114, 99, 47, 108, 105, 98, 97, 108, 108, 111,
            99, 47, 114, 97, 119, 95, 118, 101, 99, 46, 114, 115, 99, 97, 112, 97, 99, 105, 116,
            121, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 0, 134, 21, 16, 0, 23, 0, 0, 0, 68,
            2, 0, 0, 5, 0, 0, 0, 41, 115, 114, 99, 47, 108, 105, 98, 97, 108, 108, 111, 99, 47,
            118, 101, 99, 46, 114, 115, 41, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 60,
            61, 32, 108, 101, 110, 32, 40, 105, 115, 32, 101, 110, 100, 32, 100, 114, 97, 105, 110,
            32, 105, 110, 100, 101, 120, 32, 40, 105, 115, 32, 0, 235, 21, 16, 0, 20, 0, 0, 0, 212,
            21, 16, 0, 23, 0, 0, 0, 192, 21, 16, 0, 1, 0, 0, 0, 193, 21, 16, 0, 19, 0, 0, 0, 51, 5,
            0, 0, 13, 0, 0, 0, 96, 0, 46, 46, 42, 22, 16, 0, 2, 0, 0, 0, 66, 111, 114, 114, 111,
            119, 69, 114, 114, 111, 114, 66, 111, 114, 114, 111, 119, 77, 117, 116, 69, 114, 114,
            111, 114, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117,
            110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101,
            96, 32, 118, 97, 108, 117, 101, 40, 22, 16, 0, 0, 0, 0, 0, 58, 32, 0, 0, 40, 22, 16, 0,
            0, 0, 0, 0, 128, 22, 16, 0, 2, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 85, 0, 0,
            0, 58, 0, 0, 0, 40, 22, 16, 0, 0, 0, 0, 0, 164, 22, 16, 0, 1, 0, 0, 0, 164, 22, 16, 0,
            1, 0, 0, 0, 105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117,
            110, 100, 115, 58, 32, 116, 104, 101, 32, 108, 101, 110, 32, 105, 115, 32, 32, 98, 117,
            116, 32, 116, 104, 101, 32, 105, 110, 100, 101, 120, 32, 105, 115, 32, 0, 0, 192, 22,
            16, 0, 32, 0, 0, 0, 224, 22, 16, 0, 18, 0, 0, 0, 84, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0,
            86, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 32, 32, 32, 32, 32, 123, 10, 44, 10, 44, 32, 32,
            123, 32, 125, 32, 125, 40, 10, 40, 44, 41, 10, 91, 84, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0,
            89, 0, 0, 0, 93, 115, 114, 99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 102, 109, 116,
            47, 110, 117, 109, 46, 114, 115, 0, 69, 23, 16, 0, 22, 0, 0, 0, 84, 0, 0, 0, 20, 0, 0,
            0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48,
            57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50,
            48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51,
            49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52,
            50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53,
            51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54,
            52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55,
            53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56,
            54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57,
            55, 57, 56, 57, 57, 0, 0, 84, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 90, 0, 0, 0, 91, 0, 0,
            0, 92, 0, 0, 0, 115, 114, 99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 102, 109, 116,
            47, 109, 111, 100, 46, 114, 115, 0, 0, 80, 24, 16, 0, 22, 0, 0, 0, 83, 4, 0, 0, 17, 0,
            0, 0, 80, 24, 16, 0, 22, 0, 0, 0, 93, 4, 0, 0, 36, 0, 0, 0, 115, 114, 99, 47, 108, 105,
            98, 99, 111, 114, 101, 47, 115, 108, 105, 99, 101, 47, 109, 101, 109, 99, 104, 114, 46,
            114, 115, 0, 136, 24, 16, 0, 27, 0, 0, 0, 82, 0, 0, 0, 5, 0, 0, 0, 136, 24, 16, 0, 27,
            0, 0, 0, 105, 0, 0, 0, 26, 0, 0, 0, 136, 24, 16, 0, 27, 0, 0, 0, 131, 0, 0, 0, 5, 0, 0,
            0, 105, 110, 100, 101, 120, 32, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103,
            101, 32, 102, 111, 114, 32, 115, 108, 105, 99, 101, 32, 111, 102, 32, 108, 101, 110,
            103, 116, 104, 32, 212, 24, 16, 0, 6, 0, 0, 0, 218, 24, 16, 0, 34, 0, 0, 0, 115, 108,
            105, 99, 101, 32, 105, 110, 100, 101, 120, 32, 115, 116, 97, 114, 116, 115, 32, 97,
            116, 32, 32, 98, 117, 116, 32, 101, 110, 100, 115, 32, 97, 116, 32, 0, 12, 25, 16, 0,
            22, 0, 0, 0, 34, 25, 16, 0, 13, 0, 0, 0, 97, 116, 116, 101, 109, 112, 116, 101, 100,
            32, 116, 111, 32, 105, 110, 100, 101, 120, 32, 115, 108, 105, 99, 101, 32, 117, 112,
            32, 116, 111, 32, 109, 97, 120, 105, 109, 117, 109, 32, 117, 115, 105, 122, 101, 115,
            114, 99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 115, 116, 114, 47, 112, 97, 116, 116,
            101, 114, 110, 46, 114, 115, 0, 0, 108, 25, 16, 0, 26, 0, 0, 0, 139, 1, 0, 0, 38, 0, 0,
            0, 115, 114, 99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 115, 116, 114, 47, 108, 111,
            115, 115, 121, 46, 114, 115, 152, 25, 16, 0, 24, 0, 0, 0, 128, 0, 0, 0, 25, 0, 0, 0,
            152, 25, 16, 0, 24, 0, 0, 0, 119, 0, 0, 0, 29, 0, 0, 0, 152, 25, 16, 0, 24, 0, 0, 0,
            123, 0, 0, 0, 29, 0, 0, 0, 152, 25, 16, 0, 24, 0, 0, 0, 114, 0, 0, 0, 33, 0, 0, 0, 152,
            25, 16, 0, 24, 0, 0, 0, 104, 0, 0, 0, 29, 0, 0, 0, 152, 25, 16, 0, 24, 0, 0, 0, 99, 0,
            0, 0, 33, 0, 0, 0, 152, 25, 16, 0, 24, 0, 0, 0, 88, 0, 0, 0, 29, 0, 0, 0, 97, 115, 115,
            101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 98, 114, 111,
            107, 101, 110, 46, 105, 115, 95, 101, 109, 112, 116, 121, 40, 41, 0, 152, 25, 16, 0,
            24, 0, 0, 0, 157, 0, 0, 0, 17, 0, 0, 0, 115, 114, 99, 47, 108, 105, 98, 99, 111, 114,
            101, 47, 115, 116, 114, 47, 109, 111, 100, 46, 114, 115, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
            4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 26, 16, 0, 22, 0, 0, 0, 128, 7, 0,
            0, 47, 0, 0, 0, 84, 26, 16, 0, 22, 0, 0, 0, 195, 7, 0, 0, 47, 0, 0, 0, 84, 26, 16, 0,
            22, 0, 0, 0, 4, 8, 0, 0, 47, 0, 0, 0, 91, 46, 46, 46, 93, 98, 121, 116, 101, 32, 105,
            110, 100, 101, 120, 32, 32, 105, 115, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111,
            117, 110, 100, 115, 32, 111, 102, 32, 96, 0, 0, 161, 27, 16, 0, 11, 0, 0, 0, 172, 27,
            16, 0, 22, 0, 0, 0, 40, 22, 16, 0, 1, 0, 0, 0, 98, 101, 103, 105, 110, 32, 60, 61, 32,
            101, 110, 100, 32, 40, 32, 60, 61, 32, 41, 32, 119, 104, 101, 110, 32, 115, 108, 105,
            99, 105, 110, 103, 32, 96, 0, 0, 220, 27, 16, 0, 14, 0, 0, 0, 234, 27, 16, 0, 4, 0, 0,
            0, 238, 27, 16, 0, 16, 0, 0, 0, 40, 22, 16, 0, 1, 0, 0, 0, 32, 105, 115, 32, 110, 111,
            116, 32, 97, 32, 99, 104, 97, 114, 32, 98, 111, 117, 110, 100, 97, 114, 121, 59, 32,
            105, 116, 32, 105, 115, 32, 105, 110, 115, 105, 100, 101, 32, 32, 40, 98, 121, 116,
            101, 115, 32, 41, 32, 111, 102, 32, 96, 161, 27, 16, 0, 11, 0, 0, 0, 32, 28, 16, 0, 38,
            0, 0, 0, 70, 28, 16, 0, 8, 0, 0, 0, 78, 28, 16, 0, 6, 0, 0, 0, 40, 22, 16, 0, 1, 0, 0,
            0, 115, 114, 99, 47, 108, 105, 98, 99, 111, 114, 101, 47, 117, 110, 105, 99, 111, 100,
            101, 47, 112, 114, 105, 110, 116, 97, 98, 108, 101, 46, 114, 115, 124, 28, 16, 0, 32,
            0, 0, 0, 10, 0, 0, 0, 28, 0, 0, 0, 124, 28, 16, 0, 32, 0, 0, 0, 26, 0, 0, 0, 40, 0, 0,
            0, 0, 1, 3, 5, 5, 6, 6, 3, 7, 6, 8, 8, 9, 17, 10, 28, 11, 25, 12, 20, 13, 16, 14, 13,
            15, 4, 16, 3, 18, 18, 19, 9, 22, 1, 23, 5, 24, 2, 25, 3, 26, 7, 28, 2, 29, 1, 31, 22,
            32, 3, 43, 3, 44, 2, 45, 11, 46, 1, 48, 3, 49, 2, 50, 1, 167, 2, 169, 2, 170, 4, 171,
            8, 250, 2, 251, 5, 253, 4, 254, 3, 255, 9, 173, 120, 121, 139, 141, 162, 48, 87, 88,
            139, 140, 144, 28, 29, 221, 14, 15, 75, 76, 251, 252, 46, 47, 63, 92, 93, 95, 181, 226,
            132, 141, 142, 145, 146, 169, 177, 186, 187, 197, 198, 201, 202, 222, 228, 229, 255, 0,
            4, 17, 18, 41, 49, 52, 55, 58, 59, 61, 73, 74, 93, 132, 142, 146, 169, 177, 180, 186,
            187, 198, 202, 206, 207, 228, 229, 0, 4, 13, 14, 17, 18, 41, 49, 52, 58, 59, 69, 70,
            73, 74, 94, 100, 101, 132, 145, 155, 157, 201, 206, 207, 13, 17, 41, 69, 73, 87, 100,
            101, 141, 145, 169, 180, 186, 187, 197, 201, 223, 228, 229, 240, 13, 17, 69, 73, 100,
            101, 128, 132, 178, 188, 190, 191, 213, 215, 240, 241, 131, 133, 139, 164, 166, 190,
            191, 197, 199, 206, 207, 218, 219, 72, 152, 189, 205, 198, 206, 207, 73, 78, 79, 87,
            89, 94, 95, 137, 142, 143, 177, 182, 183, 191, 193, 198, 199, 215, 17, 22, 23, 91, 92,
            246, 247, 254, 255, 128, 13, 109, 113, 222, 223, 14, 15, 31, 110, 111, 28, 29, 95, 125,
            126, 174, 175, 187, 188, 250, 22, 23, 30, 31, 70, 71, 78, 79, 88, 90, 92, 94, 126, 127,
            181, 197, 212, 213, 220, 240, 241, 245, 114, 115, 143, 116, 117, 150, 47, 95, 38, 46,
            47, 167, 175, 183, 191, 199, 207, 215, 223, 154, 64, 151, 152, 48, 143, 31, 192, 193,
            206, 255, 78, 79, 90, 91, 7, 8, 15, 16, 39, 47, 238, 239, 110, 111, 55, 61, 63, 66, 69,
            144, 145, 254, 255, 83, 103, 117, 200, 201, 208, 209, 216, 217, 231, 254, 255, 0, 32,
            95, 34, 130, 223, 4, 130, 68, 8, 27, 4, 6, 17, 129, 172, 14, 128, 171, 53, 40, 11, 128,
            224, 3, 25, 8, 1, 4, 47, 4, 52, 4, 7, 3, 1, 7, 6, 7, 17, 10, 80, 15, 18, 7, 85, 7, 3,
            4, 28, 10, 9, 3, 8, 3, 7, 3, 2, 3, 3, 3, 12, 4, 5, 3, 11, 6, 1, 14, 21, 5, 58, 3, 17,
            7, 6, 5, 16, 7, 87, 7, 2, 7, 21, 13, 80, 4, 67, 3, 45, 3, 1, 4, 17, 6, 15, 12, 58, 4,
            29, 37, 95, 32, 109, 4, 106, 37, 128, 200, 5, 130, 176, 3, 26, 6, 130, 253, 3, 89, 7,
            21, 11, 23, 9, 20, 12, 20, 12, 106, 6, 10, 6, 26, 6, 89, 7, 43, 5, 70, 10, 44, 4, 12,
            4, 1, 3, 49, 11, 44, 4, 26, 6, 11, 3, 128, 172, 6, 10, 6, 33, 63, 76, 4, 45, 3, 116, 8,
            60, 3, 15, 3, 60, 7, 56, 8, 43, 5, 130, 255, 17, 24, 8, 47, 17, 45, 3, 32, 16, 33, 15,
            128, 140, 4, 130, 151, 25, 11, 21, 136, 148, 5, 47, 5, 59, 7, 2, 14, 24, 9, 128, 179,
            45, 116, 12, 128, 214, 26, 12, 5, 128, 255, 5, 128, 223, 12, 238, 13, 3, 132, 141, 3,
            55, 9, 129, 92, 20, 128, 184, 8, 128, 203, 42, 56, 3, 10, 6, 56, 8, 70, 8, 12, 6, 116,
            11, 30, 3, 90, 4, 89, 9, 128, 131, 24, 28, 10, 22, 9, 76, 4, 128, 138, 6, 171, 164, 12,
            23, 4, 49, 161, 4, 129, 218, 38, 7, 12, 5, 5, 128, 165, 17, 129, 109, 16, 120, 40, 42,
            6, 76, 4, 128, 141, 4, 128, 190, 3, 27, 3, 15, 13, 0, 6, 1, 1, 3, 1, 4, 2, 8, 8, 9, 2,
            10, 5, 11, 2, 14, 4, 16, 1, 17, 2, 18, 5, 19, 17, 20, 1, 21, 2, 23, 2, 25, 13, 28, 5,
            29, 8, 36, 1, 106, 3, 107, 2, 188, 2, 209, 2, 212, 12, 213, 9, 214, 2, 215, 2, 218, 1,
            224, 5, 225, 2, 232, 2, 238, 32, 240, 4, 248, 2, 249, 2, 250, 2, 251, 1, 12, 39, 59,
            62, 78, 79, 143, 158, 158, 159, 6, 7, 9, 54, 61, 62, 86, 243, 208, 209, 4, 20, 24, 54,
            55, 86, 87, 127, 170, 174, 175, 189, 53, 224, 18, 135, 137, 142, 158, 4, 13, 14, 17,
            18, 41, 49, 52, 58, 69, 70, 73, 74, 78, 79, 100, 101, 92, 182, 183, 27, 28, 7, 8, 10,
            11, 20, 23, 54, 57, 58, 168, 169, 216, 217, 9, 55, 144, 145, 168, 7, 10, 59, 62, 102,
            105, 143, 146, 111, 95, 238, 239, 90, 98, 154, 155, 39, 40, 85, 157, 160, 161, 163,
            164, 167, 168, 173, 186, 188, 196, 6, 11, 12, 21, 29, 58, 63, 69, 81, 166, 167, 204,
            205, 160, 7, 25, 26, 34, 37, 62, 63, 197, 198, 4, 32, 35, 37, 38, 40, 51, 56, 58, 72,
            74, 76, 80, 83, 85, 86, 88, 90, 92, 94, 96, 99, 101, 102, 107, 115, 120, 125, 127, 138,
            164, 170, 175, 176, 192, 208, 174, 175, 121, 204, 110, 111, 147, 94, 34, 123, 5, 3, 4,
            45, 3, 102, 3, 1, 47, 46, 128, 130, 29, 3, 49, 15, 28, 4, 36, 9, 30, 5, 43, 5, 68, 4,
            14, 42, 128, 170, 6, 36, 4, 36, 4, 40, 8, 52, 11, 1, 128, 144, 129, 55, 9, 22, 10, 8,
            128, 152, 57, 3, 99, 8, 9, 48, 22, 5, 33, 3, 27, 5, 1, 64, 56, 4, 75, 5, 47, 4, 10, 7,
            9, 7, 64, 32, 39, 4, 12, 9, 54, 3, 58, 5, 26, 7, 4, 12, 7, 80, 73, 55, 51, 13, 51, 7,
            46, 8, 10, 129, 38, 82, 78, 40, 8, 42, 86, 28, 20, 23, 9, 78, 4, 30, 15, 67, 14, 25, 7,
            10, 6, 72, 8, 39, 9, 117, 11, 63, 65, 42, 6, 59, 5, 10, 6, 81, 6, 1, 5, 16, 3, 5, 128,
            139, 98, 30, 72, 8, 10, 128, 166, 94, 34, 69, 11, 10, 6, 13, 19, 57, 7, 10, 54, 44, 4,
            16, 128, 192, 60, 100, 83, 12, 72, 9, 10, 70, 69, 27, 72, 8, 83, 29, 57, 129, 7, 70,
            10, 29, 3, 71, 73, 55, 3, 14, 8, 10, 6, 57, 7, 10, 129, 54, 25, 128, 183, 1, 15, 50,
            13, 131, 155, 102, 117, 11, 128, 196, 138, 188, 132, 47, 143, 209, 130, 71, 161, 185,
            130, 57, 7, 42, 4, 2, 96, 38, 10, 70, 10, 40, 5, 19, 130, 176, 91, 101, 75, 4, 57, 7,
            17, 64, 5, 11, 2, 14, 151, 248, 8, 132, 214, 42, 9, 162, 247, 129, 31, 49, 3, 17, 4, 8,
            129, 140, 137, 4, 107, 5, 13, 3, 9, 7, 16, 147, 96, 128, 246, 10, 115, 8, 110, 23, 70,
            128, 154, 20, 12, 87, 9, 25, 128, 135, 129, 71, 3, 133, 66, 15, 21, 133, 80, 43, 128,
            213, 45, 3, 26, 4, 2, 129, 112, 58, 5, 1, 133, 0, 128, 215, 41, 76, 4, 10, 4, 2, 131,
            17, 68, 76, 61, 128, 194, 60, 6, 1, 4, 85, 5, 27, 52, 2, 129, 14, 44, 4, 100, 12, 86,
            10, 128, 174, 56, 29, 13, 44, 4, 9, 7, 2, 14, 6, 128, 154, 131, 216, 8, 13, 3, 13, 3,
            116, 12, 89, 7, 12, 20, 12, 4, 56, 8, 10, 6, 40, 8, 34, 78, 129, 84, 12, 21, 3, 3, 5,
            7, 9, 25, 7, 7, 9, 3, 13, 7, 41, 128, 203, 37, 10, 132, 6, 115, 114, 99, 47, 108, 105,
            98, 99, 111, 114, 101, 47, 117, 110, 105, 99, 111, 100, 101, 47, 117, 110, 105, 99,
            111, 100, 101, 95, 100, 97, 116, 97, 46, 114, 115, 0, 0, 3, 34, 16, 0, 35, 0, 0, 0, 75,
            0, 0, 0, 40, 0, 0, 0, 3, 34, 16, 0, 35, 0, 0, 0, 87, 0, 0, 0, 22, 0, 0, 0, 3, 34, 16,
            0, 35, 0, 0, 0, 82, 0, 0, 0, 62, 0, 0, 0, 84, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 93, 0,
            0, 0, 83, 111, 109, 101, 78, 111, 110, 101, 85, 116, 102, 56, 69, 114, 114, 111, 114,
            118, 97, 108, 105, 100, 95, 117, 112, 95, 116, 111, 101, 114, 114, 111, 114, 95, 108,
            101, 110, 0, 0, 0, 84, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 94, 0, 0, 0, 0, 3, 0, 0, 131,
            4, 32, 0, 145, 5, 96, 0, 93, 19, 160, 0, 18, 23, 160, 30, 12, 32, 224, 30, 239, 44, 32,
            43, 42, 48, 160, 43, 111, 166, 96, 44, 2, 168, 224, 44, 30, 251, 224, 45, 0, 254, 160,
            53, 158, 255, 224, 53, 253, 1, 97, 54, 1, 10, 161, 54, 36, 13, 97, 55, 171, 14, 225,
            56, 47, 24, 33, 57, 48, 28, 97, 70, 243, 30, 161, 74, 240, 106, 97, 78, 79, 111, 161,
            78, 157, 188, 33, 79, 101, 209, 225, 79, 0, 218, 33, 80, 0, 224, 225, 81, 48, 225, 97,
            83, 236, 226, 161, 84, 208, 232, 225, 84, 32, 0, 46, 85, 240, 1, 191, 85, 0, 112, 0, 7,
            0, 45, 1, 1, 1, 2, 1, 2, 1, 1, 72, 11, 48, 21, 16, 1, 101, 7, 2, 6, 2, 2, 1, 4, 35, 1,
            30, 27, 91, 11, 58, 9, 9, 1, 24, 4, 1, 9, 1, 3, 1, 5, 43, 3, 119, 15, 1, 32, 55, 1, 1,
            1, 4, 8, 4, 1, 3, 7, 10, 2, 29, 1, 58, 1, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 26, 1, 2, 2,
            57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22,
            6, 1, 1, 58, 1, 1, 2, 1, 4, 8, 1, 7, 3, 10, 2, 30, 1, 59, 1, 1, 1, 12, 1, 9, 1, 40, 1,
            3, 1, 57, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 2, 1, 3, 1, 5, 2, 7, 2, 11,
            2, 28, 2, 57, 2, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 29, 1, 72, 1, 4, 1, 2, 3, 1, 1, 8, 1,
            81, 1, 2, 7, 12, 8, 98, 1, 2, 9, 11, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2,
            5, 11, 1, 36, 9, 1, 102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1,
            15, 1, 0, 3, 0, 3, 29, 3, 29, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 9, 1, 45, 3, 119, 2,
            34, 1, 118, 3, 4, 2, 9, 1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2,
            1, 48, 17, 63, 4, 48, 7, 1, 1, 5, 1, 40, 9, 12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3,
            1, 1, 3, 58, 8, 2, 2, 152, 3, 1, 13, 1, 7, 4, 1, 6, 1, 3, 2, 198, 58, 1, 5, 0, 1, 195,
            33, 0, 3, 141, 1, 96, 32, 0, 6, 105, 2, 0, 4, 1, 10, 32, 2, 80, 2, 0, 1, 3, 1, 4, 1,
            25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11, 46, 3, 48, 1, 2, 4, 2, 2, 39, 1, 67,
            6, 2, 2, 2, 2, 12, 1, 8, 1, 47, 1, 51, 1, 1, 3, 2, 2, 5, 2, 1, 1, 42, 2, 8, 1, 238, 1,
            2, 1, 4, 1, 0, 1, 0, 16, 16, 16, 0, 2, 0, 1, 226, 1, 149, 5, 0, 3, 1, 2, 5, 4, 40, 3,
            4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 176, 1, 54, 15, 56, 3, 49, 4, 2, 2, 69, 3, 36, 5, 1,
            8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2, 57,
            2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 81, 1, 2, 6, 1, 1, 2, 1,
            1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1,
            1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1, 10, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32,
            10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2,
            1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1, 0, 2, 0, 5, 59, 7, 0, 1, 63,
            4, 81, 1, 0, 2, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1,
            22, 5, 1, 15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 0, 7, 0, 4, 0, 7, 109, 7, 0, 96, 128, 240,
            0,
        ]);
        m.memory[1058256..1058265].copy_from_slice(&[1, 0, 0, 0, 0, 0, 0, 0, 1]);
        Some(m)
    }
    pub fn new() -> Self {
        Self::try_new().unwrap()
    }
}

impl WasmModule {
    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_0(&mut self, arg_0: i32) -> Option<()> {
        std::process::exit(arg_0)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_1(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<i32> {
        Some(wasi_common::wasi::wasi_snapshot_preview1::fd_write(
            &self.context,
            &guest_mem_wrapper::GuestMemWrapper::from(&mut self.memory),
            arg_0,
            arg_1,
            arg_2,
            arg_3,
        ))
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_2(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        Some(wasi_common::wasi::wasi_snapshot_preview1::fd_prestat_get(
            &self.context,
            &guest_mem_wrapper::GuestMemWrapper::from(&mut self.memory),
            arg_0,
            arg_1,
        ))
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_3(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        Some(
            wasi_common::wasi::wasi_snapshot_preview1::fd_prestat_dir_name(
                &self.context,
                &guest_mem_wrapper::GuestMemWrapper::from(&mut self.memory),
                arg_0,
                arg_1,
                arg_2,
            ),
        )
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_4(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        Some(
            wasi_common::wasi::wasi_snapshot_preview1::environ_sizes_get(
                &self.context,
                &guest_mem_wrapper::GuestMemWrapper::from(&mut self.memory),
                arg_0,
                arg_1,
            ),
        )
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_5(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        Some(wasi_common::wasi::wasi_snapshot_preview1::environ_get(
            &self.context,
            &guest_mem_wrapper::GuestMemWrapper::from(&mut self.memory),
            arg_0,
            arg_1,
        ))
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_6(&mut self) -> Option<()> {
        self.func_159()?;
        self.func_155()?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_7(&mut self) -> Option<()> {
        let mut local_0: i32 = 0i32;
        let mut v0: TaggedVal;
        self.func_6()?;
        v0 = TaggedVal::from(self.func_17()?);
        local_0 = v0.try_as_i32()?;
        self.func_161()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            self.func_0(v0.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_8(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32, arg_4: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_6);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_8 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_7);
        v1 = TaggedVal::from(local_8);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_7);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
        local_9 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_7);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 12) as usize,
        )?);
        local_10 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_9);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_10);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_4);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i32()?,
        )?;
        return Some(()); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_9(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_4);
        v0 = TaggedVal::from(self.func_10(v0.try_as_i32()?)?);
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_6);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_7);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_5);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_10(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(4i32);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_4);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_6);
        v0 = TaggedVal::from(self.func_15(v0.try_as_i32()?)?);
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_8 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_8);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_9 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_9);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_7);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_11(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));

        return Some(()); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_12(&mut self) -> Option<i32> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(0i32);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(1i32);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(self.func_13(v0.try_as_i32()?)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_13(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(15i32);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_4);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_7);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 15) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_6);
        v0 = TaggedVal::from(self.func_138(v0.try_as_i32()?)?);
        local_8 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_9 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_9);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_10 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_10);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_8);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_14(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut local_13: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_4);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1048576i32);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_6);
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(12i32);
        local_8 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_8);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_9 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_9);
        local_10 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_10);
        v1 = TaggedVal::from(local_7);
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(self.func_136(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?);
        local_11 = v0.try_as_i32()?;
        v0 = TaggedVal::from(16i32);
        local_12 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_12);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_13 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_13);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_11);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_15(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        {
            let rets = self.indirect_call(v0.try_as_i32()? as usize, &[])?;
            if rets.len() != 0 {
                return None;
            }
        }
        v0 = TaggedVal::from(self.func_12()?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_16(&mut self) -> Option<()> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut local_13: i32 = 0i32;
        let mut local_14: i32 = 0i32;
        let mut local_15: i32 = 0i32;
        let mut local_16: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(32i32);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(8i32);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_3);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_4);
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(1i32);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_8 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_8);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 1048624) as usize,
        )?);
        local_9 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_10 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_10);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 1048628) as usize,
        )?);
        local_11 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_9);
        v2 = TaggedVal::from(local_6);
        v3 = TaggedVal::from(local_11);
        v4 = TaggedVal::from(local_7);
        self.func_8(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(8i32);
        local_12 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_12);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_13 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_13);
        local_14 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_14);
        self.func_104(v0.try_as_i32()?)?;
        v0 = TaggedVal::from(32i32);
        local_15 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_15);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_16 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_16);
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        return Some(()); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_17(&mut self) -> Option<i32> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(4i32);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_14(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_18(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(self.func_17()?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_19(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_125(v0.try_as_i32()?, v1.try_as_i32()?)?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_20(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_2);
        self.func_126(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        return Some(()); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_21(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(local_3);
        v0 = TaggedVal::from(self.func_127(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_4);
        return Some(v0.try_as_i32()?); // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_22(&mut self, arg_0: i32) -> Option<i64> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(-3452326882552253247i64);
        Some(v0.try_as_i64()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_23(&mut self, arg_0: i32) -> Option<i64> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(9147559743429524724i64);
        Some(v0.try_as_i64()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_24(&mut self, arg_0: i32) -> Option<i64> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(943913013690912652i64);
        Some(v0.try_as_i64()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_25(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        self.func_225(v0.try_as_i32()?, v1.try_as_i32()?)?;
        'label_0: loop {
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(12i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(1048704i32);
                v0 = TaggedVal::from(self.func_210(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);

                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_1;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(self.func_211(v0.try_as_i32()?)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_26(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(80i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(1049652i32);
            v2 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(self.func_220(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(local_1);
            self.func_235(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
            v2 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 12) as usize,
            )?);
            self.func_236(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            self.func_237(v0.try_as_i32()?, v1.try_as_i32()?)?;
            'label_1: loop {
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 40) as usize,
                )?);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(48i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(64i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_6 = v0.try_as_i32()?;
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 52) as usize,
                    )?);
                    local_7 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 48) as usize,
                    )?);
                    local_8 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 44) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(4i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 64) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(4i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 48) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_4);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 40) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_4);
                    v2 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 44) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(4i32);
                    local_4 = v0.try_as_i32()?;
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    'label_7: loop {
                                        'label_8: loop {
                                            'label_9: loop {
                                                'label_10: loop {
                                                    'label_11: loop {
                                                        'label_12: loop {
                                                            'label_13: loop {
                                                                'label_14: loop {
                                                                    'label_15: loop {
                                                                        'label_16: loop {
                                                                            'label_17: loop {
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_4,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        4i32,
                                                                                    );
                                                                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                                                                if v0
                                                                                    .try_as_i32()?
                                                                                    != 0
                                                                                {
                                                                                    {}
                                                                                    break 'label_17;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_5,
                                                                                    );
                                                                                v0 = TaggedVal::from(self.func_194(v0.try_as_i32()?)?);
                                                                                local_4 = v0
                                                                                    .try_as_i32()?;
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        1114112i32,
                                                                                    );
                                                                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                if v0
                                                                                    .try_as_i32()?
                                                                                    != 0
                                                                                {
                                                                                    {}
                                                                                    break 'label_16;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_3,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        4i32,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 48)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                break;
                                                                            }
                                                                            'label_18: loop {
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_3,
                                                                                    );
                                                                                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 44) as usize)?);
                                                                                local_0 = v0
                                                                                    .try_as_i32()?;
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        local_3,
                                                                                    );
                                                                                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 40) as usize)?);
                                                                                local_4 = v1
                                                                                    .try_as_i32()?;
                                                                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                                                                if v0
                                                                                    .try_as_i32()?
                                                                                    != 0
                                                                                {
                                                                                    {}
                                                                                    break 'label_18;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_3,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        local_4,
                                                                                    );
                                                                                v2 =
                                                                                    TaggedVal::from(
                                                                                        1i32,
                                                                                    );
                                                                                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                local_9 = v1
                                                                                    .try_as_i32()?;
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 40)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                'label_19: loop {
                                                                                    'label_20: loop {
                                                                                        v0 = TaggedVal::from(local_4);
                                                                                        v0 = TaggedVal::from(read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                        local_1 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(-1i32);
                                                                                        v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_20;
}
                                                                                        v0 = TaggedVal::from(local_1);
                                                                                        v1 = TaggedVal::from(255i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        local_0 = v0.try_as_i32()?;
                                                                                        {}
                                                                                        break 'label_19;
                                                                                        break;
                                                                                    }
                                                                                    'label_21: loop {
                                                                                        'label_22: loop {
                                                                                            v0 = TaggedVal::from(local_9);
                                                                                            v1 = TaggedVal::from(local_0);
                                                                                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_22;
}
                                                                                            v0 = TaggedVal::from(0i32);
                                                                                            local_4 = v0.try_as_i32()?;
                                                                                            v0 = TaggedVal::from(local_0);
                                                                                            local_9 = v0.try_as_i32()?;
                                                                                            {}
                                                                                            break 'label_21;
                                                                                            break;
                                                                                        }
                                                                                        v0 = TaggedVal::from(local_3);
                                                                                        v1 = TaggedVal::from(local_4);
                                                                                        v2 = TaggedVal::from(2i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                        local_9 = v1.try_as_i32()?;
                                                                                        write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 40) as usize, v1.try_as_i32()?)?;
                                                                                        v0 = TaggedVal::from(local_4);
                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 1) as usize).and_then(|x| Some(x as i32))?);
                                                                                        v1 = TaggedVal::from(63i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        local_4 = v0.try_as_i32()?;
                                                                                        break;
                                                                                    }
                                                                                    v0 = TaggedVal::from(local_1);
                                                                                    v1 = TaggedVal::from(31i32);
                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                    local_10 = v0
                                                                                        .try_as_i32(
                                                                                    )?;
                                                                                    'label_23: loop {
                                                                                        v0 = TaggedVal::from(local_1);
                                                                                        v1 = TaggedVal::from(255i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        local_1 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(223i32);
                                                                                        v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_23;
}
                                                                                        v0 = TaggedVal::from(local_4);
                                                                                        v1 = TaggedVal::from(local_10);
                                                                                        v2 = TaggedVal::from(6i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                                                                        local_0 = v0.try_as_i32()?;
                                                                                        {}
                                                                                        break 'label_19;
                                                                                        break;
                                                                                    }
                                                                                    'label_24: loop {
                                                                                        'label_25: loop {
                                                                                            v0 = TaggedVal::from(local_9);
                                                                                            v1 = TaggedVal::from(local_0);
                                                                                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_25;
}
                                                                                            v0 = TaggedVal::from(0i32);
                                                                                            local_9 = v0.try_as_i32()?;
                                                                                            v0 = TaggedVal::from(local_0);
                                                                                            local_11 = v0.try_as_i32()?;
                                                                                            {}
                                                                                            break 'label_24;
                                                                                            break;
                                                                                        }
                                                                                        v0 = TaggedVal::from(local_3);
                                                                                        v1 = TaggedVal::from(local_9);
                                                                                        v2 = TaggedVal::from(1i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                        local_11 = v1.try_as_i32()?;
                                                                                        write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 40) as usize, v1.try_as_i32()?)?;
                                                                                        v0 = TaggedVal::from(local_9);
                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                        v1 = TaggedVal::from(63i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        local_9 = v0.try_as_i32()?;
                                                                                        break;
                                                                                    }
                                                                                    v0 = TaggedVal::from(local_9);
                                                                                    v1 = TaggedVal::from(local_4);
                                                                                    v2 = TaggedVal::from(6i32);
                                                                                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                                                                    local_4 = v0
                                                                                        .try_as_i32(
                                                                                        )?;
                                                                                    'label_26: loop {
                                                                                        v0 = TaggedVal::from(local_1);
                                                                                        v1 = TaggedVal::from(240i32);
                                                                                        v0 = TaggedVal::from(((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32);
                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_26;
}
                                                                                        v0 = TaggedVal::from(local_4);
                                                                                        v1 = TaggedVal::from(local_10);
                                                                                        v2 = TaggedVal::from(12i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                                                                        local_0 = v0.try_as_i32()?;
                                                                                        {}
                                                                                        break 'label_19;
                                                                                        break;
                                                                                    }
                                                                                    'label_27: loop {
                                                                                        'label_28: loop {
                                                                                            v0 = TaggedVal::from(local_11);
                                                                                            v1 = TaggedVal::from(local_0);
                                                                                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_28;
}
                                                                                            v0 = TaggedVal::from(0i32);
                                                                                            local_0 = v0.try_as_i32()?;
                                                                                            {}
                                                                                            break 'label_27;
                                                                                            break;
                                                                                        }
                                                                                        v0 = TaggedVal::from(local_3);
                                                                                        v1 = TaggedVal::from(local_11);
                                                                                        v2 = TaggedVal::from(1i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                        write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 40) as usize, v1.try_as_i32()?)?;
                                                                                        v0 = TaggedVal::from(local_11);
                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                        v1 = TaggedVal::from(63i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        local_0 = v0.try_as_i32()?;
                                                                                        break;
                                                                                    }
                                                                                    v0 = TaggedVal::from(local_4);
                                                                                    v1 = TaggedVal::from(6i32);
                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                    v1 = TaggedVal::from(local_10);
                                                                                    v2 = TaggedVal::from(18i32);
                                                                                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                                                                    v2 = TaggedVal::from(1835008i32);
                                                                                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                                                                    v1 = TaggedVal::from(local_0);
                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                                                                    local_0 = v0
                                                                                        .try_as_i32(
                                                                                        )?;
                                                                                    break;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        2i32,
                                                                                    );
                                                                                local_4 = v0
                                                                                    .try_as_i32()?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        -9i32,
                                                                                    );
                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                local_9 = v0
                                                                                    .try_as_i32()?;
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        30i32,
                                                                                    );
                                                                                v0 = TaggedVal::from(((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32);
                                                                                if v0
                                                                                    .try_as_i32()?
                                                                                    != 0
                                                                                {
                                                                                    {}
                                                                                    break 'label_13;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        92i32,
                                                                                    );
                                                                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                                                                if v0
                                                                                    .try_as_i32()?
                                                                                    != 0
                                                                                {
                                                                                    {}
                                                                                    break 'label_11;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        1114112i32,
                                                                                    );
                                                                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                if v0
                                                                                    .try_as_i32()?
                                                                                    != 0
                                                                                {
                                                                                    {}
                                                                                    break 'label_12;
                                                                                }
                                                                                break;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                local_3,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                read_mem_i32(
                                                                                    &self.memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 64)
                                                                                        as usize,
                                                                                )?,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                4i32,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                (v0.try_as_i32()?
                                                                                    == v1
                                                                                        .try_as_i32(
                                                                                        )?)
                                                                                    as i32,
                                                                            );
                                                                            if v0.try_as_i32()? != 0
                                                                            {
                                                                                {}
                                                                                break 'label_15;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                local_6,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                self.func_194(
                                                                                    v0.try_as_i32(
                                                                                    )?,
                                                                                )?,
                                                                            );
                                                                            local_4 =
                                                                                v0.try_as_i32()?;
                                                                            v1 = TaggedVal::from(
                                                                                1114112i32,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                (v0.try_as_i32()?
                                                                                    == v1
                                                                                        .try_as_i32(
                                                                                        )?)
                                                                                    as i32,
                                                                            );
                                                                            if v0.try_as_i32()? != 0
                                                                            {
                                                                                {}
                                                                                break 'label_15;
                                                                            }
                                                                            break;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            self.func_226(
                                                                                v0.try_as_i32()?,
                                                                                v1.try_as_i32()?,
                                                                            )?,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_14;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            read_mem_i32(
                                                                                &self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 48)
                                                                                    as usize,
                                                                            )?,
                                                                        );
                                                                        local_4 =
                                                                            v0.try_as_i32()?;
                                                                        {}
                                                                        continue 'label_4;
                                                                        break;
                                                                    }
                                                                    'label_29: loop {
                                                                        v0 = TaggedVal::from(
                                                                            local_7,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            (v0.try_as_i32()? == 0)
                                                                                as i32,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_3;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_8,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 28)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(1i32);
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 60)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(1i32);
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 52)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            1051200i32,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 48)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(1i32);
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 44)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            1051192i32,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 40)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(5i32);
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 36)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_7,
                                                                        );
                                                                        v1 = TaggedVal::from(-1i32);
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        local_7 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            local_8,
                                                                        );
                                                                        v1 = TaggedVal::from(1i32);
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        local_8 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v2 = TaggedVal::from(32i32);
                                                                        v1 = TaggedVal::from(
                                                                            v1.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v2.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 56)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v2 = TaggedVal::from(28i32);
                                                                        v1 = TaggedVal::from(
                                                                            v1.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v2.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 32)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v2 = TaggedVal::from(40i32);
                                                                        v1 = TaggedVal::from(
                                                                            v1.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v2.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            self.func_221(
                                                                                v0.try_as_i32()?,
                                                                                v1.try_as_i32()?,
                                                                            )?,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            (v0.try_as_i32()? == 0)
                                                                                as i32,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            continue 'label_29;
                                                                        }
                                                                        break;
                                                                    }
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(1i32);
                                                                local_4 = v0.try_as_i32()?;
                                                                {}
                                                                break 'label_0;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(116i32);
                                                            local_1 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_9);
                                                            match v0.try_as_i32()? {
                                                                0 => {
                                                                    {}
                                                                    break 'label_5;
                                                                }
                                                                1 => {
                                                                    {}
                                                                    break 'label_7;
                                                                }
                                                                2 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                3 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                4 => {
                                                                    {}
                                                                    break 'label_6;
                                                                }
                                                                5 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                6 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                7 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                8 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                9 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                10 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                11 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                12 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                13 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                14 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                15 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                16 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                17 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                18 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                19 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                20 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                21 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                22 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                23 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                24 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                25 => {
                                                                    {}
                                                                    break 'label_11;
                                                                }
                                                                26 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                27 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                28 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                29 => {
                                                                    {}
                                                                    break 'label_12;
                                                                }
                                                                30 => {
                                                                    {}
                                                                    break 'label_11;
                                                                }
                                                                _ => {
                                                                    {}
                                                                    break 'label_5;
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        'label_30: loop {
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(
                                                                self.func_228(v0.try_as_i32()?)?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_30;
                                                            }
                                                            v0 = TaggedVal::from(local_0);
                                                            v1 = TaggedVal::from(1i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    | v1.try_as_i32()?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?.leading_zeros()
                                                                    as i32),
                                                            );
                                                            v1 = TaggedVal::from(2i32);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? as u32)
                                                                    >> (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(7i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    ^ v1.try_as_i32()?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? as u32 as u64
                                                                    as i64),
                                                            );
                                                            v1 = TaggedVal::from(21474836480i64);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i64()?
                                                                    | v1.try_as_i64()?,
                                                            );
                                                            local_12 = v0.try_as_i64()?;
                                                            {}
                                                            break 'label_9;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(1i32);
                                                        local_4 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(local_0);
                                                        v0 = TaggedVal::from(
                                                            self.func_242(v0.try_as_i32()?)?,
                                                        );
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_10;
                                                        }
                                                        break;
                                                    }
                                                    {}
                                                    break 'label_8;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? | v1.try_as_i32()?,
                                                );
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()?.leading_zeros() as i32),
                                                );
                                                v1 = TaggedVal::from(2i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? as u32)
                                                        >> (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(7i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? ^ v1.try_as_i32()?,
                                                );
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? as u32 as u64 as i64),
                                                );
                                                v1 = TaggedVal::from(21474836480i64);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i64()? | v1.try_as_i64()?,
                                                );
                                                local_12 = v0.try_as_i64()?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(3i32);
                                            local_4 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_0);
                                        local_1 = v0.try_as_i32()?;
                                        {}
                                        break 'label_5;
                                        break;
                                    }
                                    v0 = TaggedVal::from(110i32);
                                    local_1 = v0.try_as_i32()?;
                                    {}
                                    break 'label_5;
                                    break;
                                }
                                v0 = TaggedVal::from(114i32);
                                local_1 = v0.try_as_i32()?;
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_12);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 56) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_1);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 52) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 48) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            continue 'label_4;
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(40i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(16i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    self.func_237(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 40) as usize,
                    )?);
                    local_4 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_2;
                    }
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(1049652i32);
            v2 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(self.func_220(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(80i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_4);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_27(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_222(v0.try_as_i32()?)?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_223(v0.try_as_i32()?)?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_187(v0.try_as_i32()?, v1.try_as_i32()?)?);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_246(v0.try_as_i32()?, v1.try_as_i32()?)?);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_243(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_28(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_222(v0.try_as_i32()?)?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_223(v0.try_as_i32()?)?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_241(v0.try_as_i32()?, v1.try_as_i32()?)?);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_245(v0.try_as_i32()?, v1.try_as_i32()?)?);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_239(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_29(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_231(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_30(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_204(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_31(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_245(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_32(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i64 = 0i64;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2048i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(65536i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 6) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(224i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(6i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 5) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(3i32);
                        local_1 = v0.try_as_i32()?;
                        {}
                        break 'label_0;
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_1);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(1i32);
                    local_1 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(63i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(128i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 5) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(6i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(192i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(2i32);
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 7) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(18i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(240i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(6i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 6) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(12i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 5) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(4i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_3);
        v3 = TaggedVal::from(local_1);
        self.func_33(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_4: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_4;
            }
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_4 = v0.try_as_i64()?;
            'label_5: loop {
                'label_6: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_6;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_5;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_7: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_7;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_33(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                'label_2: loop {
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_2);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(2i32);
                    v2 = TaggedVal::from(local_4);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v3 = TaggedVal::from(1i32);
                    self.func_141(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                    )?;
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    read_mem_u16(&self.memory, (v0.try_as_i32()? + 16) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                'label_6: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 20) as usize,
                                    )?);
                                    local_5 = v0.try_as_i32()?;
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(16i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(14i32);
                                    v2 = TaggedVal::from(1050340i32);
                                    v3 = TaggedVal::from(28i32);
                                    self.func_34(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                        v3.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(read_mem_i64(
                                        &self.memory,
                                        (v1.try_as_i32()? + 16) as usize,
                                    )?);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    {}
                                    break 'label_0;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                {}
                                break 'label_3;
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(
                                read_mem_u16(&self.memory, (v1.try_as_i32()? + 18) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            write_mem_u16(
                                &mut self.memory,
                                (v0.try_as_i32()? + 30) as usize,
                                v1.try_as_i32()? as u16,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(30i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(self.func_140(v0.try_as_i32()?)?);
                            v1 = TaggedVal::from(65535i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(self.func_88(v0.try_as_i32()?)?);
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(15i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_0;
                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(1050544i32);
                        self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_2;
                    }
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(3i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_34(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_3);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(1i32);
                                local_5 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                local_6 = v0.try_as_i32()?;
                                {}
                                break 'label_4;
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 20) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_3);
                        self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 24) as usize,
                        )?);
                        local_5 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(self.func_167(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                        )?);

                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_3 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 16) as usize,
                        )?);
                        local_7 = v1.try_as_i64()?;
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_5 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_7);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 16) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(1049756i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(
                            read_mem_u16(&self.memory, (v1.try_as_i32()? + 16) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u16(
                            &mut self.memory,
                            (v0.try_as_i32()? + 9) as usize,
                            v1.try_as_i32()? as u16,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(11i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(2i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_2 = v1.try_as_i32()?;
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(2i32);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(
                            read_mem_u16(&self.memory, (v1.try_as_i32()? + 16) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u16(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1) as usize,
                            v1.try_as_i32()? as u16,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(32i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                        return Some(());
                        break;
                    }
                    self.func_69()?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1i32);
                self.func_70(v0.try_as_i32()?, v1.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(12i32);
            v1 = TaggedVal::from(4i32);
            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(12i32);
        v1 = TaggedVal::from(4i32);
        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_35(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i64 = 0i64;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2048i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(65536i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 6) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(224i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(6i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 5) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(3i32);
                        local_1 = v0.try_as_i32()?;
                        {}
                        break 'label_0;
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_1);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(1i32);
                    local_1 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(63i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(128i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 5) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(6i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(192i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(2i32);
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 7) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(18i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(240i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(6i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 6) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(12i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 5) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(4i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_3);
        v3 = TaggedVal::from(local_1);
        self.func_36(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_4: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_4;
            }
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_4 = v0.try_as_i64()?;
            'label_5: loop {
                'label_6: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_6;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_5;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_7: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_7;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_36(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(local_2);
                        v3 = TaggedVal::from(local_3);
                        self.func_100(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                        )?;
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                )?);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                'label_6: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                    )?);
                                    local_5 = v0.try_as_i32()?;
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(24i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(14i32);
                                    v2 = TaggedVal::from(1050340i32);
                                    v3 = TaggedVal::from(28i32);
                                    self.func_34(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                        v3.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(read_mem_i64(
                                        &self.memory,
                                        (v1.try_as_i32()? + 24) as usize,
                                    )?);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    {}
                                    break 'label_0;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_1;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                {}
                                break 'label_4;
                                break;
                            }
                            'label_7: loop {
                                'label_8: loop {
                                    'label_9: loop {
                                        'label_10: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 12) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            match v0.try_as_i32()? {
                                                0 => {
                                                    {}
                                                    break 'label_9;
                                                }
                                                1 => {
                                                    {}
                                                    break 'label_10;
                                                }
                                                2 => {
                                                    {}
                                                    break 'label_8;
                                                }
                                                _ => {
                                                    {}
                                                    break 'label_9;
                                                }
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 13) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        local_5 = v0.try_as_i32()?;
                                        {}
                                        break 'label_7;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 16) as usize,
                                    )?);
                                    v0 = TaggedVal::from(self.func_88(v0.try_as_i32()?)?);
                                    v1 = TaggedVal::from(255i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    local_5 = v0.try_as_i32()?;
                                    {}
                                    break 'label_7;
                                    break;
                                }
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 16) as usize,
                                )?);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                local_5 = v0.try_as_i32()?;
                                break;
                            }
                            'label_11: loop {
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(255i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                v1 = TaggedVal::from(15i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_11;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(read_mem_i64(
                                    &self.memory,
                                    (v1.try_as_i32()? + 12) as usize,
                                )?);
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                {}
                                break 'label_0;
                                break;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 4) as usize,
                            )?);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            {
                                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            'label_12: loop {
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_6 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_12;
                                }
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_7);
                                v2 = TaggedVal::from(local_6);
                                v2 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v2.try_as_i32()? + 8) as usize,
                                )?);
                                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(12i32);
                            v2 = TaggedVal::from(4i32);
                            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_3;
                        }
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(3i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(1050544i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_37(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1048632i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_38(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1048656i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_39(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i64 = 0i64;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(96i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_2 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058352) as usize,
                    )?);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(1i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058352) as usize,
                        v1.try_as_i64()?,
                    )?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 1058356) as usize,
                )?);
                v1 = TaggedVal::from(1i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            'label_3: loop {
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 1058284) as usize,
                )?);
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from(
                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                );
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(1i32);
                local_2 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            'label_4: loop {
                'label_5: loop {
                    'label_6: loop {
                        v0 = TaggedVal::from(local_2);
                        match v0.try_as_i32()? {
                            0 => {
                                {}
                                break 'label_6;
                            }
                            1 => {
                                {}
                                break 'label_5;
                            }
                            2 => {
                                {}
                                break 'label_4;
                            }
                            _ => {
                                {}
                                break 'label_6;
                            }
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(64i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1049653i32);
                    v2 = TaggedVal::from(14i32);
                    self.func_79(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    'label_7: loop {
                        'label_8: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 64) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_8;
                            }
                            v0 = TaggedVal::from(5i32);
                            local_2 = v0.try_as_i32()?;
                            {}
                            break 'label_7;
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 68) as usize,
                        )?);
                        local_4 = v0.try_as_i32()?;
                        'label_9: loop {
                            'label_10: loop {
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(72i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_10;
                                }
                                'label_11: loop {
                                    'label_12: loop {
                                        v0 = TaggedVal::from(local_2);
                                        match v0.try_as_i32()? {
                                            0 => {
                                                {}
                                                break 'label_12;
                                            }
                                            1 => {
                                                {}
                                                break 'label_10;
                                            }
                                            2 => {
                                                {}
                                                break 'label_10;
                                            }
                                            3 => {
                                                {}
                                                break 'label_11;
                                            }
                                            _ => {
                                                {}
                                                break 'label_12;
                                            }
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(4i32);
                                    local_2 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(1i32);
                                    local_5 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(1049667i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_9;
                                    }
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    v1 = TaggedVal::from(48i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_10;
                                    }
                                    {}
                                    break 'label_9;
                                    break;
                                }
                                v0 = TaggedVal::from(1i32);
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(3i32);
                                local_5 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(1051176i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(1819047270i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(2i32);
                            local_5 = v0.try_as_i32()?;
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_7;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(1i32);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(1i32);
                    v2 = TaggedVal::from(local_5);
                    v3 = TaggedVal::from(local_2);
                    v4 = TaggedVal::from(5i32);
                    v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                    local_3 = v3.try_as_i32()?;
                    if ValType::from(v1) != ValType::from(v2) {
                        return None;
                    }
                    if v3.try_as_i32()? != 0 {
                        v1 = v1;
                    } else {
                        v1 = v2;
                    }
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058284) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(4i32);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_3);
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_2 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(4i32);
                local_2 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_2 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_2);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 35) as usize,
            v1.try_as_i32()? as u8,
        )?;
        'label_13: loop {
            'label_14: loop {
                'label_15: loop {
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(self.func_201(v0.try_as_i32()?)?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_15;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 36) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(24i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_0);
                    self.func_203(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 28) as usize,
                    )?);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 12) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    local_6 = v0.try_as_i64()?;
                    'label_16: loop {
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_16;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(9147559743429524724i64);
                        v0 = TaggedVal::from((v0.try_as_i64()? == v1.try_as_i64()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_14;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_0);
                    self.func_203(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 16) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 20) as usize,
                    )?);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 12) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    local_6 = v0.try_as_i64()?;
                    v0 = TaggedVal::from(1051496i32);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(8i32);
                    local_0 = v0.try_as_i32()?;
                    'label_17: loop {
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_17;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(943913013690912652i64);
                        v0 = TaggedVal::from((v0.try_as_i64()? != v1.try_as_i64()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_17;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 40) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_13;
                    break;
                }
                v0 = TaggedVal::from(1049080i32);
                v1 = TaggedVal::from(43i32);
                v2 = TaggedVal::from(1051480i32);
                self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_0 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 44) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_0 = v0.try_as_i32()?;
        'label_18: loop {
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058340) as usize,
            )?);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_18;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(1i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 1058340) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058348) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1058344i32);
        v1 = TaggedVal::from(self.func_72(v1.try_as_i32()?)?);
        local_2 = v1.try_as_i32()?;
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 52) as usize,
            v1.try_as_i32()?,
        )?;
        'label_19: loop {
            'label_20: loop {
                'label_21: loop {
                    v0 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 16) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_21;
                    }
                    {}
                    break 'label_20;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                v2 = TaggedVal::from(local_5);
                if ValType::from(v0) != ValType::from(v1) {
                    return None;
                }
                if v2.try_as_i32()? != 0 {
                    v0 = v0;
                } else {
                    v0 = v1;
                }
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_19;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_0 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(9i32);
            v3 = TaggedVal::from(local_0);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 60) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(1051504i32);
            v3 = TaggedVal::from(local_0);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 56) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(35i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 76) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(36i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 72) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(40i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 68) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(56i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 64) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(0i32);
            v2 = TaggedVal::from(local_1);
            self.func_103(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 12) as usize,
            )?);
            local_5 = v0.try_as_i32()?;
            'label_22: loop {
                'label_23: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_23;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 84) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 80) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(64i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(80i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v2 = TaggedVal::from(1051560i32);
                    self.func_128(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 80) as usize,
                    )?);
                    v2 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 84) as usize,
                    )?);
                    self.func_103(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    'label_24: loop {
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_24;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        local_4 = v1.try_as_i32()?;
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                            if rets.len() != 0 {
                                return None;
                            }
                        }
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_7 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_24;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_7);
                        v2 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 8) as usize,
                        )?);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(1i32);
                    local_3 = v0.try_as_i32()?;
                    {}
                    break 'label_22;
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(64i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(88i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(1051516i32);
                self.func_128(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            local_4 = v1.try_as_i32()?;
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            'label_25: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_25;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(52i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                self.func_67(v0.try_as_i32()?)?;
                break;
            }
            'label_26: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(0i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_26;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                v0 = TaggedVal::from(local_5);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_26;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(96i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            return Some(());
            break;
        }
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(0i32);
        v2 = TaggedVal::from(1049852i32);
        self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_40(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(12i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        self.func_41(v0.try_as_i32()?, v1.try_as_i32()?)?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_41(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(0i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()? as u8,
        )?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(1i32);
            local_3 = v0.try_as_i32()?;
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(
                                    read_mem_u8(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058361) as usize,
                                    )
                                    .and_then(|x| Some(x as i32))?,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058280) as usize,
                                )?);
                                local_4 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(10i32);
                                v1 = TaggedVal::from((v1.try_as_i32()? == v2.try_as_i32()?) as i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058280) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058361) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                'label_6: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_4);
                                        match v0.try_as_i32()? {
                                            0 => {
                                                {}
                                                break 'label_2;
                                            }
                                            1 => {
                                                {}
                                                break 'label_7;
                                            }
                                            _ => {
                                                {}
                                                break 'label_2;
                                            }
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(1050948i32);
                                    v1 = TaggedVal::from(31i32);
                                    v2 = TaggedVal::from(1051016i32);
                                    self.func_45(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                    break;
                                }
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 8) as usize,
                                )?);
                                local_2 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_6 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_5);
                                local_0 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                v0 = TaggedVal::from(local_5);
                                local_0 = v0.try_as_i32()?;
                                'label_8: loop {
                                    'label_9: loop {
                                        v0 = TaggedVal::from(local_0);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_2 = v0.try_as_i32()?;
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_9;
                                        }
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(8i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_0 = v0.try_as_i32()?;
                                        {}
                                        break 'label_4;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v1 = TaggedVal::from(local_0);
                                    v2 = TaggedVal::from(4i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 0) as usize,
                                    )?);
                                    local_8 = v1.try_as_i32()?;
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 12) as usize,
                                    )?);
                                    {
                                        let rets =
                                            self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                        if rets.len() != 0 {
                                            return None;
                                        }
                                    }
                                    'label_10: loop {
                                        v0 = TaggedVal::from(local_8);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                        )?);
                                        local_9 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_10;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(local_9);
                                        v2 = TaggedVal::from(local_8);
                                        v2 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v2.try_as_i32()? + 8) as usize,
                                        )?);
                                        self.func_20(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                        )?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(8i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_0 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(local_6);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_8;
                                    }
                                    {}
                                    break 'label_3;
                                    break;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(1052192i32);
                            v1 = TaggedVal::from(32i32);
                            v2 = TaggedVal::from(1052260i32);
                            self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        'label_11: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_0);
                            v2 = TaggedVal::from(4i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_2 = v1.try_as_i32()?;
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            {
                                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            'label_12: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_8 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_12;
                                }
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_8);
                                v2 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v2.try_as_i32()? + 8) as usize,
                                )?);
                                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_0 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_11;
                            }
                            break;
                        }
                        break;
                    }
                    'label_13: loop {
                        v0 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_13;
                        }
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_13;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(4i32);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(12i32);
                    v2 = TaggedVal::from(4i32);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(9i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(10i32);
                v2 = TaggedVal::from(local_3);
                v3 = TaggedVal::from(10i32);
                v2 =
                    TaggedVal::from(((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32)) as i32);
                if ValType::from(v0) != ValType::from(v1) {
                    return None;
                }
                if v2.try_as_i32()? != 0 {
                    v0 = v0;
                } else {
                    v0 = v1;
                }
                local_2 = v0.try_as_i32()?;
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(11i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_1;
                }
                break;
            }
            return Some(());
            break;
        }
        v0 = TaggedVal::from(1049080i32);
        v1 = TaggedVal::from(43i32);
        v2 = TaggedVal::from(1050764i32);
        self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_42(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(1051180i32);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(9i32);
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(8i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
            self.func_240(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            v0 = TaggedVal::from(1051180i32);
            v1 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 20) as usize,
            )?);
            v2 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 16) as usize,
            )?);
            v3 = TaggedVal::from(1i32);
            v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
            local_4 = v2.try_as_i32()?;
            if ValType::from(v0) != ValType::from(v1) {
                return None;
            }
            if v2.try_as_i32()? != 0 {
                v0 = v0;
            } else {
                v0 = v1;
            }
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(9i32);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            v2 = TaggedVal::from(local_4);
            if ValType::from(v0) != ValType::from(v1) {
                return None;
            }
            if v2.try_as_i32()? != 0 {
                v0 = v0;
            } else {
                v0 = v1;
            }
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(local_4);
        self.func_235(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        v0 = TaggedVal::from(local_3);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
        v1 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v1.try_as_i32()? + 12) as usize,
        )?);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_238(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_2 = v0.try_as_i32()?;
        'label_2: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_43(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(0i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            local_0 = v1.try_as_i32()?;
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                self.func_44(v0.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(4i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            return Some(());
            break;
        }
        v0 = TaggedVal::from(1052192i32);
        v1 = TaggedVal::from(32i32);
        v2 = TaggedVal::from(1052260i32);
        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_44(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 24) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(2i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(25i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(12i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            self.func_68(v0.try_as_i32()?, v1.try_as_i32()?)?;
            'label_1: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 12) as usize,
            )?);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        'label_3: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 12) as usize,
            )?);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_3;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_3;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        'label_4: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_4;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            local_0 = v1.try_as_i32()?;
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_4;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(32i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_45(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1051820i32);
        v2 = TaggedVal::from(0i32);
        v3 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(self.func_202(v3.try_as_i32()?)?);
        self.func_130(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_46(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_47(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_48(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_49(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 1058352) as usize,
                )?);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(1i64);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058352) as usize,
                    v1.try_as_i64()?,
                )?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058356) as usize,
            )?);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(1i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(0i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()? as u8,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_50(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_51(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        {
            let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
            if rets.len() != 0 {
                return None;
            }
        }
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_52(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_53(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_54(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(1049080i32);
            v1 = TaggedVal::from(43i32);
            v2 = TaggedVal::from(1051768i32);
            self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_55(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(1049080i32);
            v1 = TaggedVal::from(43i32);
            v2 = TaggedVal::from(local_1);
            self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_56(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_35(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_57(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2048i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(65536i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(63i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            v2 = TaggedVal::from(128i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 14) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(12i32);
                            v1 = TaggedVal::from(
                                (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                            );
                            v2 = TaggedVal::from(224i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(6i32);
                            v1 = TaggedVal::from(
                                (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                            );
                            v2 = TaggedVal::from(63i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            v2 = TaggedVal::from(128i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 13) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(3i32);
                            local_1 = v0.try_as_i32()?;
                            {}
                            break 'label_1;
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 15) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(18i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(240i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(6i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 14) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 13) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(4i32);
                        local_1 = v0.try_as_i32()?;
                        {}
                        break 'label_1;
                        break;
                    }
                    'label_5: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_5;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(1i32);
                        self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 8) as usize,
                    )?);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(63i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(128i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 13) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(6i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(192i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(12i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(2i32);
                local_1 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            local_0 = v1.try_as_i32()?;
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            local_4 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_167(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);

            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(0i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_58(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 8) as usize,
                    )?);
                    local_3 = v1.try_as_i32()?;
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    local_3 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(local_3);
                    v3 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from(local_1);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_3 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(0i32);
                            v2 = TaggedVal::from(local_2);
                            if ValType::from(v0) != ValType::from(v1) {
                                return None;
                            }
                            if v2.try_as_i32()? != 0 {
                                v0 = v0;
                            } else {
                                v0 = v1;
                            }
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            'label_5: loop {
                                v0 = TaggedVal::from(local_2);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                );
                                local_1 = v0.try_as_i32()?;
                                {}
                                break 'label_3;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(1i32);
                            v3 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(self.func_21(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                                v3.try_as_i32()?,
                            )?);
                            local_1 = v0.try_as_i32()?;
                            {}
                            break 'label_3;
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_1 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                return Some(());
                break;
            }
            self.func_175()?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1i32);
        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_59(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_32(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_60(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1048632i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_61(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1048656i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_62(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1048680i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_63(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i64 = 0i64;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        local_0 = v1.try_as_i32()?;
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(local_2);
        self.func_36(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_4 = v0.try_as_i64()?;
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_3: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_64(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i64 = 0i64;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        local_0 = v1.try_as_i32()?;
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(local_2);
        self.func_33(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_4 = v0.try_as_i64()?;
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_3: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_65(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v1 = TaggedVal::from(local_2);
        self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        local_0 = v1.try_as_i32()?;
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        local_3 = v1.try_as_i32()?;
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_2);
        v0 =
            TaggedVal::from(self.func_167(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);

        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_66(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 8) as usize,
                    )?);
                    local_3 = v1.try_as_i32()?;
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(0i32);
                                v2 = TaggedVal::from(local_2);
                                if ValType::from(v0) != ValType::from(v1) {
                                    return None;
                                }
                                if v2.try_as_i32()? != 0 {
                                    v0 = v0;
                                } else {
                                    v0 = v1;
                                }
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                'label_6: loop {
                                    v0 = TaggedVal::from(local_2);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_1);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_7;
                                        }
                                        v0 = TaggedVal::from(1i32);
                                        local_3 = v0.try_as_i32()?;
                                        {}
                                        break 'label_3;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                    );
                                    local_3 = v0.try_as_i32()?;
                                    {}
                                    break 'label_4;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(1i32);
                                v3 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from(self.func_21(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                    v3.try_as_i32()?,
                                )?);
                                local_3 = v0.try_as_i32()?;
                                {}
                                break 'label_4;
                                break;
                            }
                            'label_8: loop {
                                v0 = TaggedVal::from(local_1);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(1i32);
                                local_3 = v0.try_as_i32()?;
                                {}
                                break 'label_3;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                            local_3 = v0.try_as_i32()?;
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                return Some(());
                break;
            }
            self.func_175()?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_67(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(0i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 20) as usize,
            )?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(1i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 28) as usize,
        )?);
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(1i32);
        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_1 = v0.try_as_i32()?;
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            local_0 = v1.try_as_i32()?;
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(48i32);
            v2 = TaggedVal::from(8i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_68(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(3i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()? as u8,
        )?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(0i32);
                local_5 = v0.try_as_i32()?;
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(1i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 13) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                v0 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_7 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_3;
                                }
                                v0 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                );
                                local_7 = v0.try_as_i32()?;
                                'label_6: loop {
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_7;
                                        }
                                        v0 = TaggedVal::from(local_1);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_6 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(local_7);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 12) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(local_6);
                                        v2 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(16i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(1i32);
                                        v2 = TaggedVal::from(local_2);
                                        v3 = TaggedVal::from(8i32);
                                        v2 = TaggedVal::from(
                                            v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?),
                                        );
                                        v3 = TaggedVal::from(1i32);
                                        self.func_141(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                            v3.try_as_i32()?,
                                        )?;
                                        'label_8: loop {
                                            v0 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(
                                                read_mem_u16(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 16) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_8;
                                            }
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(
                                                read_mem_u16(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 18) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            write_mem_u16(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 30) as usize,
                                                v1.try_as_i32()? as u16,
                                            )?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(30i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(self.func_140(v0.try_as_i32()?)?);
                                            v1 = TaggedVal::from(65535i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(8i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_7;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(0i32);
                                            write_mem_u8(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 13) as usize,
                                                v1.try_as_i32()? as u8,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v0 = TaggedVal::from(self.func_88(v0.try_as_i32()?)?);
                                            v1 = TaggedVal::from(255i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(15i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_6;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(0i32);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(4i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(local_6);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            {}
                                            break 'label_2;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 20) as usize,
                                        )?);
                                        local_7 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 13) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    'label_9: loop {
                                        v0 = TaggedVal::from(local_7);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_9;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(16i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(14i32);
                                        v2 = TaggedVal::from(1049928i32);
                                        v3 = TaggedVal::from(33i32);
                                        self.func_34(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                            v3.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(read_mem_i64(
                                            &self.memory,
                                            (v1.try_as_i32()? + 16) as usize,
                                        )?);
                                        write_mem_i64(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i64()?,
                                        )?;
                                        {}
                                        break 'label_2;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_7);
                                    v1 = TaggedVal::from(local_5);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_5 = v0.try_as_i32()?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_5;
                                }
                                {}
                                break 'label_2;
                                break;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(1049080i32);
                        v1 = TaggedVal::from(43i32);
                        v2 = TaggedVal::from(1049896i32);
                        self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_7);
                    v2 = TaggedVal::from(1049912i32);
                    self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_7 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_6 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_5);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_7);
                v1 = TaggedVal::from(0i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_6);
                v1 = TaggedVal::from(local_5);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_7 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_6 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_6);
                v2 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(local_7);
                v0 = TaggedVal::from(self.func_163(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);

                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_7);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(32i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            return Some(());
            break;
        }
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_6);
        self.func_177(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_69(&mut self) -> Option<()> {
        self.func_175()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_70(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_71(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_231(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_72(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_2 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(self.func_77(v0.try_as_i32()?)?);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(-1i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            'label_5: loop {
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                local_4 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(-1i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(4i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                self.func_67(v0.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_3);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v2 = TaggedVal::from(1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_2 = v1.try_as_i32()?;
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(-1i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_2 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(32i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                        v0 = TaggedVal::from(local_3);
                        return Some(v0.try_as_i32()?);
                        break;
                    }
                    v0 = TaggedVal::from(1048912i32);
                    v1 = TaggedVal::from(24i32);
                    v2 = TaggedVal::from(local_1);
                    v3 = TaggedVal::from(24i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v3 = TaggedVal::from(1049124i32);
                    v4 = TaggedVal::from(1048936i32);
                    self.func_198(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                        v4.try_as_i32()?,
                    )?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(1048812i32);
                v1 = TaggedVal::from(16i32);
                v2 = TaggedVal::from(local_1);
                v3 = TaggedVal::from(24i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v3 = TaggedVal::from(1049140i32);
                v4 = TaggedVal::from(1048896i32);
                self.func_198(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                )?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1048812i32);
            v1 = TaggedVal::from(16i32);
            v2 = TaggedVal::from(local_1);
            v3 = TaggedVal::from(24i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(1049140i32);
            v4 = TaggedVal::from(1048896i32);
            self.func_198(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
                v3.try_as_i32()?,
                v4.try_as_i32()?,
            )?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_73(&mut self) -> Option<()> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(96i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_0 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058340) as usize,
            )?);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(1i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 1058340) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058348) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        v0 = TaggedVal::from(1058344i32);
        v0 = TaggedVal::from(self.func_72(v0.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v1 = TaggedVal::from(0i32);
        v2 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v2.try_as_i32()? + 24) as usize,
        )?);
        local_2 = v2.try_as_i32()?;
        v3 = TaggedVal::from(local_2);
        v4 = TaggedVal::from(2i32);
        v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
        local_2 = v3.try_as_i32()?;
        if ValType::from(v1) != ValType::from(v2) {
            return None;
        }
        if v3.try_as_i32()? != 0 {
            v1 = v1;
        } else {
            v1 = v2;
        }
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        'label_1: loop {
            v0 = TaggedVal::from(local_2);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            'label_2: loop {
                'label_3: loop {
                    'label_4: loop {
                        'label_5: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_1 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(28i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(1i32);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(0i32);
                            local_4 = v0.try_as_i32()?;
                            'label_6: loop {
                                'label_7: loop {
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058352) as usize,
                                    )?);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_7;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058356) as usize,
                                    )?);
                                    local_4 = v0.try_as_i32()?;
                                    {}
                                    break 'label_6;
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(1i64);
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058352) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                break;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058356) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 32) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 24) as usize,
                            )?);
                            local_2 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(1i32);
                            v3 = TaggedVal::from(local_2);
                            if ValType::from(v1) != ValType::from(v2) {
                                return None;
                            }
                            if v3.try_as_i32()? != 0 {
                                v1 = v1;
                            } else {
                                v1 = v2;
                            }
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                                v1.try_as_i32()?,
                            )?;
                            'label_8: loop {
                                v0 = TaggedVal::from(local_2);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                )?);
                                v1 = TaggedVal::from(36i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                self.func_74(v0.try_as_i32()?, v1.try_as_i32()?)?;
                                self.func_75()?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_2);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            'label_9: loop {
                                v0 = TaggedVal::from(local_4);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                'label_10: loop {
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058352) as usize,
                                    )?);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_10;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(1i64);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058352) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    {}
                                    break 'label_9;
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058356) as usize,
                                )?);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(1i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 32) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(0i32);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            {}
                            break 'label_1;
                            break;
                        }
                        v0 = TaggedVal::from(1052192i32);
                        v1 = TaggedVal::from(32i32);
                        v2 = TaggedVal::from(1052260i32);
                        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 72) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_4);
                    v2 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from((v1.try_as_i32()? != v2.try_as_i32()?) as i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 76) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(1049172i32);
                    v1 = TaggedVal::from(43i32);
                    v2 = TaggedVal::from(local_0);
                    v3 = TaggedVal::from(72i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v3 = TaggedVal::from(1049232i32);
                    v4 = TaggedVal::from(1049324i32);
                    self.func_198(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                        v4.try_as_i32()?,
                    )?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(1049340i32);
                v1 = TaggedVal::from(23i32);
                v2 = TaggedVal::from(1049364i32);
                self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(20i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(6i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(52i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(7i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(20i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(3i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(12i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 64) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1049380i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 68) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(72i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(20i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(3i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 20) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1049056i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(7i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 44) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1049036i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 88) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 76) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1049416i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 72) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(40i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 32) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(72i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 56) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(68i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 48) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(64i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1049424i32);
            self.func_76(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
        local_1 = v0.try_as_i32()?;
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        local_1 = v1.try_as_i32()?;
        v2 = TaggedVal::from(-1i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        'label_11: loop {
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_11;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.func_67(v0.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(96i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_74(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        local_2 = v1.try_as_i32()?;
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(local_2);
        if ValType::from(v1) != ValType::from(v2) {
            return None;
        }
        if v3.try_as_i32()? != 0 {
            v1 = v1;
        } else {
            v1 = v2;
        }
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(1050624i32);
            v1 = TaggedVal::from(54i32);
            v2 = TaggedVal::from(1050704i32);
            self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_75(&mut self) -> Option<()> {
        let mut local_0: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_0);
        self.func_119(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_76(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(self.func_202(v1.try_as_i32()?)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1049036i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1049036i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        self.func_129(v0.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_77(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_3 = v0.try_as_i32()?;
                                {}
                                break 'label_4;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 4) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 36) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_2);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 32) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(32i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            self.func_176(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(0i32);
                            v2 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 16) as usize,
                            )?);
                            local_0 = v2.try_as_i32()?;
                            v3 = TaggedVal::from(local_1);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 24) as usize,
                            )?);
                            self.func_206(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                                v3.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(32i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(16i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 16) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 32) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(32i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            self.func_78(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 1058360) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(1i32);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058360) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        'label_6: loop {
                            'label_7: loop {
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i64(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058256) as usize,
                                )?);
                                local_5 = v0.try_as_i64()?;
                                v1 = TaggedVal::from(-1i64);
                                v0 = TaggedVal::from((v0.try_as_i64()? == v1.try_as_i64()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_7;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_5);
                                v2 = TaggedVal::from(1i64);
                                v1 = TaggedVal::from(
                                    v1.try_as_i64()?.wrapping_add(v2.try_as_i64()?),
                                );
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058256) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(0i64);
                                v0 = TaggedVal::from((v0.try_as_i64()? != v1.try_as_i64()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_6;
                                }
                                v0 = TaggedVal::from(1049080i32);
                                v1 = TaggedVal::from(43i32);
                                v2 = TaggedVal::from(1049512i32);
                                self.func_181(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                )?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            v0 = TaggedVal::from(1049440i32);
                            v1 = TaggedVal::from(55i32);
                            v2 = TaggedVal::from(1049496i32);
                            self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058360) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(0i32);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(48i32);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(1i64);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 36) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_4);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 20) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(4294967297i64);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 28) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(48i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                        v0 = TaggedVal::from(local_0);
                        return Some(v0.try_as_i32()?);
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(40i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i64(
                        &self.memory,
                        (v1.try_as_i32()? + 20) as usize,
                    )?);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 36) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 32) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(1049528i32);
                    v1 = TaggedVal::from(47i32);
                    v2 = TaggedVal::from(local_1);
                    v3 = TaggedVal::from(32i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v3 = TaggedVal::from(1049156i32);
                    v4 = TaggedVal::from(1049576i32);
                    self.func_198(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                        v4.try_as_i32()?,
                    )?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(1052192i32);
                v1 = TaggedVal::from(32i32);
                v2 = TaggedVal::from(1052260i32);
                self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1i32);
            v1 = TaggedVal::from(1i32);
            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(48i32);
        v1 = TaggedVal::from(8i32);
        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_78(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        self.func_66(v0.try_as_i32()?, v1.try_as_i32()?)?;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(4i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            local_3 = v1.try_as_i32()?;
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            local_4 = v1.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(1i32);
            self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_2 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(1i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        local_3 = v1.try_as_i32()?;
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_1 = v0.try_as_i32()?;
        v1 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(0i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()? as u8,
        )?;
        'label_1: loop {
            'label_2: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_1);
                local_2 = v0.try_as_i32()?;
                {}
                break 'label_1;
                break;
            }
            'label_3: loop {
                'label_4: loop {
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_4);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_1);
                    local_2 = v0.try_as_i32()?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(1049248i32);
                v1 = TaggedVal::from(36i32);
                v2 = TaggedVal::from(1048796i32);
                self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            'label_5: loop {
                v0 = TaggedVal::from(local_3);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_5;
                }
                v0 = TaggedVal::from(1i32);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(1i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                {}
                break 'label_1;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(1i32);
            v3 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(self.func_21(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
                v3.try_as_i32()?,
            )?);
            local_2 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(1i32);
            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_79(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(80i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 28) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(1i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_5 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        local_6 = v0.try_as_i32()?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_5);
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 72) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_4);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 64) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 68) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(64i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_2);
                        self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 64) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 72) as usize,
                        )?);
                        local_4 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(self.func_167(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                        )?);

                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_2 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 72) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(0i32);
                        v2 = TaggedVal::from(local_5);
                        v3 = TaggedVal::from(local_2);
                        self.func_206(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                        )?;
                        'label_5: loop {
                            'label_6: loop {
                                'label_7: loop {
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 16) as usize,
                                    )?);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_7;
                                    }
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(40i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(8i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(local_3);
                                    v2 = TaggedVal::from(64i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    v2 = TaggedVal::from(8i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 0) as usize,
                                    )?);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(read_mem_i64(
                                        &self.memory,
                                        (v1.try_as_i32()? + 64) as usize,
                                    )?);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 40) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(8i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(local_3);
                                    v2 = TaggedVal::from(40i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    self.func_78(v0.try_as_i32()?, v1.try_as_i32()?)?;
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                    )?);
                                    local_7 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                    )?);
                                    local_8 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(self.func_162(v0.try_as_i32()?)?);
                                    local_6 = v0.try_as_i32()?;
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    local_2 = v0.try_as_i32()?;
                                    {}
                                    break 'label_5;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 68) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(40i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(11i32);
                                v2 = TaggedVal::from(1049796i32);
                                v3 = TaggedVal::from(33i32);
                                self.func_34(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                    v3.try_as_i32()?,
                                )?;
                                'label_8: loop {
                                    v0 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_8;
                                    }
                                    v0 = TaggedVal::from(local_5);
                                    v1 = TaggedVal::from(local_2);
                                    v2 = TaggedVal::from(1i32);
                                    self.func_20(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(read_mem_i64(
                                    &self.memory,
                                    (v1.try_as_i32()? + 40) as usize,
                                )?);
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 32) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(60i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(2i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(76i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(8i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(2i64);
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 44) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(1049724i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 40) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(9i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 68) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(64i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 56) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(32i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 72) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(24i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 64) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(40i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(1049740i32);
                                self.func_76(v0.try_as_i32()?, v1.try_as_i32()?)?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            'label_9: loop {
                                'label_10: loop {
                                    'label_11: loop {
                                        v0 = TaggedVal::from(local_6);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_11;
                                        }
                                        v0 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_4 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(0i32);
                                        local_2 = v0.try_as_i32()?;
                                        'label_12: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_5 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_1 = v0.try_as_i32()?;
                                            local_2 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_12;
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_1);
                                        v1 = TaggedVal::from(-1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_1;
                                        }
                                        v0 = TaggedVal::from(local_1);
                                        v1 = TaggedVal::from(-1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_3;
                                        }
                                        v0 = TaggedVal::from(local_1);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_10;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    local_1 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(1i32);
                                    local_2 = v0.try_as_i32()?;
                                    {}
                                    break 'label_9;
                                    break;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_0;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 48) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_2);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 40) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_1);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 44) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(40i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 40) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 48) as usize,
                            )?);
                            local_5 = v1.try_as_i32()?;
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_6);
                            v2 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(self.func_167(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                            )?);

                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 48) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v0.try_as_i32()? + 44) as usize,
                            )?);
                            local_9 = v0.try_as_i64()?;
                            break;
                        }
                        v0 = TaggedVal::from(local_8);
                        v1 = TaggedVal::from(0i32);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        'label_13: loop {
                            v0 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_13;
                            }
                            v0 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(local_7);
                            v2 = TaggedVal::from(1i32);
                            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_9);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(80i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                        return Some(());
                        break;
                    }
                    self.func_69()?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(1i32);
                self.func_70(v0.try_as_i32()?, v1.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(0i32);
            v2 = TaggedVal::from(1049852i32);
            self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        self.func_70(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_80(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        match v0.try_as_i32()? {
                            0 => {
                                {}
                                break 'label_2;
                            }
                            1 => {
                                {}
                                break 'label_3;
                            }
                            2 => {
                                {}
                                break 'label_1;
                            }
                            _ => {
                                {}
                                break 'label_2;
                            }
                        }
                        break;
                    }
                    v0 = TaggedVal::from(1049996i32);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(22i32);
                    local_4 = v0.try_as_i32()?;
                    'label_4: loop {
                        'label_5: loop {
                            'label_6: loop {
                                'label_7: loop {
                                    'label_8: loop {
                                        'label_9: loop {
                                            'label_10: loop {
                                                'label_11: loop {
                                                    'label_12: loop {
                                                        'label_13: loop {
                                                            'label_14: loop {
                                                                'label_15: loop {
                                                                    'label_16: loop {
                                                                        'label_17: loop {
                                                                            'label_18: loop {
                                                                                'label_19: loop {
                                                                                    'label_20: loop {
                                                                                        'label_21: loop {
                                                                                            'label_22: loop {
                                                                                                v0 = TaggedVal::from(local_0);
                                                                                                v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 1) as usize).and_then(|x| Some(x as i32))?);
                                                                                                match v0.try_as_i32()? {
0 => {
{

}
break 'label_22;
},
1 => {
{

}
break 'label_21;
},
2 => {
{

}
break 'label_20;
},
3 => {
{

}
break 'label_19;
},
4 => {
{

}
break 'label_18;
},
5 => {
{

}
break 'label_17;
},
6 => {
{

}
break 'label_16;
},
7 => {
{

}
break 'label_15;
},
8 => {
{

}
break 'label_14;
},
9 => {
{

}
break 'label_13;
},
10 => {
{

}
break 'label_12;
},
11 => {
{

}
break 'label_11;
},
12 => {
{

}
break 'label_10;
},
13 => {
{

}
break 'label_9;
},
14 => {
{

}
break 'label_8;
},
15 => {
{

}
break 'label_7;
},
16 => {
{

}
break 'label_6;
},
17 => {
{

}
break 'label_4;
},
_ => {
{

}
break 'label_22;
},
}
                                                                                                break;
                                                                                            }
                                                                                            v0 = TaggedVal::from(1050277i32);
                                                                                            local_3 = v0.try_as_i32()?;
                                                                                            v0 = TaggedVal::from(16i32);
                                                                                            local_4 = v0.try_as_i32()?;
                                                                                            {}
                                                                                            break 'label_4;
                                                                                            break;
                                                                                        }
                                                                                        v0 = TaggedVal::from(1050260i32);
                                                                                        local_3 = v0.try_as_i32()?;
                                                                                        v0 = TaggedVal::from(17i32);
                                                                                        local_4 = v0.try_as_i32()?;
                                                                                        {}
                                                                                        break 'label_4;
                                                                                        break;
                                                                                    }
                                                                                    v0 = TaggedVal::from(1050242i32);
                                                                                    local_3 = v0
                                                                                        .try_as_i32(
                                                                                        )?;
                                                                                    v0 = TaggedVal::from(18i32);
                                                                                    local_4 = v0
                                                                                        .try_as_i32(
                                                                                        )?;
                                                                                    {}
                                                                                    break 'label_4;
                                                                                    break;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        1050226i32,
                                                                                    );
                                                                                local_3 = v0
                                                                                    .try_as_i32()?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        16i32,
                                                                                    );
                                                                                local_4 = v0
                                                                                    .try_as_i32()?;
                                                                                {}
                                                                                break 'label_4;
                                                                                break;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                1050208i32,
                                                                            );
                                                                            local_3 =
                                                                                v0.try_as_i32()?;
                                                                            v0 = TaggedVal::from(
                                                                                18i32,
                                                                            );
                                                                            local_4 =
                                                                                v0.try_as_i32()?;
                                                                            {}
                                                                            break 'label_4;
                                                                            break;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            1050195i32,
                                                                        );
                                                                        local_3 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(13i32);
                                                                        local_4 =
                                                                            v0.try_as_i32()?;
                                                                        {}
                                                                        break 'label_4;
                                                                        break;
                                                                    }
                                                                    v0 =
                                                                        TaggedVal::from(1050181i32);
                                                                    local_3 = v0.try_as_i32()?;
                                                                    {}
                                                                    break 'label_5;
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(1050160i32);
                                                                local_3 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(21i32);
                                                                local_4 = v0.try_as_i32()?;
                                                                {}
                                                                break 'label_4;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(1050149i32);
                                                            local_3 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(11i32);
                                                            local_4 = v0.try_as_i32()?;
                                                            {}
                                                            break 'label_4;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(1050128i32);
                                                        local_3 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(21i32);
                                                        local_4 = v0.try_as_i32()?;
                                                        {}
                                                        break 'label_4;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(1050107i32);
                                                    local_3 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(21i32);
                                                    local_4 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_4;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(1050084i32);
                                                local_3 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(23i32);
                                                local_4 = v0.try_as_i32()?;
                                                {}
                                                break 'label_4;
                                                break;
                                            }
                                            v0 = TaggedVal::from(1050072i32);
                                            local_3 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(12i32);
                                            local_4 = v0.try_as_i32()?;
                                            {}
                                            break 'label_4;
                                            break;
                                        }
                                        v0 = TaggedVal::from(1050063i32);
                                        local_3 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(9i32);
                                        local_4 = v0.try_as_i32()?;
                                        {}
                                        break 'label_4;
                                        break;
                                    }
                                    v0 = TaggedVal::from(1050053i32);
                                    local_3 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(10i32);
                                    local_4 = v0.try_as_i32()?;
                                    {}
                                    break 'label_4;
                                    break;
                                }
                                v0 = TaggedVal::from(1050032i32);
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(21i32);
                                local_4 = v0.try_as_i32()?;
                                {}
                                break 'label_4;
                                break;
                            }
                            v0 = TaggedVal::from(1050018i32);
                            local_3 = v0.try_as_i32()?;
                            break;
                        }
                        v0 = TaggedVal::from(14i32);
                        local_4 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(60i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_4);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 28) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(10i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(1i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 44) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(1050296i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 40) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(24i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 56) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(40i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_221(v0.try_as_i32()?, v1.try_as_i32()?)?);
                    local_0 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(4i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                local_0 = v1.try_as_i32()?;
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_0);
                self.func_90(v0.try_as_i32()?, v1.try_as_i32()?)?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(60i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(2i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(36i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(11i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(3i64);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 44) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1050316i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 40) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(12i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 28) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(24i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 56) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(4i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 32) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(8i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(40i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v0 = TaggedVal::from(self.func_221(v0.try_as_i32()?, v1.try_as_i32()?)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                )?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(1i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 4) as usize)?);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 32) as usize,
            )?);
            {
                let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_0 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_81(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_26(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_82(&mut self, arg_0: i32) -> Option<i64> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(-6756504174187499666i64);
        Some(v0.try_as_i64()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_83(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(0i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_84(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_85(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_86(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_231(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_87(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_227(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_88(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(16i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(65535i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(65535i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v1 = TaggedVal::from(-2i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            v1 = TaggedVal::from(71i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    'label_7: loop {
                                        'label_8: loop {
                                            'label_9: loop {
                                                'label_10: loop {
                                                    'label_11: loop {
                                                        'label_12: loop {
                                                            'label_13: loop {
                                                                'label_14: loop {
                                                                    v0 = TaggedVal::from(local_0);
                                                                    match v0.try_as_i32()? {
                                                                        0 => {
                                                                            {}
                                                                            break 'label_12;
                                                                        }
                                                                        1 => {
                                                                            {}
                                                                            break 'label_7;
                                                                        }
                                                                        2 => {
                                                                            {}
                                                                            break 'label_8;
                                                                        }
                                                                        3 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        4 => {
                                                                            {}
                                                                            break 'label_1;
                                                                        }
                                                                        5 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        6 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        7 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        8 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        9 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        10 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        11 => {
                                                                            {}
                                                                            break 'label_9;
                                                                        }
                                                                        12 => {
                                                                            {}
                                                                            break 'label_14;
                                                                        }
                                                                        13 => {
                                                                            {}
                                                                            break 'label_13;
                                                                        }
                                                                        14 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        15 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        16 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        17 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        18 => {
                                                                            {}
                                                                            break 'label_2;
                                                                        }
                                                                        19 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        20 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        21 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        22 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        23 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        24 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        25 => {
                                                                            {}
                                                                            break 'label_5;
                                                                        }
                                                                        26 => {
                                                                            {}
                                                                            break 'label_4;
                                                                        }
                                                                        27 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        28 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        29 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        30 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        31 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        32 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        33 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        34 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        35 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        36 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        37 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        38 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        39 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        40 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        41 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        42 => {
                                                                            {}
                                                                            break 'label_6;
                                                                        }
                                                                        43 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        44 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        45 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        46 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        47 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        48 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        49 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        50 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        51 => {
                                                                            {}
                                                                            break 'label_10;
                                                                        }
                                                                        52 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        53 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        54 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        55 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        56 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        57 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        58 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        59 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        60 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        61 => {
                                                                            {}
                                                                            break 'label_12;
                                                                        }
                                                                        62 => {
                                                                            {}
                                                                            break 'label_11;
                                                                        }
                                                                        63 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        64 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        65 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        66 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        67 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        68 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        69 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        70 => {
                                                                            {}
                                                                            break 'label_0;
                                                                        }
                                                                        71 => {
                                                                            {}
                                                                            break 'label_3;
                                                                        }
                                                                        _ => {
                                                                            {}
                                                                            break 'label_12;
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(2i32);
                                                                return Some(v0.try_as_i32()?);
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(3i32);
                                                            return Some(v0.try_as_i32()?);
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(1i32);
                                                        return Some(v0.try_as_i32()?);
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(8i32);
                                                    return Some(v0.try_as_i32()?);
                                                    break;
                                                }
                                                v0 = TaggedVal::from(5i32);
                                                return Some(v0.try_as_i32()?);
                                                break;
                                            }
                                            v0 = TaggedVal::from(4i32);
                                            return Some(v0.try_as_i32()?);
                                            break;
                                        }
                                        v0 = TaggedVal::from(7i32);
                                        return Some(v0.try_as_i32()?);
                                        break;
                                    }
                                    v0 = TaggedVal::from(6i32);
                                    return Some(v0.try_as_i32()?);
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                return Some(v0.try_as_i32()?);
                                break;
                            }
                            v0 = TaggedVal::from(15i32);
                            return Some(v0.try_as_i32()?);
                            break;
                        }
                        v0 = TaggedVal::from(11i32);
                        return Some(v0.try_as_i32()?);
                        break;
                    }
                    v0 = TaggedVal::from(13i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(9i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(10i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_89(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_5 = v1.try_as_i32()?;
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        self.func_68(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 20) as usize,
                        )?);
                        local_6 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_7 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        'label_4: loop {
                            v0 = TaggedVal::from(0i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        v1 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                            if rets.len() != 0 {
                                return None;
                            }
                        }
                        'label_5: loop {
                            v0 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_7 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_8);
                            v2 = TaggedVal::from(local_7);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 8) as usize,
                            )?);
                            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(12i32);
                        v2 = TaggedVal::from(4i32);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_3);
                    self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_1 = v1.try_as_i32()?;
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    local_5 = v1.try_as_i32()?;
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(self.func_167(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                    )?);

                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(0i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_6);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
                v2 = TaggedVal::from(32i64);
                v1 = TaggedVal::from(v1.try_as_i64()? << (v2.try_as_i64()? % 64));
                v2 = TaggedVal::from(local_7);
                v2 = TaggedVal::from((v2.try_as_i32()? as u32 as u64 as i64));
                v1 = TaggedVal::from(v1.try_as_i64()? | v2.try_as_i64()?);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i64()?,
                )?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(1i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 13) as usize,
                v1.try_as_i32()? as u8,
            )?;
            'label_6: loop {
                'label_7: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_5 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_7;
                    }
                    'label_8: loop {
                        'label_9: loop {
                            v0 = TaggedVal::from(local_5);
                            match v0.try_as_i32()? {
                                0 => {
                                    {}
                                    break 'label_8;
                                }
                                1 => {
                                    {}
                                    break 'label_9;
                                }
                                _ => {
                                    {}
                                    break 'label_8;
                                }
                            }
                            break;
                        }
                        v0 = TaggedVal::from(1049080i32);
                        v1 = TaggedVal::from(43i32);
                        v2 = TaggedVal::from(1049964i32);
                        self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
                    local_9 = v0.try_as_i64()?;
                    v0 = TaggedVal::from(0i32);
                    local_3 = v0.try_as_i32()?;
                    {}
                    break 'label_6;
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_3);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_2);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(1i32);
                v2 = TaggedVal::from(local_4);
                v3 = TaggedVal::from(8i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v3 = TaggedVal::from(1i32);
                self.func_141(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                )?;
                'label_10: loop {
                    v0 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(
                        read_mem_u16(&self.memory, (v0.try_as_i32()? + 16) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_10;
                    }
                    v0 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(
                        read_mem_u32(&self.memory, (v0.try_as_i32()? + 20) as usize)
                            .and_then(|x| Some(x as i64))?,
                    );
                    local_9 = v0.try_as_i64()?;
                    v0 = TaggedVal::from(0i32);
                    local_3 = v0.try_as_i32()?;
                    {}
                    break 'label_6;
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 18) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 30) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(30i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(self.func_140(v1.try_as_i32()?)?);
                local_3 = v1.try_as_i32()?;
                v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
                v2 = TaggedVal::from(65535i64);
                v1 = TaggedVal::from(v1.try_as_i64()? & v2.try_as_i64()?);
                v2 = TaggedVal::from(32i64);
                v1 = TaggedVal::from(v1.try_as_i64()? << (v2.try_as_i64()? % 64));
                v2 = TaggedVal::from(local_3);
                v3 = TaggedVal::from(65535i32);
                v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                local_3 = v2.try_as_i32()?;
                v3 = TaggedVal::from(8i32);
                v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
                if ValType::from(v0) != ValType::from(v1) {
                    return None;
                }
                if v2.try_as_i32()? != 0 {
                    v0 = v0;
                } else {
                    v0 = v1;
                }
                local_9 = v0.try_as_i64()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                local_3 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_9);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_3);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(0i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 13) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_90(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(1056i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(0i32);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(0i32);
        v2 = TaggedVal::from(1024i32);
        v0 =
            TaggedVal::from(self.func_168(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);

        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(1024i32);
                            v0 = TaggedVal::from(self.func_165(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                            )?);
                            v1 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            'label_5: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(8i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_4 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                local_1 = v0.try_as_i32()?;
                                'label_6: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(local_1);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_5 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_3 = v0.try_as_i32()?;
                                    local_1 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_5);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_6;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_3;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(1032i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(local_3);
                            self.func_240(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1032) as usize,
                            )?);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(1040i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_1 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1036) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            'label_7: loop {
                                'label_8: loop {
                                    v0 = TaggedVal::from(local_1);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_8;
                                    }
                                    v0 = TaggedVal::from(1i32);
                                    local_3 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(0i32);
                                    local_4 = v0.try_as_i32()?;
                                    {}
                                    break 'label_7;
                                    break;
                                }
                                v0 = TaggedVal::from(local_1);
                                local_4 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_0;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1040) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_3);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1032) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1036) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(1032i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1032) as usize,
                            )?);
                            v1 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1040) as usize,
                            )?);
                            local_3 = v1.try_as_i32()?;
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(self.func_167(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                            )?);

                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 1032) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(1056i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                            return Some(());
                            break;
                        }
                        v0 = TaggedVal::from(1052276i32);
                        v1 = TaggedVal::from(18i32);
                        v2 = TaggedVal::from(1052320i32);
                        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(0i32);
                    v2 = TaggedVal::from(1049852i32);
                    self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(read_mem_i64(
                    &self.memory,
                    (v1.try_as_i32()? + 1036) as usize,
                )?);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1048) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(1049172i32);
                v1 = TaggedVal::from(43i32);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(1048i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v3 = TaggedVal::from(1049216i32);
                v4 = TaggedVal::from(1052336i32);
                self.func_198(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                )?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            self.func_69()?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        self.func_70(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_91(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(local_3);
        v4 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(read_mem_i32(&self.memory, (v4.try_as_i32()? + 4) as usize)?);
        v4 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v4.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v4.try_as_i32()? as usize, &[v0, v1, v2, v3])?;
            if rets.len() != 0 {
                return None;
            }
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_92(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(local_3);
        v4 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(read_mem_i32(&self.memory, (v4.try_as_i32()? + 4) as usize)?);
        v4 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v4.try_as_i32()? + 16) as usize,
        )?);
        {
            let rets = self.indirect_call(v4.try_as_i32()? as usize, &[v0, v1, v2, v3])?;
            if rets.len() != 0 {
                return None;
            }
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_93(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        v1 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v1.try_as_i32()? + 20) as usize,
        )?);
        {
            let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_94(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 4) as usize)?);
        v2 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v2.try_as_i32()? + 24) as usize,
        )?);
        {
            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
            if rets.len() != 0 {
                return None;
            }
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_95(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(local_3);
        v4 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(read_mem_i32(&self.memory, (v4.try_as_i32()? + 4) as usize)?);
        v4 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v4.try_as_i32()? + 28) as usize,
        )?);
        {
            let rets = self.indirect_call(v4.try_as_i32()? as usize, &[v0, v1, v2, v3])?;
            if rets.len() != 0 {
                return None;
            }
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_96(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_4);
        v2 = TaggedVal::from(local_3);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v3 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 36) as usize,
        )?);
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 0 {
                return None;
            }
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_97(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(1i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        v2 = TaggedVal::from(local_4);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v3 = TaggedVal::from(1i32);
        self.func_141(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v0.try_as_i32()? + 16) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 18) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 30) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(30i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(self.func_140(v1.try_as_i32()?)?);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
                v2 = TaggedVal::from(65535i64);
                v1 = TaggedVal::from(v1.try_as_i64()? & v2.try_as_i64()?);
                v2 = TaggedVal::from(32i64);
                v1 = TaggedVal::from(v1.try_as_i64()? << (v2.try_as_i64()? % 64));
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i64()?,
                )?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 20) as usize,
            )?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            local_2 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_98(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 1058361) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(1i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058361) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058280) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            'label_5: loop {
                                v0 = TaggedVal::from(local_2);
                                match v0.try_as_i32()? {
                                    0 => {
                                        {}
                                        break 'label_5;
                                    }
                                    1 => {
                                        {}
                                        break 'label_3;
                                    }
                                    _ => {
                                        {}
                                        break 'label_5;
                                    }
                                }
                                break;
                            }
                            v0 = TaggedVal::from(12i32);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(4i64);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(local_2);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058280) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        'label_6: loop {
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(4i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            {}
                            break 'label_0;
                            break;
                        }
                        'label_7: loop {
                            'label_8: loop {
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_4 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_4);
                                v2 = TaggedVal::from(local_5);
                                v3 = TaggedVal::from(local_4);
                                v2 = TaggedVal::from(
                                    ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                                );
                                if ValType::from(v0) != ValType::from(v1) {
                                    return None;
                                }
                                if v2.try_as_i32()? != 0 {
                                    v0 = v0;
                                } else {
                                    v0 = v1;
                                }
                                local_4 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(4i32);
                                v2 = TaggedVal::from(local_4);
                                v3 = TaggedVal::from(4i32);
                                v2 = TaggedVal::from(
                                    ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                                );
                                if ValType::from(v0) != ValType::from(v1) {
                                    return None;
                                }
                                if v2.try_as_i32()? != 0 {
                                    v0 = v0;
                                } else {
                                    v0 = v1;
                                }
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(536870911i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                local_7 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_6);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                'label_9: loop {
                                    'label_10: loop {
                                        'label_11: loop {
                                            v0 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            v1 = TaggedVal::from(0i32);
                                            v2 = TaggedVal::from(local_3);
                                            if ValType::from(v0) != ValType::from(v1) {
                                                return None;
                                            }
                                            if v2.try_as_i32()? != 0 {
                                                v0 = v0;
                                            } else {
                                                v0 = v1;
                                            }
                                            local_4 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_11;
                                            }
                                            v0 = TaggedVal::from(local_3);
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_10;
                                            }
                                            'label_12: loop {
                                                v0 = TaggedVal::from(local_6);
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_12;
                                                }
                                                'label_13: loop {
                                                    v0 = TaggedVal::from(local_5);
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_13;
                                                    }
                                                    v0 = TaggedVal::from(4i32);
                                                    local_4 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_9;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_5);
                                                v1 = TaggedVal::from(4i32);
                                                v0 =
                                                    TaggedVal::from(self.func_19(
                                                        v0.try_as_i32()?,
                                                        v1.try_as_i32()?,
                                                    )?);
                                                local_4 = v0.try_as_i32()?;
                                                {}
                                                break 'label_10;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(local_6);
                                            v2 = TaggedVal::from(4i32);
                                            v3 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(self.func_21(
                                                v0.try_as_i32()?,
                                                v1.try_as_i32()?,
                                                v2.try_as_i32()?,
                                                v3.try_as_i32()?,
                                            )?);
                                            local_4 = v0.try_as_i32()?;
                                            {}
                                            break 'label_10;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_7);
                                        v1 = TaggedVal::from(local_6);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                        );
                                        v1 = TaggedVal::from(2i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                        );
                                        local_4 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_5);
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_10;
                                        }
                                        v0 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(
                                            self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                        );
                                        local_4 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_7;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                    )?);
                                    local_3 = v0.try_as_i32()?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_4);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(4i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(local_5);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(
                                    (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_0;
                                break;
                            }
                            self.func_175()?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(4i32);
                        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(0i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058361) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                        if rets.len() != 0 {
                            return None;
                        }
                    }
                    'label_14: loop {
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_14;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 8) as usize,
                        )?);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(1052192i32);
                v1 = TaggedVal::from(32i32);
                v2 = TaggedVal::from(1052260i32);
                self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(12i32);
            v1 = TaggedVal::from(4i32);
            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(3i32);
        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
        v2 = TaggedVal::from(1i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        v1 = TaggedVal::from(0i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 1058361) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(1i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_99(&mut self) -> Option<i32> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_0 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(
                                            &self.memory,
                                            (v0.try_as_i32()? + 1058276) as usize,
                                        )
                                        .and_then(|x| Some(x as i32))?,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(1i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058276) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    'label_7: loop {
                                        'label_8: loop {
                                            v0 = TaggedVal::from(0i32);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1058272) as usize,
                                            )?);
                                            local_1 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    > (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_8;
                                            }
                                            'label_9: loop {
                                                'label_10: loop {
                                                    v0 = TaggedVal::from(local_1);
                                                    match v0.try_as_i32()? {
                                                        0 => {
                                                            {}
                                                            break 'label_9;
                                                        }
                                                        1 => {
                                                            {}
                                                            break 'label_10;
                                                        }
                                                        _ => {
                                                            {}
                                                            break 'label_9;
                                                        }
                                                    }
                                                    break;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(0i32);
                                                write_mem_u8(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 1058276) as usize,
                                                    v1.try_as_i32()? as u8,
                                                )?;
                                                {}
                                                break 'label_0;
                                                break;
                                            }
                                            v0 = TaggedVal::from(4i32);
                                            v1 = TaggedVal::from(4i32);
                                            v0 = TaggedVal::from(
                                                self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                            );
                                            local_1 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_5;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(1058272i32);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(1051388i32);
                                            v0 = TaggedVal::from(
                                                self.func_98(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                            );
                                            local_2 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(1024i32);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                            );
                                            local_3 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_4;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(10i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_4 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_0);
                                            v2 = TaggedVal::from(13i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(2i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            write_mem_u8(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()? as u8,
                                            )?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(
                                                read_mem_u16(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 13) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            write_mem_u16(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 10) as usize,
                                                v1.try_as_i32()? as u16,
                                            )?;
                                            v0 = TaggedVal::from(32i32);
                                            v1 = TaggedVal::from(4i32);
                                            v0 = TaggedVal::from(
                                                self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                            );
                                            local_1 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_3;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(0i32);
                                            write_mem_u8(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 28) as usize,
                                                v1.try_as_i32()? as u8,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(0i32);
                                            write_mem_u16(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 24) as usize,
                                                v1.try_as_i32()? as u16,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(1024i64);
                                            write_mem_i64(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 16) as usize,
                                                v1.try_as_i64()?,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_3);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 12) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(0i32);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(4294967297i64);
                                            write_mem_i64(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i64()?,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(
                                                read_mem_u16(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 10) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            write_mem_u16(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 29) as usize,
                                                v1.try_as_i32()? as u16,
                                            )?;
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(31i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            write_mem_u8(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()? as u8,
                                            )?;
                                            v0 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_7;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 0) as usize,
                                            )?);
                                            local_2 = v1.try_as_i32()?;
                                            v2 = TaggedVal::from(1i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(-1i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_2;
                                            }
                                            v0 = TaggedVal::from(4i32);
                                            v1 = TaggedVal::from(4i32);
                                            v0 = TaggedVal::from(
                                                self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                            );
                                            local_2 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_1;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            v1 = TaggedVal::from(local_2);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 1058272) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(local_1);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            {}
                                            break 'label_7;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_1);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_1 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(local_1);
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_2 = v1.try_as_i32()?;
                                        v2 = TaggedVal::from(1i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(-1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_2;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058276) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    v0 = TaggedVal::from(local_1);
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_0;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(16i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                                    v0 = TaggedVal::from(local_1);
                                    return Some(v0.try_as_i32()?);
                                    break;
                                }
                                v0 = TaggedVal::from(1052192i32);
                                v1 = TaggedVal::from(32i32);
                                v2 = TaggedVal::from(1052260i32);
                                self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            v0 = TaggedVal::from(4i32);
                            v1 = TaggedVal::from(4i32);
                            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(1024i32);
                        v1 = TaggedVal::from(1i32);
                        self.func_70(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(32i32);
                    v1 = TaggedVal::from(4i32);
                    self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(4i32);
            v1 = TaggedVal::from(4i32);
            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(1050390i32);
        v1 = TaggedVal::from(36i32);
        v2 = TaggedVal::from(1050428i32);
        self.func_196(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_100(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i64 = 0i64;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(-1i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_5 = v0.try_as_i32()?;
                            'label_5: loop {
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(20i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(16i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(local_5);
                                self.func_68(v0.try_as_i32()?, v1.try_as_i32()?)?;
                                'label_6: loop {
                                    'label_7: loop {
                                        'label_8: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 16) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_8;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(16i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_7;
                                            }
                                            v0 = TaggedVal::from(1049080i32);
                                            v1 = TaggedVal::from(43i32);
                                            v2 = TaggedVal::from(1049964i32);
                                            self.func_181(
                                                v0.try_as_i32()?,
                                                v1.try_as_i32()?,
                                                v2.try_as_i32()?,
                                            )?;
                                            unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(read_mem_i64(
                                            &self.memory,
                                            (v0.try_as_i32()? + 16) as usize,
                                        )?);
                                        local_6 = v0.try_as_i64()?;
                                        v1 = TaggedVal::from(255i64);
                                        v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
                                        v1 = TaggedVal::from(3i64);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i64()? != v1.try_as_i64()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_6;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 20) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    {}
                                    break 'label_5;
                                    break;
                                }
                                v0 = TaggedVal::from(local_6);
                                v0 = TaggedVal::from(v0.try_as_i64()? as i32);
                                local_7 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(255i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_3;
                                }
                                'label_9: loop {
                                    v0 = TaggedVal::from(0i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_9;
                                    }
                                    v0 = TaggedVal::from(local_7);
                                    v1 = TaggedVal::from(3i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    v1 = TaggedVal::from(2i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_5;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(32i64);
                                v0 = TaggedVal::from(
                                    (v0.try_as_i64()? as u64) >> (v1.try_as_i64()? % 64),
                                );
                                v0 = TaggedVal::from(v0.try_as_i64()? as i32);
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 4) as usize,
                                )?);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                {
                                    let rets =
                                        self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                    if rets.len() != 0 {
                                        return None;
                                    }
                                }
                                'label_10: loop {
                                    v0 = TaggedVal::from(local_7);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                    )?);
                                    local_8 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                    )?);
                                    local_9 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_10;
                                    }
                                    v0 = TaggedVal::from(local_7);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_9);
                                    v2 = TaggedVal::from(local_8);
                                    v2 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v2.try_as_i32()? + 8) as usize,
                                    )?);
                                    self.func_20(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(12i32);
                                v2 = TaggedVal::from(4i32);
                                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(10i32);
                            v2 = TaggedVal::from(local_2);
                            v3 = TaggedVal::from(local_3);
                            self.func_233(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                                v3.try_as_i32()?,
                            )?;
                            'label_11: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                )?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_11;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_5);
                                v2 = TaggedVal::from(local_2);
                                v3 = TaggedVal::from(local_3);
                                self.func_89(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                    v3.try_as_i32()?,
                                )?;
                                {}
                                break 'label_0;
                                break;
                            }
                            'label_12: loop {
                                'label_13: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                    )?);
                                    local_8 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(-1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_13;
                                    }
                                    v0 = TaggedVal::from(local_8);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_7 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_8);
                                    v1 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_12;
                                    }
                                    v0 = TaggedVal::from(local_7);
                                    v1 = TaggedVal::from(local_3);
                                    v2 = TaggedVal::from(1049980i32);
                                    self.func_182(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                    break;
                                }
                                v0 = TaggedVal::from(1049980i32);
                                self.func_234(v0.try_as_i32()?)?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(local_2);
                            v3 = TaggedVal::from(local_7);
                            self.func_89(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                                v3.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(24i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 20) as usize,
                            )?);
                            local_8 = v0.try_as_i32()?;
                            'label_14: loop {
                                'label_15: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 16) as usize,
                                    )?);
                                    local_10 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_15;
                                    }
                                    v0 = TaggedVal::from(local_10);
                                    match v0.try_as_i32()? {
                                        0 => {
                                            {}
                                            break 'label_14;
                                        }
                                        1 => {
                                            {}
                                            break 'label_2;
                                        }
                                        _ => {
                                            {}
                                            break 'label_14;
                                        }
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_8);
                                v1 = TaggedVal::from(255i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_14;
                                }
                                v0 = TaggedVal::from(local_9);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_9);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 4) as usize,
                                )?);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                {
                                    let rets =
                                        self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                    if rets.len() != 0 {
                                        return None;
                                    }
                                }
                                'label_16: loop {
                                    v0 = TaggedVal::from(local_9);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                    )?);
                                    local_10 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                    )?);
                                    local_11 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_16;
                                    }
                                    v0 = TaggedVal::from(local_9);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_11);
                                    v2 = TaggedVal::from(local_10);
                                    v2 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v2.try_as_i32()? + 8) as usize,
                                    )?);
                                    self.func_20(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_9);
                                v1 = TaggedVal::from(12i32);
                                v2 = TaggedVal::from(4i32);
                                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(1i32);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 20) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            self.func_68(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            'label_17: loop {
                                'label_18: loop {
                                    'label_19: loop {
                                        'label_20: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 16) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_20;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(16i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_19;
                                            }
                                            v0 = TaggedVal::from(1049080i32);
                                            v1 = TaggedVal::from(43i32);
                                            v2 = TaggedVal::from(1049964i32);
                                            self.func_181(
                                                v0.try_as_i32()?,
                                                v1.try_as_i32()?,
                                                v2.try_as_i32()?,
                                            )?;
                                            unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 16) as usize,
                                            )
                                            .and_then(|x| Some(x as i64))?,
                                        );
                                        v1 = TaggedVal::from(3i64);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i64()? != v1.try_as_i64()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_18;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 20) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    v0 = TaggedVal::from(local_8);
                                    v1 = TaggedVal::from(local_7);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_17;
                                    }
                                    {}
                                    break 'label_1;
                                    break;
                                }
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 20) as usize,
                                )?);
                                local_9 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_8);
                                v1 = TaggedVal::from(local_7);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                v1 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 16) as usize,
                                )?);
                                local_11 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(255i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from((v1.try_as_i32()? != v2.try_as_i32()?) as i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                local_10 = v0.try_as_i32()?;
                                'label_21: loop {
                                    'label_22: loop {
                                        v0 = TaggedVal::from(0i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_22;
                                        }
                                        v0 = TaggedVal::from(local_11);
                                        v1 = TaggedVal::from(3i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        v1 = TaggedVal::from(2i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_21;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_9);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_9);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 4) as usize,
                                    )?);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 0) as usize,
                                    )?);
                                    {
                                        let rets =
                                            self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                        if rets.len() != 0 {
                                            return None;
                                        }
                                    }
                                    'label_23: loop {
                                        v0 = TaggedVal::from(local_9);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                        )?);
                                        local_11 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                        )?);
                                        local_12 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_23;
                                        }
                                        v0 = TaggedVal::from(local_9);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        v1 = TaggedVal::from(local_12);
                                        v2 = TaggedVal::from(local_11);
                                        v2 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v2.try_as_i32()? + 8) as usize,
                                        )?);
                                        self.func_20(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                        )?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_9);
                                    v1 = TaggedVal::from(12i32);
                                    v2 = TaggedVal::from(4i32);
                                    self.func_20(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_10);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_1;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(local_2);
                            v3 = TaggedVal::from(local_7);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            v3 = TaggedVal::from(local_3);
                            v4 = TaggedVal::from(local_7);
                            v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_sub(v4.try_as_i32()?));
                            self.func_89(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                                v3.try_as_i32()?,
                            )?;
                            'label_24: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 16) as usize,
                                )?);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_24;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(0i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 20) as usize,
                                )?);
                                v2 = TaggedVal::from(local_8);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_0;
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_8);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 20) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_0;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(24i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 4) as usize,
                            )?);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            {
                                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            'label_25: loop {
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_25;
                                }
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v2.try_as_i32()? + 8) as usize,
                                )?);
                                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(12i32);
                            v2 = TaggedVal::from(4i32);
                            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            {}
                            break 'label_0;
                            break;
                        }
                        v0 = TaggedVal::from(1048812i32);
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(local_4);
                        v3 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                        v3 = TaggedVal::from(1049140i32);
                        v4 = TaggedVal::from(1048896i32);
                        self.func_198(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                            v4.try_as_i32()?,
                        )?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(1i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_6);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i64()?,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_9);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
                v2 = TaggedVal::from(32i64);
                v1 = TaggedVal::from(v1.try_as_i64()? << (v2.try_as_i64()? % 64));
                v2 = TaggedVal::from(local_8);
                v2 = TaggedVal::from((v2.try_as_i32()? as u32 as u64 as i64));
                v1 = TaggedVal::from(v1.try_as_i64()? | v2.try_as_i64()?);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i64()?,
                )?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_8);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(1i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_101(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(3i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i64()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1050560i32);
                    v2 = TaggedVal::from(local_3);
                    v3 = TaggedVal::from(24i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_188(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                    )?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(24i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(1050584i32);
                        v3 = TaggedVal::from(15i32);
                        self.func_34(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 24) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        {}
                        break 'label_1;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(read_mem_i64(
                        &self.memory,
                        (v1.try_as_i32()? + 12) as usize,
                    )?);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i64()?,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(3i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                break;
            }
            'label_4: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_5: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_5;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_102(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(2i32);
        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_6 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                'label_6: loop {
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_6);
                                        match v0.try_as_i32()? {
                                            0 => {
                                                {}
                                                break 'label_6;
                                            }
                                            1 => {
                                                {}
                                                break 'label_7;
                                            }
                                            2 => {
                                                {}
                                                break 'label_5;
                                            }
                                            3 => {
                                                {}
                                                break 'label_1;
                                            }
                                            _ => {
                                                {}
                                                break 'label_6;
                                            }
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(1050856i32);
                                    v1 = TaggedVal::from(42i32);
                                    v2 = TaggedVal::from(1050900i32);
                                    self.func_45(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                    break;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                local_6 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(2i32);
                                v3 = TaggedVal::from(local_6);
                                if ValType::from(v1) != ValType::from(v2) {
                                    return None;
                                }
                                if v3.try_as_i32()? != 0 {
                                    v1 = v1;
                                } else {
                                    v1 = v2;
                                }
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_6);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_4;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_1 = v0.try_as_i32()?;
                                {}
                                break 'label_2;
                                break;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_0;
                            }
                            'label_8: loop {
                                'label_9: loop {
                                    'label_10: loop {
                                        v0 = TaggedVal::from(local_6);
                                        local_1 = v0.try_as_i32()?;
                                        'label_11: loop {
                                            v0 = TaggedVal::from(0i32);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1058340) as usize,
                                            )?);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_11;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            v1 = TaggedVal::from(1i64);
                                            write_mem_i64(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 1058340) as usize,
                                                v1.try_as_i64()?,
                                            )?;
                                            v0 = TaggedVal::from(0i32);
                                            v1 = TaggedVal::from(0i32);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 1058348) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(1058344i32);
                                        v0 = TaggedVal::from(self.func_72(v0.try_as_i32()?)?);
                                        local_7 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(local_5);
                                        v2 = TaggedVal::from(local_0);
                                        v2 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v2.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_6 = v2.try_as_i32()?;
                                        v3 = TaggedVal::from(local_6);
                                        v4 = TaggedVal::from(local_1);
                                        v3 = TaggedVal::from(
                                            (v3.try_as_i32()? == v4.try_as_i32()?) as i32,
                                        );
                                        if ValType::from(v1) != ValType::from(v2) {
                                            return None;
                                        }
                                        if v3.try_as_i32()? != 0 {
                                            v1 = v1;
                                        } else {
                                            v1 = v2;
                                        }
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(0i32);
                                        write_mem_u8(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                            v1.try_as_i32()? as u8,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_7);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_1);
                                        v2 = TaggedVal::from(-4i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        'label_12: loop {
                                            'label_13: loop {
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_1);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_13;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                v0 = TaggedVal::from(
                                                    read_mem_u8(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 8) as usize,
                                                    )
                                                    .and_then(|x| Some(x as i32))?,
                                                );
                                                v0 =
                                                    TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_12;
                                                }
                                                {}
                                                break 'label_9;
                                                break;
                                            }
                                            'label_14: loop {
                                                v0 = TaggedVal::from(local_4);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )?);
                                                local_1 = v0.try_as_i32()?;
                                                v0 =
                                                    TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_14;
                                                }
                                                v0 = TaggedVal::from(local_1);
                                                v1 = TaggedVal::from(local_1);
                                                v1 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 0) as usize,
                                                )?);
                                                local_7 = v1.try_as_i32()?;
                                                v2 = TaggedVal::from(-1i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                                );
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_7);
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_14;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                self.func_67(v0.try_as_i32()?)?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_10;
                                            }
                                            {}
                                            break 'label_8;
                                            break;
                                        }
                                        break;
                                    }
                                    'label_15: loop {
                                        self.func_73()?;
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            continue 'label_15;
                                        }
                                        break;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_1 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                local_6 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(-1i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_4);
                                self.func_67(v0.try_as_i32()?)?;
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_6 = v0.try_as_i32()?;
                                {}
                                continue 'label_4;
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_6 = v0.try_as_i32()?;
                            {}
                            continue 'label_4;
                            break;
                        }
                        break;
                    }
                    'label_16: loop {
                        'label_17: loop {
                            v0 = TaggedVal::from(local_6);
                            local_1 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_17;
                            }
                            'label_18: loop {
                                v0 = TaggedVal::from(local_1);
                                match v0.try_as_i32()? {
                                    0 => {
                                        {}
                                        break 'label_18;
                                    }
                                    1 => {
                                        {}
                                        break 'label_18;
                                    }
                                    2 => {
                                        {}
                                        break 'label_17;
                                    }
                                    3 => {
                                        {}
                                        break 'label_1;
                                    }
                                    _ => {
                                        {}
                                        break 'label_18;
                                    }
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(2i32);
                            v2 = TaggedVal::from(local_0);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 0) as usize,
                            )?);
                            local_6 = v2.try_as_i32()?;
                            v3 = TaggedVal::from(local_6);
                            v4 = TaggedVal::from(local_1);
                            v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                            local_7 = v3.try_as_i32()?;
                            if ValType::from(v1) != ValType::from(v2) {
                                return None;
                            }
                            if v3.try_as_i32()? != 0 {
                                v1 = v1;
                            } else {
                                v1 = v2;
                            }
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_16;
                            }
                            {}
                            break 'label_2;
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(2i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        'label_19: loop {
                            'label_20: loop {
                                v0 = TaggedVal::from(local_1);
                                local_6 = v0.try_as_i32()?;
                                'label_21: loop {
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058340) as usize,
                                    )?);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_21;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(1i64);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058340) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058348) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(1058344i32);
                                v0 = TaggedVal::from(self.func_72(v0.try_as_i32()?)?);
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_5);
                                v2 = TaggedVal::from(local_0);
                                v2 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v2.try_as_i32()? + 0) as usize,
                                )?);
                                local_1 = v2.try_as_i32()?;
                                v3 = TaggedVal::from(local_1);
                                v4 = TaggedVal::from(local_6);
                                v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                                local_8 = v3.try_as_i32()?;
                                if ValType::from(v1) != ValType::from(v2) {
                                    return None;
                                }
                                if v3.try_as_i32()? != 0 {
                                    v1 = v1;
                                } else {
                                    v1 = v2;
                                }
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(0i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_7);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_6);
                                v2 = TaggedVal::from(-4i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                'label_22: loop {
                                    v0 = TaggedVal::from(local_8);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_22;
                                    }
                                    'label_23: loop {
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_6 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_23;
                                        }
                                        v0 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_7 = v1.try_as_i32()?;
                                        v2 = TaggedVal::from(-1i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_7);
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_23;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        self.func_67(v0.try_as_i32()?)?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(3i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    v1 = TaggedVal::from(2i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_20;
                                    }
                                    {}
                                    break 'label_19;
                                    break;
                                }
                                break;
                            }
                            'label_24: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_24;
                                }
                                'label_25: loop {
                                    self.func_73()?;
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_25;
                                    }
                                    break;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_6 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(-1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            v0 = TaggedVal::from(local_4);
                            self.func_67(v0.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_6 = v0.try_as_i32()?;
                        {}
                        continue 'label_16;
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from((v1.try_as_i32()? == v2.try_as_i32()?) as i32);
                v2 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(3i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                self.func_115(v0.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            return Some(());
            break;
        }
        v0 = TaggedVal::from(1050780i32);
        v1 = TaggedVal::from(57i32);
        v2 = TaggedVal::from(1050840i32);
        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_103(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(0i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058324) as usize,
                    )?);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(1i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058324) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(0i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058332) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 1058328) as usize,
                )?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 1058332) as usize,
                )?);
                local_4 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058332) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058336) as usize,
            )?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(local_2);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058336) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058328) as usize,
                v1.try_as_i32()?,
            )?;
            'label_3: loop {
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 24) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_4: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_5: loop {
                    v0 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_5;
                    }
                    v0 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_6);
                    v2 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            return Some(());
            break;
        }
        v0 = TaggedVal::from(1048812i32);
        v1 = TaggedVal::from(16i32);
        v2 = TaggedVal::from(local_3);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v3 = TaggedVal::from(1049140i32);
        v4 = TaggedVal::from(1048896i32);
        self.func_198(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_104(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i64 = 0i64;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(96i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(6i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1050500i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058308) as usize,
                                    )?);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(1i64);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058308) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058316) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    {}
                                    break 'label_5;
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058312) as usize,
                                )?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_2;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058312) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058316) as usize,
                                )?);
                                local_0 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058316) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_0);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(self.func_99()?);
                            local_0 = v1.try_as_i32()?;
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 48) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(72i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(16i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(72i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 8) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 72) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(64i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(48i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(local_1);
                            v3 = TaggedVal::from(72i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            self.func_101(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_2 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(-1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            'label_7: loop {
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_7;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(48i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                self.func_44(v0.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v0.try_as_i32()? + 64) as usize,
                            )?);
                            local_3 = v0.try_as_i64()?;
                            {}
                            break 'label_3;
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058320) as usize,
                        )?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(72i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(72i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 8) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 72) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(48i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(local_1);
                        v3 = TaggedVal::from(72i32);
                        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                        v3 = TaggedVal::from(local_2);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 36) as usize,
                        )?);
                        {
                            let rets =
                                self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                            if rets.len() != 0 {
                                return None;
                            }
                        }
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058312) as usize,
                        )?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(-1i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058312) as usize,
                            v1.try_as_i32()?,
                        )?;
                        'label_8: loop {
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058316) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_8;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058320) as usize,
                            )?);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            {
                                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058320) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_8;
                            }
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058316) as usize,
                            )?);
                            v1 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 8) as usize,
                            )?);
                            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058320) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058316) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058312) as usize,
                        )?);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058312) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 48) as usize,
                        )?);
                        local_3 = v1.try_as_i64()?;
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 64) as usize,
                            v1.try_as_i64()?,
                        )?;
                        break;
                    }
                    'label_9: loop {
                        'label_10: loop {
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(v0.try_as_i64()? as i32);
                            local_0 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_10;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(self.func_99()?);
                            local_0 = v1.try_as_i32()?;
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 48) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(72i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(16i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(72i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 8) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 72) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(40i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(48i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(local_1);
                            v3 = TaggedVal::from(72i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            self.func_101(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_2 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(-1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            'label_11: loop {
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_11;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(48i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                self.func_44(v0.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 40) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            local_2 = v0.try_as_i32()?;
                            local_0 = v0.try_as_i32()?;
                            {}
                            break 'label_9;
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_3);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 40) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(v0.try_as_i64()? as i32);
                        local_2 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(255i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    'label_12: loop {
                        'label_13: loop {
                            v0 = TaggedVal::from(0i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_13;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_12;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 44) as usize,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        v1 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                            if rets.len() != 0 {
                                return None;
                            }
                        }
                        'label_14: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_14;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 8) as usize,
                            )?);
                            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(12i32);
                        v2 = TaggedVal::from(4i32);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(96i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                    return Some(());
                    break;
                }
                v0 = TaggedVal::from(1048812i32);
                v1 = TaggedVal::from(16i32);
                v2 = TaggedVal::from(local_1);
                v3 = TaggedVal::from(72i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v3 = TaggedVal::from(1049140i32);
                v4 = TaggedVal::from(1048896i32);
                self.func_198(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                )?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1048812i32);
            v1 = TaggedVal::from(16i32);
            v2 = TaggedVal::from(local_1);
            v3 = TaggedVal::from(72i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(1049140i32);
            v4 = TaggedVal::from(1048896i32);
            self.func_198(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
                v3.try_as_i32()?,
                v4.try_as_i32()?,
            )?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(
            &self.memory,
            (v1.try_as_i32()? + 40) as usize,
        )?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 64) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(92i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(60i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 76) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1050468i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 72) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(10i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 52) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(48i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 88) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(64i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 56) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(32i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 48) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(72i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1050484i32);
        self.func_76(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_105(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(3i32);
        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(-8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(1049036i32);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    local_6 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(-8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_6);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_1;
                }
                break;
            }
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(local_6);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(1i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        v2 = TaggedVal::from(local_4);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v3 = TaggedVal::from(1i32);
        self.func_141(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        'label_3: loop {
            'label_4: loop {
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v0.try_as_i32()? + 16) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 18) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 30) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(30i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(self.func_140(v1.try_as_i32()?)?);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
                v2 = TaggedVal::from(65535i64);
                v1 = TaggedVal::from(v1.try_as_i64()? & v2.try_as_i64()?);
                v2 = TaggedVal::from(32i64);
                v1 = TaggedVal::from(v1.try_as_i64()? << (v2.try_as_i64()? % 64));
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i64()?,
                )?;
                {}
                break 'label_3;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 20) as usize,
            )?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            local_2 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_106(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(0i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_107(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        'label_4: loop {
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v2 = TaggedVal::from(local_2);
                            v3 = TaggedVal::from(local_3);
                            v4 = TaggedVal::from(local_1);
                            v4 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v4.try_as_i32()? + 4) as usize,
                            )?);
                            v4 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v4.try_as_i32()? + 16) as usize,
                            )?);
                            {
                                let rets = self
                                    .indirect_call(v4.try_as_i32()? as usize, &[v0, v1, v2, v3])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            'label_5: loop {
                                'label_6: loop {
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                        )?);
                                        local_5 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_7;
                                        }
                                        'label_8: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 12) as usize,
                                            )?);
                                            local_6 = v0.try_as_i32()?;
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_8;
                                            }
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(24i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(14i32);
                                            v2 = TaggedVal::from(1050340i32);
                                            v3 = TaggedVal::from(28i32);
                                            self.func_34(
                                                v0.try_as_i32()?,
                                                v1.try_as_i32()?,
                                                v2.try_as_i32()?,
                                                v3.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(read_mem_i64(
                                                &self.memory,
                                                (v1.try_as_i32()? + 24) as usize,
                                            )?);
                                            write_mem_i64(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i64()?,
                                            )?;
                                            {}
                                            break 'label_0;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(4i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_7 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(3i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                        );
                                        v1 = TaggedVal::from(-8i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(3i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                                        );
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_8 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(0i32);
                                        local_9 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(0i32);
                                        local_10 = v0.try_as_i32()?;
                                        'label_9: loop {
                                            v0 = TaggedVal::from(local_7);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            v1 = TaggedVal::from(local_10);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_11 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_6);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    > (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_6;
                                            }
                                            v0 = TaggedVal::from(local_7);
                                            v1 = TaggedVal::from(8i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_7 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_11);
                                            local_10 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_8);
                                            v1 = TaggedVal::from(local_9);
                                            v2 = TaggedVal::from(1i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            local_9 = v1.try_as_i32()?;
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_9;
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_11);
                                        local_10 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_8);
                                        local_9 = v0.try_as_i32()?;
                                        {}
                                        break 'label_6;
                                        break;
                                    }
                                    'label_10: loop {
                                        'label_11: loop {
                                            'label_12: loop {
                                                'label_13: loop {
                                                    v0 = TaggedVal::from(local_4);
                                                    v0 = TaggedVal::from(
                                                        read_mem_u8(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 12) as usize,
                                                        )
                                                        .and_then(|x| Some(x as i32))?,
                                                    );
                                                    local_6 = v0.try_as_i32()?;
                                                    match v0.try_as_i32()? {
                                                        0 => {
                                                            {}
                                                            break 'label_12;
                                                        }
                                                        1 => {
                                                            {}
                                                            break 'label_13;
                                                        }
                                                        2 => {
                                                            {}
                                                            break 'label_11;
                                                        }
                                                        _ => {
                                                            {}
                                                            break 'label_12;
                                                        }
                                                    }
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                v0 = TaggedVal::from(
                                                    read_mem_u8(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 13) as usize,
                                                    )
                                                    .and_then(|x| Some(x as i32))?,
                                                );
                                                local_7 = v0.try_as_i32()?;
                                                {}
                                                break 'label_10;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 16) as usize,
                                            )?);
                                            v0 = TaggedVal::from(self.func_88(v0.try_as_i32()?)?);
                                            v1 = TaggedVal::from(255i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            local_7 = v0.try_as_i32()?;
                                            {}
                                            break 'label_10;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 16) as usize,
                                        )?);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        local_7 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(1i32);
                                    local_5 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_7);
                                    v1 = TaggedVal::from(255i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    v1 = TaggedVal::from(15i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_5;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(read_mem_i64(
                                        &self.memory,
                                        (v1.try_as_i32()? + 12) as usize,
                                    )?);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    {}
                                    break 'label_0;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_9);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_2;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_9);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_9);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_9 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_6);
                                v2 = TaggedVal::from(local_10);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                );
                                local_7 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_1;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(4i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(local_9);
                                v2 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                v2 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                local_6 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                break;
                            }
                            'label_14: loop {
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_14;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(255i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_14;
                                }
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 16) as usize,
                                )?);
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 4) as usize,
                                )?);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                {
                                    let rets =
                                        self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                                    if rets.len() != 0 {
                                        return None;
                                    }
                                }
                                'label_15: loop {
                                    v0 = TaggedVal::from(local_7);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                    )?);
                                    local_9 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                    )?);
                                    local_10 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_15;
                                    }
                                    v0 = TaggedVal::from(local_7);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_10);
                                    v2 = TaggedVal::from(local_9);
                                    v2 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v2.try_as_i32()? + 8) as usize,
                                    )?);
                                    self.func_20(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(12i32);
                                v2 = TaggedVal::from(4i32);
                                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_4;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(3i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_9);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(1050528i32);
                self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1052116i32);
            v1 = TaggedVal::from(35i32);
            v2 = TaggedVal::from(1052176i32);
            self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_108(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(-8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_2);
                    local_7 = v0.try_as_i32()?;
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_5);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(1049036i32);
                                local_5 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                local_8 = v0.try_as_i32()?;
                                {}
                                break 'label_3;
                                break;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(-8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_7 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_8);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_4;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_8);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(2i32);
                    v2 = TaggedVal::from(local_4);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v3 = TaggedVal::from(1i32);
                    self.func_141(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                    )?;
                    'label_6: loop {
                        'label_7: loop {
                            'label_8: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    read_mem_u16(&self.memory, (v0.try_as_i32()? + 16) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                'label_9: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 20) as usize,
                                    )?);
                                    local_9 = v0.try_as_i32()?;
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_9;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(16i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(14i32);
                                    v2 = TaggedVal::from(1050340i32);
                                    v3 = TaggedVal::from(28i32);
                                    self.func_34(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                        v3.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(read_mem_i64(
                                        &self.memory,
                                        (v1.try_as_i32()? + 16) as usize,
                                    )?);
                                    write_mem_i64(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i64()?,
                                    )?;
                                    {}
                                    break 'label_0;
                                    break;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(4i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_5 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                v1 = TaggedVal::from(-8i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(
                                    (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                                );
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_10 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(0i32);
                                local_6 = v0.try_as_i32()?;
                                'label_10: loop {
                                    v0 = TaggedVal::from(local_5);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_6);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_8 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(local_9);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_7;
                                    }
                                    v0 = TaggedVal::from(local_5);
                                    v1 = TaggedVal::from(8i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_5 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_8);
                                    local_6 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_10);
                                    v1 = TaggedVal::from(local_7);
                                    v2 = TaggedVal::from(1i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    local_7 = v1.try_as_i32()?;
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_10;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_8);
                                local_6 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_10);
                                local_7 = v0.try_as_i32()?;
                                {}
                                break 'label_7;
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(
                                read_mem_u16(&self.memory, (v1.try_as_i32()? + 18) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            write_mem_u16(
                                &mut self.memory,
                                (v0.try_as_i32()? + 30) as usize,
                                v1.try_as_i32()? as u16,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(30i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(self.func_140(v0.try_as_i32()?)?);
                            v1 = TaggedVal::from(65535i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(self.func_88(v0.try_as_i32()?)?);
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(15i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_0;
                            break;
                        }
                        'label_11: loop {
                            'label_12: loop {
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_7);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_12;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_7);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_7);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_6;
                                }
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_7 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_9);
                                v2 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                );
                                local_5 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_11;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(4i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(local_7);
                                v2 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                v2 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_6;
                                break;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(1050528i32);
                            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(1052116i32);
                        v1 = TaggedVal::from(35i32);
                        v2 = TaggedVal::from(1052176i32);
                        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_2;
                    }
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(3i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_109(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(3i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i64()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1050600i32);
                    v2 = TaggedVal::from(local_3);
                    v3 = TaggedVal::from(24i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_188(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                    )?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(24i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(1050584i32);
                        v3 = TaggedVal::from(15i32);
                        self.func_34(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 24) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        {}
                        break 'label_1;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(read_mem_i64(
                        &self.memory,
                        (v1.try_as_i32()? + 12) as usize,
                    )?);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i64()?,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(3i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                break;
            }
            'label_4: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_5: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_5;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_110(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i64 = 0i64;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(local_2);
        self.func_33(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_4 = v0.try_as_i64()?;
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_3: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_111(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i64 = 0i64;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(local_2);
        self.func_36(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_4 = v0.try_as_i64()?;
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_3: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_4);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_112(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(3i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()? as u8,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_113(&mut self) -> Option<()> {
        self.func_114()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_114(&mut self) -> Option<()> {
        self.func_144()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_115(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(3i32);
        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
        local_0 = v1.try_as_i32()?;
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(2i32);
            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(-4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            local_0 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            'label_5: loop {
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(0i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_3;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(1i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 24) as usize,
                                )?);
                                local_0 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(2i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 24) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(local_3);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 40) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                'label_6: loop {
                                    'label_7: loop {
                                        'label_8: loop {
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    > (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_8;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            match v0.try_as_i32()? {
                                                0 => {
                                                    {}
                                                    break 'label_6;
                                                }
                                                1 => {
                                                    {}
                                                    break 'label_7;
                                                }
                                                2 => {
                                                    {}
                                                    break 'label_6;
                                                }
                                                _ => {
                                                    {}
                                                    break 'label_6;
                                                }
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(1049592i32);
                                        v1 = TaggedVal::from(28i32);
                                        v2 = TaggedVal::from(1049620i32);
                                        self.func_45(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                        )?;
                                        unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 40) as usize,
                                    )?);
                                    local_0 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(28i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_3 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    local_4 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_2;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(1i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    'label_9: loop {
                                        'label_10: loop {
                                            v0 = TaggedVal::from(0i32);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1058352) as usize,
                                            )?);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_10;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1058356) as usize,
                                            )?);
                                            local_4 = v0.try_as_i32()?;
                                            {}
                                            break 'label_9;
                                            break;
                                        }
                                        v0 = TaggedVal::from(0i32);
                                        local_4 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(1i64);
                                        write_mem_i64(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058352) as usize,
                                            v1.try_as_i64()?,
                                        )?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_4);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058356) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_0);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 32) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_1;
                                    }
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 40) as usize,
                                )?);
                                local_0 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                local_0 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(-1i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                'label_11: loop {
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_11;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(40i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    self.func_67(v0.try_as_i32()?)?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_2);
                                local_0 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_2);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_5;
                                }
                                break;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(64i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                        return Some(());
                        break;
                    }
                    v0 = TaggedVal::from(1049080i32);
                    v1 = TaggedVal::from(43i32);
                    v2 = TaggedVal::from(1050932i32);
                    self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(1052192i32);
                v1 = TaggedVal::from(32i32);
                v2 = TaggedVal::from(1052260i32);
                self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_3);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(0i32);
            v1 = TaggedVal::from((v1.try_as_i32()? != v2.try_as_i32()?) as i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 20) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(1049172i32);
            v1 = TaggedVal::from(43i32);
            v2 = TaggedVal::from(local_1);
            v3 = TaggedVal::from(16i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(1049232i32);
            v4 = TaggedVal::from(1049636i32);
            self.func_198(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
                v3.try_as_i32()?,
                v4.try_as_i32()?,
            )?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(52i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(7i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(36i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(3i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1049012i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(7i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 44) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(12i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 56) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1049380i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 60) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(40i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(60i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 48) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(56i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1050916i32);
        self.func_76(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_116(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(40i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v2 = TaggedVal::from(1052388i32);
        v3 = TaggedVal::from(35i32);
        self.func_34(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 44) as usize,
        )?);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 40) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(2i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_3);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(60i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1049036i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 56) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 44) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1051052i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        'label_2: loop {
            'label_3: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(40i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v0 = TaggedVal::from(self.func_221(v0.try_as_i32()?, v1.try_as_i32()?)?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_3);
                v3 = TaggedVal::from(local_2);
                v4 = TaggedVal::from(1051060i32);
                self.func_142(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                )?;
                'label_4: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_143(v0.try_as_i32()?)?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_143(v0.try_as_i32()?)?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    'label_5: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_5;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(60i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(1049036i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 56) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(1i64);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 44) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(1051168i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 40) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(40i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v0 = TaggedVal::from(self.func_221(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        break;
                    }
                    'label_6: loop {
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_6;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_6;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(1i32);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_0 = v0.try_as_i32()?;
                    {}
                    break 'label_2;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(1i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_0 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_117(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(1051180i32);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(9i32);
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(8i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
            self.func_240(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            v0 = TaggedVal::from(1051180i32);
            v1 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 20) as usize,
            )?);
            v2 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 16) as usize,
            )?);
            v3 = TaggedVal::from(1i32);
            v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
            local_4 = v2.try_as_i32()?;
            if ValType::from(v0) != ValType::from(v1) {
                return None;
            }
            if v2.try_as_i32()? != 0 {
                v0 = v0;
            } else {
                v0 = v1;
            }
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(9i32);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            v2 = TaggedVal::from(local_4);
            if ValType::from(v0) != ValType::from(v1) {
                return None;
            }
            if v2.try_as_i32()? != 0 {
                v0 = v0;
            } else {
                v0 = v1;
            }
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(local_4);
        self.func_235(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        v0 = TaggedVal::from(local_3);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
        v1 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v1.try_as_i32()? + 12) as usize,
        )?);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_238(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_118(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v1.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_119(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(1052032i32);
        v1 = TaggedVal::from(29i32);
        v2 = TaggedVal::from(1052100i32);
        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_120(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(1051232i32);
        v1 = TaggedVal::from(25i32);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_227(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_121(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(40i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v2 = TaggedVal::from(local_1);
        v3 = TaggedVal::from(16i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        self.func_109(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 12) as usize,
            )?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_122(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(20i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1051372i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(6i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 28) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(24i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        self.func_121(v0.try_as_i32()?)?;
        self.func_114()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_123(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(20i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(52i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1051440i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 48) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(56i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(32i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        self.func_109(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 24) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 28) as usize,
            )?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_124(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(0i32);
        v2 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v2.try_as_i32()? + 1058292) as usize,
        )?);
        local_2 = v2.try_as_i32()?;
        v3 = TaggedVal::from(14i32);
        v4 = TaggedVal::from(local_2);
        if ValType::from(v2) != ValType::from(v3) {
            return None;
        }
        if v4.try_as_i32()? != 0 {
            v2 = v2;
        } else {
            v2 = v3;
        }
        {
            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
            if rets.len() != 0 {
                return None;
            }
        }
        self.func_113()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_125(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(
                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                );
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(self.func_153(v0.try_as_i32()?, v1.try_as_i32()?)?);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(self.func_145(v0.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_126(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        self.func_147(v0.try_as_i32()?)?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_127(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(8i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(
                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                );
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(self.func_153(v0.try_as_i32()?, v1.try_as_i32()?)?);
                local_2 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(0i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(local_1);
            v4 = TaggedVal::from(local_1);
            v5 = TaggedVal::from(local_3);
            v4 = TaggedVal::from(((v4.try_as_i32()? as u32) > (v5.try_as_i32()? as u32)) as i32);
            if ValType::from(v2) != ValType::from(v3) {
                return None;
            }
            if v4.try_as_i32()? != 0 {
                v2 = v2;
            } else {
                v2 = v3;
            }
            v0 = TaggedVal::from(self.func_167(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            self.func_147(v0.try_as_i32()?)?;
            v0 = TaggedVal::from(local_3);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        v0 = TaggedVal::from(self.func_150(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_128(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(20i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(3i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(20i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(15i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(44i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(10i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(4i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1051632i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(10i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 48) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(32i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_3);
        v3 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 36) as usize,
        )?);
        local_2 = v3.try_as_i32()?;
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 0 {
                return None;
            }
        }
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(0i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 24) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 28) as usize,
            )?);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            {
                let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                if rets.len() != 0 {
                    return None;
                }
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_6);
                v2 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 8) as usize)?);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(12i32);
            v2 = TaggedVal::from(4i32);
            self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            break;
        }
        'label_3: loop {
            'label_4: loop {
                'label_5: loop {
                    'label_6: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                        )?);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(-3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_0 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(0i32);
                        v2 = TaggedVal::from(local_0);
                        v3 = TaggedVal::from(2i32);
                        v2 = TaggedVal::from(
                            ((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        match v0.try_as_i32()? {
                            0 => {
                                {}
                                break 'label_6;
                            }
                            1 => {
                                {}
                                break 'label_4;
                            }
                            2 => {
                                {}
                                break 'label_5;
                            }
                            _ => {
                                {}
                                break 'label_6;
                            }
                        }
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 1058362) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(1i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058362) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(52i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 36) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1050296i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 32) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(16i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_4);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 63) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 48) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(63i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(24i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(local_3);
                    v3 = TaggedVal::from(32i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v3 = TaggedVal::from(local_2);
                    {
                        let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                        if rets.len() != 0 {
                            return None;
                        }
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(0i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058362) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    'label_7: loop {
                        v0 = TaggedVal::from(0i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_7;
                        }
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 24) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(2i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 28) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 4) as usize,
                    )?);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                        if rets.len() != 0 {
                            return None;
                        }
                    }
                    'label_8: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_8;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 8) as usize,
                        )?);
                        self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(12i32);
                    v2 = TaggedVal::from(4i32);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    {}
                    break 'label_4;
                    break;
                }
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 1058264) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(0i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058264) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(52i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1049036i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 48) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1i64);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 36) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1051744i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 32) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_3);
                v3 = TaggedVal::from(32i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v3 = TaggedVal::from(local_2);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_9: loop {
                    v0 = TaggedVal::from(0i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_9;
                    }
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v1 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                {
                    let rets = self.indirect_call(v1.try_as_i32()? as usize, &[v0])?;
                    if rets.len() != 0 {
                        return None;
                    }
                }
                'label_10: loop {
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_10;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 8) as usize,
                    )?);
                    self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(12i32);
                v2 = TaggedVal::from(4i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(64i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            return Some(());
            break;
        }
        v0 = TaggedVal::from(1052192i32);
        v1 = TaggedVal::from(32i32);
        v2 = TaggedVal::from(1052260i32);
        self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_129(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(self.func_201(v0.try_as_i32()?)?);
        v1 = TaggedVal::from(1051752i32);
        v0 = TaggedVal::from(self.func_55(v0.try_as_i32()?, v1.try_as_i32()?)?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(self.func_200(v0.try_as_i32()?)?);
        v0 = TaggedVal::from(self.func_54(v0.try_as_i32()?)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1051784i32);
        v2 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(self.func_200(v2.try_as_i32()?)?);
        v3 = TaggedVal::from(local_2);
        self.func_130(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_130(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_5 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058352) as usize,
                        )?);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(4294967297i64);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058352) as usize,
                            v1.try_as_i64()?,
                        )?;
                        {}
                        break 'label_2;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 1058356) as usize,
                    )?);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_5 = v1.try_as_i32()?;
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058356) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_3);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 36) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_2);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 32) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1049036i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 28) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1049036i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                    v1.try_as_i32()?,
                )?;
                'label_4: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058296) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058296) as usize,
                        v1.try_as_i32()?,
                    )?;
                    'label_5: loop {
                        'label_6: loop {
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058304) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058300) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_0);
                            v2 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 16) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(read_mem_i64(
                                &self.memory,
                                (v1.try_as_i32()? + 16) as usize,
                            )?);
                            write_mem_i64(
                                &mut self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                                v1.try_as_i64()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(24i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 12) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                                if rets.len() != 0 {
                                    return None;
                                }
                            }
                            {}
                            break 'label_5;
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 16) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                            if rets.len() != 0 {
                                return None;
                            }
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 8) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(24i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.func_39(v0.try_as_i32()?)?;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 1058296) as usize,
                    )?);
                    v2 = TaggedVal::from(-1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058296) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(60i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(0i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(1049036i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 56) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(1i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 44) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(1051960i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 40) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(40i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    self.func_121(v0.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(60i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1049036i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 56) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1i64);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 44) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1052380i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 40) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(40i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                self.func_122(v0.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(60i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(1049036i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 56) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(1i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 44) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(1051908i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.func_121(v0.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        self.func_135(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_131(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_3 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 32) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(1i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 24) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 36) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(36i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1048680i32);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(40i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v0 = TaggedVal::from(self.func_188(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);

            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_4 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 32) as usize,
            )?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v1.try_as_i32()? + 24) as usize,
            )?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i64()?,
            )?;
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_6);
                v2 = TaggedVal::from(1i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_3 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(12i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(0i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        'label_2: loop {
            v0 = TaggedVal::from(12i32);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
            local_1 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(12i32);
            v1 = TaggedVal::from(4i32);
            self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_4);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_5);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1051804i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_132(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 32) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(1i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 24) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 36) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(36i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1048680i32);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(40i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v0 = TaggedVal::from(self.func_188(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);

            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_4 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 32) as usize,
            )?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v1.try_as_i32()? + 24) as usize,
            )?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i64()?,
            )?;
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(1i32);
                self.func_20(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 8) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1051804i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_133(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(8i32);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_3);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1051840i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            self.func_113()?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(4i32);
        self.func_174(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_134(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            self.func_113()?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1051840i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_135(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(self.func_139(v1.try_as_i32()?)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(36i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1052000i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 44) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(40i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(12i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.func_122(v0.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_136(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(self.func_19(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(4i64);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 20) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(4i32);
                        self.func_58(v0.try_as_i32()?, v1.try_as_i32()?)?;
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 24) as usize,
                        )?);
                        local_5 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(1852399981i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(read_mem_i64(
                            &self.memory,
                            (v1.try_as_i32()? + 16) as usize,
                        )?);
                        write_mem_i64(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i64()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(self.func_77(v0.try_as_i32()?)?);
                        local_5 = v0.try_as_i32()?;
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058340) as usize,
                                )?);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(1i64);
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058340) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058348) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_4;
                                break;
                            }
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058344) as usize,
                            )?);
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058348) as usize,
                            )?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_6);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_0;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058348) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058344) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(self.func_118(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_0 = v0.try_as_i32()?;
                        'label_6: loop {
                            v0 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 1058288) as usize,
                            )?);
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(1i32);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(1058288i32);
                            v1 = TaggedVal::from(0i32);
                            v2 = TaggedVal::from(local_4);
                            v3 = TaggedVal::from(16i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            v3 = TaggedVal::from(1050720i32);
                            self.func_102(
                                v0.try_as_i32()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                                v3.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(32i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                        v0 = TaggedVal::from(local_0);
                        return Some(v0.try_as_i32()?);
                        break;
                    }
                    v0 = TaggedVal::from(4i32);
                    v1 = TaggedVal::from(1i32);
                    self.func_70(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(1048912i32);
                v1 = TaggedVal::from(24i32);
                v2 = TaggedVal::from(local_4);
                v3 = TaggedVal::from(16i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v3 = TaggedVal::from(1049124i32);
                v4 = TaggedVal::from(1048936i32);
                self.func_198(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                )?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1051293i32);
            v1 = TaggedVal::from(38i32);
            v2 = TaggedVal::from(1051332i32);
            self.func_45(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(1048812i32);
        v1 = TaggedVal::from(16i32);
        v2 = TaggedVal::from(local_4);
        v3 = TaggedVal::from(16i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v3 = TaggedVal::from(1049140i32);
        v4 = TaggedVal::from(1048896i32);
        self.func_198(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_137(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(1052008i32);
        v3 = TaggedVal::from(8i32);
        self.func_224(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(12i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v2 = TaggedVal::from(1049284i32);
        v0 =
            TaggedVal::from(self.func_207(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);

        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(12i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v2 = TaggedVal::from(1052016i32);
        v0 =
            TaggedVal::from(self.func_207(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);

        v0 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(self.func_208(v0.try_as_i32()?)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_138(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_139(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_140(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u16(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_141(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(local_3);
                v3 = TaggedVal::from(local_4);
                v4 = TaggedVal::from(12i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v0 = TaggedVal::from(self.func_1(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                )?);
                local_1 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v1.try_as_i32()? + 12) as usize,
                )?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(0i32);
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_u16(
                &mut self.memory,
                (v0.try_as_i32()? + 2) as usize,
                v1.try_as_i32()? as u16,
            )?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_u16(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()? as u16,
        )?;
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_142(
        &mut self,
        arg_0: i32,
        arg_1: i32,
        arg_2: i32,
        arg_3: i32,
        arg_4: i32,
    ) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(12i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_4);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_143(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(0i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_144(&mut self) -> Option<()> {
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_145(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(self.func_146(v0.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_146(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_1 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    'label_7: loop {
                                        'label_8: loop {
                                            'label_9: loop {
                                                'label_10: loop {
                                                    'label_11: loop {
                                                        v0 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(236i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_11;
                                                        }
                                                        'label_12: loop {
                                                            v0 = TaggedVal::from(0i32);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 1058364)
                                                                    as usize,
                                                            )?);
                                                            local_2 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(16i32);
                                                            v2 = TaggedVal::from(local_0);
                                                            v3 = TaggedVal::from(19i32);
                                                            v2 = TaggedVal::from(
                                                                v2.try_as_i32()?
                                                                    .wrapping_add(v3.try_as_i32()?),
                                                            );
                                                            v3 = TaggedVal::from(-16i32);
                                                            v2 = TaggedVal::from(
                                                                v2.try_as_i32()?
                                                                    & v3.try_as_i32()?,
                                                            );
                                                            v3 = TaggedVal::from(local_0);
                                                            v4 = TaggedVal::from(11i32);
                                                            v3 = TaggedVal::from(
                                                                ((v3.try_as_i32()? as u32)
                                                                    < (v4.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if ValType::from(v1)
                                                                != ValType::from(v2)
                                                            {
                                                                return None;
                                                            }
                                                            if v3.try_as_i32()? != 0 {
                                                                v1 = v1;
                                                            } else {
                                                                v1 = v2;
                                                            }
                                                            local_3 = v1.try_as_i32()?;
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                (v1.try_as_i32()? as u32)
                                                                    >> (v2.try_as_i32()? % 32),
                                                            );
                                                            local_4 = v1.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? as u32)
                                                                    >> (v1.try_as_i32()? % 32),
                                                            );
                                                            local_0 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(3i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    & v1.try_as_i32()?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_12;
                                                            }
                                                            v0 = TaggedVal::from(local_0);
                                                            v1 = TaggedVal::from(1i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    & v1.try_as_i32()?,
                                                            );
                                                            v1 = TaggedVal::from(local_4);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    | v1.try_as_i32()?,
                                                            );
                                                            v1 = TaggedVal::from(1i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    ^ v1.try_as_i32()?,
                                                            );
                                                            local_3 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(3i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    << (v1.try_as_i32()? % 32),
                                                            );
                                                            local_5 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(1058412i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            local_4 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(8i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_0 = v0.try_as_i32()?;
                                                            'label_13: loop {
                                                                'label_14: loop {
                                                                    v0 = TaggedVal::from(local_4);
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 8)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_6 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(local_5);
                                                                    v2 =
                                                                        TaggedVal::from(1058404i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v2.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    local_5 = v1.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        (v0.try_as_i32()?
                                                                            != v1.try_as_i32()?)
                                                                            as i32,
                                                                    );
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    v0 = TaggedVal::from(0i32);
                                                                    v1 = TaggedVal::from(local_2);
                                                                    v2 = TaggedVal::from(-2i32);
                                                                    v3 = TaggedVal::from(local_3);
                                                                    v2 = TaggedVal::from(
                                                                        v2.try_as_i32()?
                                                                            .rotate_left(
                                                                                v3.try_as_i32()?
                                                                                    as u32,
                                                                            ),
                                                                    );
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            & v2.try_as_i32()?,
                                                                    );
                                                                    write_mem_i32(
                                                                        &mut self.memory,
                                                                        (v0.try_as_i32()? + 1058364)
                                                                            as usize,
                                                                        v1.try_as_i32()?,
                                                                    )?;
                                                                    {}
                                                                    break 'label_13;
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(0i32);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 1058380)
                                                                        as usize,
                                                                )?);
                                                                v1 = TaggedVal::from(local_6);
                                                                v0 = TaggedVal::from(
                                                                    ((v0.try_as_i32()? as u32)
                                                                        > (v1.try_as_i32()? as u32))
                                                                        as i32,
                                                                );

                                                                v0 = TaggedVal::from(local_5);
                                                                v1 = TaggedVal::from(local_6);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 8) as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                v0 = TaggedVal::from(local_6);
                                                                v1 = TaggedVal::from(local_5);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 12)
                                                                        as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_3);
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    << (v2.try_as_i32()? % 32),
                                                            );
                                                            local_6 = v1.try_as_i32()?;
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    | v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_6);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v1.try_as_i32()? + 4) as usize,
                                                            )?);
                                                            v2 = TaggedVal::from(1i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    | v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_0;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_3);
                                                        v1 = TaggedVal::from(0i32);
                                                        v1 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v1.try_as_i32()? + 1058372) as usize,
                                                        )?);
                                                        local_7 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                <= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_10;
                                                        }
                                                        'label_15: loop {
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_15;
                                                            }
                                                            'label_16: loop {
                                                                'label_17: loop {
                                                                    v0 = TaggedVal::from(local_0);
                                                                    v1 = TaggedVal::from(local_4);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            << (v1.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v1 = TaggedVal::from(2i32);
                                                                    v2 = TaggedVal::from(local_4);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            << (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_0 = v1.try_as_i32()?;
                                                                    v2 = TaggedVal::from(0i32);
                                                                    v3 = TaggedVal::from(local_0);
                                                                    v2 = TaggedVal::from(
                                                                        v2.try_as_i32()?
                                                                            .wrapping_sub(
                                                                                v3.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            | v2.try_as_i32()?,
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            & v1.try_as_i32()?,
                                                                    );
                                                                    local_0 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(0i32);
                                                                    v2 = TaggedVal::from(local_0);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            .wrapping_sub(
                                                                                v2.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            & v1.try_as_i32()?,
                                                                    );
                                                                    v1 = TaggedVal::from(-1i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v1.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    local_0 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v2 = TaggedVal::from(12i32);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v2 = TaggedVal::from(16i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            & v2.try_as_i32()?,
                                                                    );
                                                                    local_0 = v1.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        (v0.try_as_i32()? as u32)
                                                                            >> (v1.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_4 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(5i32);
                                                                    v0 = TaggedVal::from(
                                                                        (v0.try_as_i32()? as u32)
                                                                            >> (v1.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v1 = TaggedVal::from(8i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            & v1.try_as_i32()?,
                                                                    );
                                                                    local_6 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            | v1.try_as_i32()?,
                                                                    );
                                                                    v1 = TaggedVal::from(local_4);
                                                                    v2 = TaggedVal::from(local_6);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_0 = v1.try_as_i32()?;
                                                                    v2 = TaggedVal::from(2i32);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v2 = TaggedVal::from(4i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            & v2.try_as_i32()?,
                                                                    );
                                                                    local_4 = v1.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            | v1.try_as_i32()?,
                                                                    );
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v2 = TaggedVal::from(local_4);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_0 = v1.try_as_i32()?;
                                                                    v2 = TaggedVal::from(1i32);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v2 = TaggedVal::from(2i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            & v2.try_as_i32()?,
                                                                    );
                                                                    local_4 = v1.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            | v1.try_as_i32()?,
                                                                    );
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v2 = TaggedVal::from(local_4);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_0 = v1.try_as_i32()?;
                                                                    v2 = TaggedVal::from(1i32);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v2 = TaggedVal::from(1i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            & v2.try_as_i32()?,
                                                                    );
                                                                    local_4 = v1.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            | v1.try_as_i32()?,
                                                                    );
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v2 = TaggedVal::from(local_4);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()? as u32)
                                                                            >> (v2.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v1.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    local_6 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(3i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            << (v1.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_5 = v0.try_as_i32()?;
                                                                    v1 =
                                                                        TaggedVal::from(1058412i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v1.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_4 = v0.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 8)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_0 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(local_5);
                                                                    v2 =
                                                                        TaggedVal::from(1058404i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v2.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    local_5 = v1.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        (v0.try_as_i32()?
                                                                            != v1.try_as_i32()?)
                                                                            as i32,
                                                                    );
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_17;
                                                                    }
                                                                    v0 = TaggedVal::from(0i32);
                                                                    v1 = TaggedVal::from(local_2);
                                                                    v2 = TaggedVal::from(-2i32);
                                                                    v3 = TaggedVal::from(local_6);
                                                                    v2 = TaggedVal::from(
                                                                        v2.try_as_i32()?
                                                                            .rotate_left(
                                                                                v3.try_as_i32()?
                                                                                    as u32,
                                                                            ),
                                                                    );
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            & v2.try_as_i32()?,
                                                                    );
                                                                    local_2 = v1.try_as_i32()?;
                                                                    write_mem_i32(
                                                                        &mut self.memory,
                                                                        (v0.try_as_i32()? + 1058364)
                                                                            as usize,
                                                                        v1.try_as_i32()?,
                                                                    )?;
                                                                    {}
                                                                    break 'label_16;
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(0i32);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 1058380)
                                                                        as usize,
                                                                )?);
                                                                v1 = TaggedVal::from(local_0);
                                                                v0 = TaggedVal::from(
                                                                    ((v0.try_as_i32()? as u32)
                                                                        > (v1.try_as_i32()? as u32))
                                                                        as i32,
                                                                );

                                                                v0 = TaggedVal::from(local_5);
                                                                v1 = TaggedVal::from(local_0);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 8) as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                v0 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(local_5);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 12)
                                                                        as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(8i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_0 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_3);
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    | v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_6);
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    << (v2.try_as_i32()? % 32),
                                                            );
                                                            local_6 = v1.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            v1 = TaggedVal::from(local_6);
                                                            v2 = TaggedVal::from(local_3);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    .wrapping_sub(v2.try_as_i32()?),
                                                            );
                                                            local_6 = v1.try_as_i32()?;
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_3);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_5 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_6);
                                                            v2 = TaggedVal::from(1i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    | v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            'label_18: loop {
                                                                v0 = TaggedVal::from(local_7);
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()? == 0) as i32,
                                                                );
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_18;
                                                                }
                                                                v0 = TaggedVal::from(local_7);
                                                                v1 = TaggedVal::from(3i32);
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()? as u32)
                                                                        >> (v1.try_as_i32()? % 32),
                                                                );
                                                                local_8 = v0.try_as_i32()?;
                                                                v1 = TaggedVal::from(3i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        << (v1.try_as_i32()? % 32),
                                                                );
                                                                v1 = TaggedVal::from(1058404i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?.wrapping_add(
                                                                        v1.try_as_i32()?,
                                                                    ),
                                                                );
                                                                local_3 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(0i32);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 1058384)
                                                                        as usize,
                                                                )?);
                                                                local_4 = v0.try_as_i32()?;
                                                                'label_19: loop {
                                                                    'label_20: loop {
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v1 = TaggedVal::from(1i32);
                                                                        v2 = TaggedVal::from(
                                                                            local_8,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            v1.try_as_i32()?
                                                                                << (v2
                                                                                    .try_as_i32(
                                                                                    )?
                                                                                    % 32),
                                                                        );
                                                                        local_8 =
                                                                            v1.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                & v1.try_as_i32()?,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_20;
                                                                        }
                                                                        v0 = TaggedVal::from(0i32);
                                                                        v1 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v2 = TaggedVal::from(
                                                                            local_8,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            v1.try_as_i32()?
                                                                                | v2.try_as_i32()?,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()?
                                                                                + 1058364)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        local_8 =
                                                                            v0.try_as_i32()?;
                                                                        {}
                                                                        break 'label_19;
                                                                        break;
                                                                    }
                                                                    v0 = TaggedVal::from(local_3);
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 8)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_8 = v0.try_as_i32()?;
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(local_8);
                                                                v1 = TaggedVal::from(local_4);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 12)
                                                                        as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                v0 = TaggedVal::from(local_3);
                                                                v1 = TaggedVal::from(local_4);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 8) as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                v0 = TaggedVal::from(local_4);
                                                                v1 = TaggedVal::from(local_3);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 12)
                                                                        as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                v0 = TaggedVal::from(local_4);
                                                                v1 = TaggedVal::from(local_8);
                                                                write_mem_i32(
                                                                    &mut self.memory,
                                                                    (v0.try_as_i32()? + 8) as usize,
                                                                    v1.try_as_i32()?,
                                                                )?;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(local_5);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 1058384)
                                                                    as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(local_6);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 1058372)
                                                                    as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_0;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(0i32);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 1058368) as usize,
                                                        )?);
                                                        local_9 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_10;
                                                        }
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(0i32);
                                                        v2 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()?
                                                                .wrapping_sub(v2.try_as_i32()?),
                                                        );
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(-1i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_0 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(12i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(16i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_0 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? as u32)
                                                                >> (v1.try_as_i32()? % 32),
                                                        );
                                                        local_4 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(5i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? as u32)
                                                                >> (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(8i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        local_6 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_0);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? | v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(local_4);
                                                        v2 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        local_0 = v1.try_as_i32()?;
                                                        v2 = TaggedVal::from(2i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(4i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_4 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? | v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        local_0 = v1.try_as_i32()?;
                                                        v2 = TaggedVal::from(1i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(2i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_4 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? | v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        local_0 = v1.try_as_i32()?;
                                                        v2 = TaggedVal::from(1i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(1i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_4 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? | v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(2i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                << (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(1058668i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                        )?);
                                                        local_5 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 4) as usize,
                                                        )?);
                                                        v1 = TaggedVal::from(-8i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(local_3);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_sub(v1.try_as_i32()?),
                                                        );
                                                        local_4 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(local_5);
                                                        local_6 = v0.try_as_i32()?;
                                                        'label_21: loop {
                                                            'label_22: loop {
                                                                'label_23: loop {
                                                                    v0 = TaggedVal::from(local_6);
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 16)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_0 = v0.try_as_i32()?;
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_23;
                                                                    }
                                                                    v0 = TaggedVal::from(local_6);
                                                                    v1 = TaggedVal::from(20i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v1.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_0 = v0.try_as_i32()?;
                                                                    v0 = TaggedVal::from(
                                                                        (v0.try_as_i32()? == 0)
                                                                            as i32,
                                                                    );
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_21;
                                                                    }
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(local_0);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 4) as usize,
                                                                )?);
                                                                v1 = TaggedVal::from(-8i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        & v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(local_3);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?.wrapping_sub(
                                                                        v1.try_as_i32()?,
                                                                    ),
                                                                );
                                                                local_6 = v0.try_as_i32()?;
                                                                v1 = TaggedVal::from(local_4);
                                                                v2 = TaggedVal::from(local_6);
                                                                v3 = TaggedVal::from(local_4);
                                                                v2 = TaggedVal::from(
                                                                    ((v2.try_as_i32()? as u32)
                                                                        < (v3.try_as_i32()? as u32))
                                                                        as i32,
                                                                );
                                                                local_6 = v2.try_as_i32()?;
                                                                if ValType::from(v0)
                                                                    != ValType::from(v1)
                                                                {
                                                                    return None;
                                                                }
                                                                if v2.try_as_i32()? != 0 {
                                                                    v0 = v0;
                                                                } else {
                                                                    v0 = v1;
                                                                }
                                                                local_4 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(local_5);
                                                                v2 = TaggedVal::from(local_6);
                                                                if ValType::from(v0)
                                                                    != ValType::from(v1)
                                                                {
                                                                    return None;
                                                                }
                                                                if v2.try_as_i32()? != 0 {
                                                                    v0 = v0;
                                                                } else {
                                                                    v0 = v1;
                                                                }
                                                                local_5 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(local_0);
                                                                local_6 = v0.try_as_i32()?;
                                                                {}
                                                                continue 'label_22;
                                                                break;
                                                            }
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_5);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 24) as usize,
                                                        )?);
                                                        local_10 = v0.try_as_i32()?;
                                                        'label_24: loop {
                                                            v0 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 12) as usize,
                                                            )?);
                                                            local_8 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    == v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_24;
                                                            }
                                                            'label_25: loop {
                                                                v0 = TaggedVal::from(0i32);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 1058380)
                                                                        as usize,
                                                                )?);
                                                                v1 = TaggedVal::from(local_5);
                                                                v1 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v1.try_as_i32()? + 8) as usize,
                                                                )?);
                                                                local_0 = v1.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    ((v0.try_as_i32()? as u32)
                                                                        > (v1.try_as_i32()? as u32))
                                                                        as i32,
                                                                );
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_25;
                                                                }
                                                                v0 = TaggedVal::from(local_0);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 12)
                                                                        as usize,
                                                                )?);
                                                                v1 = TaggedVal::from(local_5);
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()?
                                                                        != v1.try_as_i32()?)
                                                                        as i32,
                                                                );

                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_8);
                                                            v1 = TaggedVal::from(local_0);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 8) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_0);
                                                            v1 = TaggedVal::from(local_8);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 12) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_1;
                                                            break;
                                                        }
                                                        'label_26: loop {
                                                            v0 = TaggedVal::from(local_5);
                                                            v1 = TaggedVal::from(20i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_6 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_26;
                                                            }
                                                            v0 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 16) as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_9;
                                                            }
                                                            v0 = TaggedVal::from(local_5);
                                                            v1 = TaggedVal::from(16i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_6 = v0.try_as_i32()?;
                                                            break;
                                                        }
                                                        'label_27: loop {
                                                            v0 = TaggedVal::from(local_6);
                                                            local_11 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_0);
                                                            local_8 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(20i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_6 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                continue 'label_27;
                                                            }
                                                            v0 = TaggedVal::from(local_8);
                                                            v1 = TaggedVal::from(16i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_6 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_8);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 16) as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                continue 'label_27;
                                                            }
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_11);
                                                        v1 = TaggedVal::from(0i32);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        {}
                                                        break 'label_1;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(-1i32);
                                                    local_3 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(local_0);
                                                    v1 = TaggedVal::from(-65i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            > (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_10;
                                                    }
                                                    v0 = TaggedVal::from(local_0);
                                                    v1 = TaggedVal::from(19i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_0 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(-16i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    local_3 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058368) as usize,
                                                    )?);
                                                    local_7 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_10;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    local_11 = v0.try_as_i32()?;
                                                    'label_28: loop {
                                                        v0 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(8i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? as u32)
                                                                >> (v1.try_as_i32()? % 32),
                                                        );
                                                        local_0 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_28;
                                                        }
                                                        v0 = TaggedVal::from(31i32);
                                                        local_11 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(local_3);
                                                        v1 = TaggedVal::from(16777215i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_28;
                                                        }
                                                        v0 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(1048320i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()?
                                                                .wrapping_add(v2.try_as_i32()?),
                                                        );
                                                        v2 = TaggedVal::from(16i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(8i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_4 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                << (v1.try_as_i32()? % 32),
                                                        );
                                                        local_0 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(520192i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()?
                                                                .wrapping_add(v2.try_as_i32()?),
                                                        );
                                                        v2 = TaggedVal::from(16i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(4i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_0 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                << (v1.try_as_i32()? % 32),
                                                        );
                                                        local_6 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_6);
                                                        v2 = TaggedVal::from(245760i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()?
                                                                .wrapping_add(v2.try_as_i32()?),
                                                        );
                                                        v2 = TaggedVal::from(16i32);
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(2i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        local_6 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                << (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(15i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? as u32)
                                                                >> (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? | v2.try_as_i32()?,
                                                        );
                                                        v2 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? | v2.try_as_i32()?,
                                                        );
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_sub(v1.try_as_i32()?),
                                                        );
                                                        local_0 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(1i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                << (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(local_3);
                                                        v2 = TaggedVal::from(local_0);
                                                        v3 = TaggedVal::from(21i32);
                                                        v2 = TaggedVal::from(
                                                            v2.try_as_i32()?
                                                                .wrapping_add(v3.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(
                                                            (v1.try_as_i32()? as u32)
                                                                >> (v2.try_as_i32()? % 32),
                                                        );
                                                        v2 = TaggedVal::from(1i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? & v2.try_as_i32()?,
                                                        );
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? | v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(28i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_11 = v0.try_as_i32()?;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_sub(v1.try_as_i32()?),
                                                    );
                                                    local_6 = v0.try_as_i32()?;
                                                    'label_29: loop {
                                                        'label_30: loop {
                                                            'label_31: loop {
                                                                'label_32: loop {
                                                                    v0 = TaggedVal::from(local_11);
                                                                    v1 = TaggedVal::from(2i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            << (v1.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v1 =
                                                                        TaggedVal::from(1058668i32);
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v1.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_4 = v0.try_as_i32()?;
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_32;
                                                                    }
                                                                    v0 = TaggedVal::from(0i32);
                                                                    local_0 = v0.try_as_i32()?;
                                                                    v0 = TaggedVal::from(0i32);
                                                                    local_8 = v0.try_as_i32()?;
                                                                    {}
                                                                    break 'label_31;
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(local_3);
                                                                v1 = TaggedVal::from(0i32);
                                                                v2 = TaggedVal::from(25i32);
                                                                v3 = TaggedVal::from(local_11);
                                                                v4 = TaggedVal::from(1i32);
                                                                v3 = TaggedVal::from(
                                                                    (v3.try_as_i32()? as u32)
                                                                        >> (v4.try_as_i32()? % 32),
                                                                );
                                                                v2 = TaggedVal::from(
                                                                    v2.try_as_i32()?.wrapping_sub(
                                                                        v3.try_as_i32()?,
                                                                    ),
                                                                );
                                                                v3 = TaggedVal::from(local_11);
                                                                v4 = TaggedVal::from(31i32);
                                                                v3 = TaggedVal::from(
                                                                    (v3.try_as_i32()?
                                                                        == v4.try_as_i32()?)
                                                                        as i32,
                                                                );
                                                                if ValType::from(v1)
                                                                    != ValType::from(v2)
                                                                {
                                                                    return None;
                                                                }
                                                                if v3.try_as_i32()? != 0 {
                                                                    v1 = v1;
                                                                } else {
                                                                    v1 = v2;
                                                                }
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        << (v1.try_as_i32()? % 32),
                                                                );
                                                                local_5 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(0i32);
                                                                local_0 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(0i32);
                                                                local_8 = v0.try_as_i32()?;
                                                                'label_33: loop {
                                                                    'label_34: loop {
                                                                        v0 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            read_mem_i32(
                                                                                &self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 4)
                                                                                    as usize,
                                                                            )?,
                                                                        );
                                                                        v1 = TaggedVal::from(-8i32);
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                & v1.try_as_i32()?,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                .wrapping_sub(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        local_2 =
                                                                            v0.try_as_i32()?;
                                                                        v1 = TaggedVal::from(
                                                                            local_6,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            ((v0.try_as_i32()?
                                                                                as u32)
                                                                                >= (v1
                                                                                    .try_as_i32()?
                                                                                    as u32))
                                                                                as i32,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_34;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        local_6 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        local_8 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_34;
                                                                        }
                                                                        v0 = TaggedVal::from(0i32);
                                                                        local_6 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        local_8 =
                                                                            v0.try_as_i32()?;
                                                                        v0 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        local_0 =
                                                                            v0.try_as_i32()?;
                                                                        {}
                                                                        break 'label_30;
                                                                        break;
                                                                    }
                                                                    v0 = TaggedVal::from(local_0);
                                                                    v1 = TaggedVal::from(local_4);
                                                                    v2 = TaggedVal::from(20i32);
                                                                    v1 = TaggedVal::from(
                                                                        v1.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v2.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v1 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v1.try_as_i32()? + 0)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_2 = v1.try_as_i32()?;
                                                                    v2 = TaggedVal::from(local_2);
                                                                    v3 = TaggedVal::from(local_4);
                                                                    v4 = TaggedVal::from(local_5);
                                                                    v5 = TaggedVal::from(29i32);
                                                                    v4 = TaggedVal::from(
                                                                        (v4.try_as_i32()? as u32)
                                                                            >> (v5.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    v5 = TaggedVal::from(4i32);
                                                                    v4 = TaggedVal::from(
                                                                        v4.try_as_i32()?
                                                                            & v5.try_as_i32()?,
                                                                    );
                                                                    v3 = TaggedVal::from(
                                                                        v3.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v4.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v4 = TaggedVal::from(16i32);
                                                                    v3 = TaggedVal::from(
                                                                        v3.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v4.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v3 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v3.try_as_i32()? + 0)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_4 = v3.try_as_i32()?;
                                                                    v2 = TaggedVal::from(
                                                                        (v2.try_as_i32()?
                                                                            == v3.try_as_i32()?)
                                                                            as i32,
                                                                    );
                                                                    if ValType::from(v0)
                                                                        != ValType::from(v1)
                                                                    {
                                                                        return None;
                                                                    }
                                                                    if v2.try_as_i32()? != 0 {
                                                                        v0 = v0;
                                                                    } else {
                                                                        v0 = v1;
                                                                    }
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v2 = TaggedVal::from(local_2);
                                                                    if ValType::from(v0)
                                                                        != ValType::from(v1)
                                                                    {
                                                                        return None;
                                                                    }
                                                                    if v2.try_as_i32()? != 0 {
                                                                        v0 = v0;
                                                                    } else {
                                                                        v0 = v1;
                                                                    }
                                                                    local_0 = v0.try_as_i32()?;
                                                                    v0 = TaggedVal::from(local_5);
                                                                    v1 = TaggedVal::from(local_4);
                                                                    v2 = TaggedVal::from(0i32);
                                                                    v1 = TaggedVal::from(
                                                                        (v1.try_as_i32()?
                                                                            != v2.try_as_i32()?)
                                                                            as i32,
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            << (v1.try_as_i32()?
                                                                                % 32),
                                                                    );
                                                                    local_5 = v0.try_as_i32()?;
                                                                    v0 = TaggedVal::from(local_4);
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        continue 'label_33;
                                                                    }
                                                                    break;
                                                                }
                                                                break;
                                                            }
                                                            'label_35: loop {
                                                                v0 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(local_8);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        | v1.try_as_i32()?,
                                                                );
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_35;
                                                                }
                                                                v0 = TaggedVal::from(2i32);
                                                                v1 = TaggedVal::from(local_11);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        << (v1.try_as_i32()? % 32),
                                                                );
                                                                local_0 = v0.try_as_i32()?;
                                                                v1 = TaggedVal::from(0i32);
                                                                v2 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i32()?.wrapping_sub(
                                                                        v2.try_as_i32()?,
                                                                    ),
                                                                );
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        | v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(local_7);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        & v1.try_as_i32()?,
                                                                );
                                                                local_0 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()? == 0) as i32,
                                                                );
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_10;
                                                                }
                                                                v0 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(0i32);
                                                                v2 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i32()?.wrapping_sub(
                                                                        v2.try_as_i32()?,
                                                                    ),
                                                                );
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        & v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(-1i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?.wrapping_add(
                                                                        v1.try_as_i32()?,
                                                                    ),
                                                                );
                                                                local_0 = v0.try_as_i32()?;
                                                                v1 = TaggedVal::from(local_0);
                                                                v2 = TaggedVal::from(12i32);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                v2 = TaggedVal::from(16i32);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i32()?
                                                                        & v2.try_as_i32()?,
                                                                );
                                                                local_0 = v1.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()? as u32)
                                                                        >> (v1.try_as_i32()? % 32),
                                                                );
                                                                local_4 = v0.try_as_i32()?;
                                                                v1 = TaggedVal::from(5i32);
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()? as u32)
                                                                        >> (v1.try_as_i32()? % 32),
                                                                );
                                                                v1 = TaggedVal::from(8i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        & v1.try_as_i32()?,
                                                                );
                                                                local_5 = v0.try_as_i32()?;
                                                                v1 = TaggedVal::from(local_0);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        | v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(local_4);
                                                                v2 = TaggedVal::from(local_5);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                local_0 = v1.try_as_i32()?;
                                                                v2 = TaggedVal::from(2i32);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                v2 = TaggedVal::from(4i32);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i32()?
                                                                        & v2.try_as_i32()?,
                                                                );
                                                                local_4 = v1.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        | v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(local_0);
                                                                v2 = TaggedVal::from(local_4);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                local_0 = v1.try_as_i32()?;
                                                                v2 = TaggedVal::from(1i32);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                v2 = TaggedVal::from(2i32);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i32()?
                                                                        & v2.try_as_i32()?,
                                                                );
                                                                local_4 = v1.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        | v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(local_0);
                                                                v2 = TaggedVal::from(local_4);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                local_0 = v1.try_as_i32()?;
                                                                v2 = TaggedVal::from(1i32);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                v2 = TaggedVal::from(1i32);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i32()?
                                                                        & v2.try_as_i32()?,
                                                                );
                                                                local_4 = v1.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        | v1.try_as_i32()?,
                                                                );
                                                                v1 = TaggedVal::from(local_0);
                                                                v2 = TaggedVal::from(local_4);
                                                                v1 = TaggedVal::from(
                                                                    (v1.try_as_i32()? as u32)
                                                                        >> (v2.try_as_i32()? % 32),
                                                                );
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?.wrapping_add(
                                                                        v1.try_as_i32()?,
                                                                    ),
                                                                );
                                                                v1 = TaggedVal::from(2i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?
                                                                        << (v1.try_as_i32()? % 32),
                                                                );
                                                                v1 = TaggedVal::from(1058668i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?.wrapping_add(
                                                                        v1.try_as_i32()?,
                                                                    ),
                                                                );
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 0) as usize,
                                                                )?);
                                                                local_0 = v0.try_as_i32()?;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_29;
                                                            }
                                                            break;
                                                        }
                                                        'label_36: loop {
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                            )?);
                                                            v1 = TaggedVal::from(-8i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    & v1.try_as_i32()?,
                                                            );
                                                            v1 = TaggedVal::from(local_3);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_sub(v1.try_as_i32()?),
                                                            );
                                                            local_2 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_6);
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    < (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            local_5 = v0.try_as_i32()?;
                                                            'label_37: loop {
                                                                v0 = TaggedVal::from(local_0);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 16)
                                                                        as usize,
                                                                )?);
                                                                local_4 = v0.try_as_i32()?;
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_37;
                                                                }
                                                                v0 = TaggedVal::from(local_0);
                                                                v1 = TaggedVal::from(20i32);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i32()?.wrapping_add(
                                                                        v1.try_as_i32()?,
                                                                    ),
                                                                );
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 0) as usize,
                                                                )?);
                                                                local_4 = v0.try_as_i32()?;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_2);
                                                            v1 = TaggedVal::from(local_6);
                                                            v2 = TaggedVal::from(local_5);
                                                            if ValType::from(v0)
                                                                != ValType::from(v1)
                                                            {
                                                                return None;
                                                            }
                                                            if v2.try_as_i32()? != 0 {
                                                                v0 = v0;
                                                            } else {
                                                                v0 = v1;
                                                            }
                                                            local_6 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_0);
                                                            v1 = TaggedVal::from(local_8);
                                                            v2 = TaggedVal::from(local_5);
                                                            if ValType::from(v0)
                                                                != ValType::from(v1)
                                                            {
                                                                return None;
                                                            }
                                                            if v2.try_as_i32()? != 0 {
                                                                v0 = v0;
                                                            } else {
                                                                v0 = v1;
                                                            }
                                                            local_8 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_4);
                                                            local_0 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_4);
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                continue 'label_36;
                                                            }
                                                            break;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_8);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_10;
                                                    }
                                                    v0 = TaggedVal::from(local_6);
                                                    v1 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v1.try_as_i32()? + 1058372) as usize,
                                                    )?);
                                                    v2 = TaggedVal::from(local_3);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_sub(v2.try_as_i32()?),
                                                    );
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            >= (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_10;
                                                    }
                                                    v0 = TaggedVal::from(local_8);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 24) as usize,
                                                    )?);
                                                    local_11 = v0.try_as_i32()?;
                                                    'label_38: loop {
                                                        v0 = TaggedVal::from(local_8);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 12) as usize,
                                                        )?);
                                                        local_5 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_8);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_38;
                                                        }
                                                        'label_39: loop {
                                                            v0 = TaggedVal::from(0i32);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 1058380)
                                                                    as usize,
                                                            )?);
                                                            v1 = TaggedVal::from(local_8);
                                                            v1 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v1.try_as_i32()? + 8) as usize,
                                                            )?);
                                                            local_0 = v1.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    > (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_39;
                                                            }
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 12) as usize,
                                                            )?);
                                                            v1 = TaggedVal::from(local_8);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    != v1.try_as_i32()?)
                                                                    as i32,
                                                            );

                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_5);
                                                        v1 = TaggedVal::from(local_0);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 8) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(local_5);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 12) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        {}
                                                        break 'label_2;
                                                        break;
                                                    }
                                                    'label_40: loop {
                                                        v0 = TaggedVal::from(local_8);
                                                        v1 = TaggedVal::from(20i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_4 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                        )?);
                                                        local_0 = v0.try_as_i32()?;
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_40;
                                                        }
                                                        v0 = TaggedVal::from(local_8);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 16) as usize,
                                                        )?);
                                                        local_0 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_8;
                                                        }
                                                        v0 = TaggedVal::from(local_8);
                                                        v1 = TaggedVal::from(16i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_4 = v0.try_as_i32()?;
                                                        break;
                                                    }
                                                    'label_41: loop {
                                                        v0 = TaggedVal::from(local_4);
                                                        local_2 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(local_0);
                                                        local_5 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(20i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_4 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                        )?);
                                                        local_0 = v0.try_as_i32()?;
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            continue 'label_41;
                                                        }
                                                        v0 = TaggedVal::from(local_5);
                                                        v1 = TaggedVal::from(16i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_4 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(local_5);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 16) as usize,
                                                        )?);
                                                        local_0 = v0.try_as_i32()?;
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            continue 'label_41;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_2);
                                                    v1 = TaggedVal::from(0i32);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    {}
                                                    break 'label_2;
                                                    break;
                                                }
                                                'label_42: loop {
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058372) as usize,
                                                    )?);
                                                    local_0 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_42;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058384) as usize,
                                                    )?);
                                                    local_4 = v0.try_as_i32()?;
                                                    'label_43: loop {
                                                        'label_44: loop {
                                                            v0 = TaggedVal::from(local_0);
                                                            v1 = TaggedVal::from(local_3);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_sub(v1.try_as_i32()?),
                                                            );
                                                            local_6 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(16i32);
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    < (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_44;
                                                            }
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_3);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_5 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_6);
                                                            v2 = TaggedVal::from(1i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    | v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(local_6);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 1058372)
                                                                    as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(local_5);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 1058384)
                                                                    as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            v1 = TaggedVal::from(local_6);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_3);
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    | v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 4) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_43;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(local_0);
                                                        v2 = TaggedVal::from(3i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? | v2.try_as_i32()?,
                                                        );
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 4) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(local_0);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_0 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v1.try_as_i32()? + 4) as usize,
                                                        )?);
                                                        v2 = TaggedVal::from(1i32);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? | v2.try_as_i32()?,
                                                        );
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 4) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(0i32);
                                                        v1 = TaggedVal::from(0i32);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 1058384) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(0i32);
                                                        v1 = TaggedVal::from(0i32);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 1058372) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(8i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_0 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                'label_45: loop {
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058376) as usize,
                                                    )?);
                                                    local_5 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            <= (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_45;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058388) as usize,
                                                    )?);
                                                    local_0 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_4 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_5);
                                                    v2 = TaggedVal::from(local_3);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_sub(v2.try_as_i32()?),
                                                    );
                                                    local_6 = v1.try_as_i32()?;
                                                    v2 = TaggedVal::from(1i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()? | v2.try_as_i32()?,
                                                    );
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 4) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(local_6);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058376) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(local_4);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058388) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(local_0);
                                                    v1 = TaggedVal::from(local_3);
                                                    v2 = TaggedVal::from(3i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()? | v2.try_as_i32()?,
                                                    );
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 4) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(local_0);
                                                    v1 = TaggedVal::from(8i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_0 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                'label_46: loop {
                                                    'label_47: loop {
                                                        v0 = TaggedVal::from(0i32);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 1058836) as usize,
                                                        )?);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_47;
                                                        }
                                                        v0 = TaggedVal::from(0i32);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 1058844) as usize,
                                                        )?);
                                                        local_4 = v0.try_as_i32()?;
                                                        {}
                                                        break 'label_46;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(-1i64);
                                                    write_mem_i64(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058848) as usize,
                                                        v1.try_as_i64()?,
                                                    )?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(281474976776192i64);
                                                    write_mem_i64(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058840) as usize,
                                                        v1.try_as_i64()?,
                                                    )?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(local_1);
                                                    v2 = TaggedVal::from(12i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    v2 = TaggedVal::from(-16i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()? & v2.try_as_i32()?,
                                                    );
                                                    v2 = TaggedVal::from(1431655768i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()? ^ v2.try_as_i32()?,
                                                    );
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058836) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(0i32);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058856) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(0i32);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058808) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(65536i32);
                                                    local_4 = v0.try_as_i32()?;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                local_0 = v0.try_as_i32()?;
                                                'label_48: loop {
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(local_3);
                                                    v2 = TaggedVal::from(71i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    local_7 = v1.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_2 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(0i32);
                                                    v2 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_sub(v2.try_as_i32()?),
                                                    );
                                                    local_11 = v1.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    local_8 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            > (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_48;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(48i32);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058860) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                'label_49: loop {
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058804) as usize,
                                                    )?);
                                                    local_0 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_49;
                                                    }
                                                    'label_50: loop {
                                                        v0 = TaggedVal::from(0i32);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 1058796) as usize,
                                                        )?);
                                                        local_4 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_8);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_6 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_4);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                <= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_50;
                                                        }
                                                        v0 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(local_0);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                <= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_49;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    local_0 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(48i32);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058860) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                v0 = TaggedVal::from(
                                                    read_mem_u8(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058808) as usize,
                                                    )
                                                    .and_then(|x| Some(x as i32))?,
                                                );
                                                v1 = TaggedVal::from(4i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_5;
                                                }
                                                'label_51: loop {
                                                    'label_52: loop {
                                                        'label_53: loop {
                                                            v0 = TaggedVal::from(0i32);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 1058388)
                                                                    as usize,
                                                            )?);
                                                            local_4 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_53;
                                                            }
                                                            v0 = TaggedVal::from(1058812i32);
                                                            local_0 = v0.try_as_i32()?;
                                                            'label_54: loop {
                                                                'label_55: loop {
                                                                    v0 = TaggedVal::from(local_0);
                                                                    v0 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    local_6 = v0.try_as_i32()?;
                                                                    v1 = TaggedVal::from(local_4);
                                                                    v0 = TaggedVal::from(
                                                                        ((v0.try_as_i32()? as u32)
                                                                            > (v1.try_as_i32()?
                                                                                as u32))
                                                                            as i32,
                                                                    );
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_55;
                                                                    }
                                                                    v0 = TaggedVal::from(local_6);
                                                                    v1 = TaggedVal::from(local_0);
                                                                    v1 = TaggedVal::from(
                                                                        read_mem_i32(
                                                                            &self.memory,
                                                                            (v1.try_as_i32()? + 4)
                                                                                as usize,
                                                                        )?,
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i32()?
                                                                            .wrapping_add(
                                                                                v1.try_as_i32()?,
                                                                            ),
                                                                    );
                                                                    v1 = TaggedVal::from(local_4);
                                                                    v0 = TaggedVal::from(
                                                                        ((v0.try_as_i32()? as u32)
                                                                            > (v1.try_as_i32()?
                                                                                as u32))
                                                                            as i32,
                                                                    );
                                                                    if v0.try_as_i32()? != 0 {
                                                                        {}
                                                                        break 'label_52;
                                                                    }
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(local_0);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 8) as usize,
                                                                )?);
                                                                local_0 = v0.try_as_i32()?;
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    continue 'label_54;
                                                                }
                                                                break;
                                                            }
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(0i32);
                                                        v0 = TaggedVal::from(
                                                            self.func_156(v0.try_as_i32()?)?,
                                                        );
                                                        local_5 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(-1i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_6;
                                                        }
                                                        v0 = TaggedVal::from(local_8);
                                                        local_2 = v0.try_as_i32()?;
                                                        'label_56: loop {
                                                            v0 = TaggedVal::from(0i32);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 1058840)
                                                                    as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(-1i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    & v1.try_as_i32()?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_56;
                                                            }
                                                            v0 = TaggedVal::from(local_8);
                                                            v1 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_sub(v1.try_as_i32()?),
                                                            );
                                                            v1 = TaggedVal::from(local_4);
                                                            v2 = TaggedVal::from(local_5);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    .wrapping_add(v2.try_as_i32()?),
                                                            );
                                                            v2 = TaggedVal::from(0i32);
                                                            v3 = TaggedVal::from(local_0);
                                                            v2 = TaggedVal::from(
                                                                v2.try_as_i32()?
                                                                    .wrapping_sub(v3.try_as_i32()?),
                                                            );
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    & v2.try_as_i32()?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_2 = v0.try_as_i32()?;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_2);
                                                        v1 = TaggedVal::from(local_3);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                <= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_6;
                                                        }
                                                        v0 = TaggedVal::from(local_2);
                                                        v1 = TaggedVal::from(2147483646i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_6;
                                                        }
                                                        'label_57: loop {
                                                            v0 = TaggedVal::from(0i32);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 1058804)
                                                                    as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? == 0) as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_57;
                                                            }
                                                            v0 = TaggedVal::from(0i32);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 1058796)
                                                                    as usize,
                                                            )?);
                                                            local_4 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_2);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_6 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_4);
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    <= (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_6;
                                                            }
                                                            v0 = TaggedVal::from(local_6);
                                                            v1 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    > (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_6;
                                                            }
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_2);
                                                        v0 = TaggedVal::from(
                                                            self.func_156(v0.try_as_i32()?)?,
                                                        );
                                                        local_0 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_5);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? != v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_51;
                                                        }
                                                        {}
                                                        break 'label_4;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_2);
                                                    v1 = TaggedVal::from(local_5);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_sub(v1.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(local_11);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    local_2 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(2147483646i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            > (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_6;
                                                    }
                                                    v0 = TaggedVal::from(local_2);
                                                    v0 = TaggedVal::from(
                                                        self.func_156(v0.try_as_i32()?)?,
                                                    );
                                                    local_5 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_0);
                                                    v1 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v1.try_as_i32()? + 0) as usize,
                                                    )?);
                                                    v2 = TaggedVal::from(local_0);
                                                    v2 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v2.try_as_i32()? + 4) as usize,
                                                    )?);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == v1.try_as_i32()?)
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_7;
                                                    }
                                                    v0 = TaggedVal::from(local_5);
                                                    local_0 = v0.try_as_i32()?;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                local_5 = v0.try_as_i32()?;
                                                'label_58: loop {
                                                    v0 = TaggedVal::from(local_3);
                                                    v1 = TaggedVal::from(72i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(local_2);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            <= (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_58;
                                                    }
                                                    v0 = TaggedVal::from(local_2);
                                                    v1 = TaggedVal::from(2147483646i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            > (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_58;
                                                    }
                                                    v0 = TaggedVal::from(local_5);
                                                    v1 = TaggedVal::from(-1i32);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == v1.try_as_i32()?)
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_58;
                                                    }
                                                    v0 = TaggedVal::from(local_7);
                                                    v1 = TaggedVal::from(local_2);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_sub(v1.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v1.try_as_i32()? + 1058844) as usize,
                                                    )?);
                                                    local_0 = v1.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(0i32);
                                                    v2 = TaggedVal::from(local_0);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_sub(v2.try_as_i32()?),
                                                    );
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    local_0 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(2147483646i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            > (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_4;
                                                    }
                                                    'label_59: loop {
                                                        v0 = TaggedVal::from(local_0);
                                                        v0 = TaggedVal::from(
                                                            self.func_156(v0.try_as_i32()?)?,
                                                        );
                                                        v1 = TaggedVal::from(-1i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_59;
                                                        }
                                                        v0 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(local_2);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_2 = v0.try_as_i32()?;
                                                        {}
                                                        break 'label_4;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(local_2);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_sub(v1.try_as_i32()?),
                                                    );
                                                    v0 = TaggedVal::from(
                                                        self.func_156(v0.try_as_i32()?)?,
                                                    );

                                                    {}
                                                    break 'label_6;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_5);
                                                v1 = TaggedVal::from(-1i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_4;
                                                }
                                                {}
                                                break 'label_6;
                                                break;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            local_8 = v0.try_as_i32()?;
                                            {}
                                            break 'label_1;
                                            break;
                                        }
                                        v0 = TaggedVal::from(0i32);
                                        local_5 = v0.try_as_i32()?;
                                        {}
                                        break 'label_2;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_5);
                                    v1 = TaggedVal::from(-1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_4;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058808) as usize,
                                )?);
                                v2 = TaggedVal::from(4i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058808) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                break;
                            }
                            v0 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(2147483646i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_8);
                            v0 = TaggedVal::from(self.func_156(v0.try_as_i32()?)?);
                            local_5 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(self.func_156(v1.try_as_i32()?)?);
                            local_0 = v1.try_as_i32()?;
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(56i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058796) as usize,
                        )?);
                        v2 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_0 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058796) as usize,
                            v1.try_as_i32()?,
                        )?;
                        'label_60: loop {
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058800) as usize,
                            )?);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_60;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(local_0);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058800) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        'label_61: loop {
                            'label_62: loop {
                                'label_63: loop {
                                    'label_64: loop {
                                        v0 = TaggedVal::from(0i32);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 1058388) as usize,
                                        )?);
                                        local_4 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_64;
                                        }
                                        v0 = TaggedVal::from(1058812i32);
                                        local_0 = v0.try_as_i32()?;
                                        'label_65: loop {
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 0) as usize,
                                            )?);
                                            local_6 = v1.try_as_i32()?;
                                            v2 = TaggedVal::from(local_0);
                                            v2 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v2.try_as_i32()? + 4) as usize,
                                            )?);
                                            local_8 = v2.try_as_i32()?;
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_63;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                            )?);
                                            local_0 = v0.try_as_i32()?;
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_65;
                                            }
                                            {}
                                            break 'label_62;
                                            break;
                                        }
                                        break;
                                    }
                                    'label_66: loop {
                                        'label_67: loop {
                                            v0 = TaggedVal::from(0i32);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1058380) as usize,
                                            )?);
                                            local_0 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_67;
                                            }
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(local_0);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_66;
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(local_5);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058380) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(0i32);
                                    local_0 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_2);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058816) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_5);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058812) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(-1i32);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058396) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 1058836) as usize,
                                    )?);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058400) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058824) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    'label_68: loop {
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(1058412i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(local_0);
                                        v2 = TaggedVal::from(1058404i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        local_4 = v1.try_as_i32()?;
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(1058416i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(local_4);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(8i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_0 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(256i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            continue 'label_68;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_5);
                                    v1 = TaggedVal::from(-8i32);
                                    v2 = TaggedVal::from(local_5);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                    );
                                    v2 = TaggedVal::from(15i32);
                                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                    v2 = TaggedVal::from(0i32);
                                    v3 = TaggedVal::from(local_5);
                                    v4 = TaggedVal::from(8i32);
                                    v3 = TaggedVal::from(
                                        v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?),
                                    );
                                    v4 = TaggedVal::from(15i32);
                                    v3 = TaggedVal::from(v3.try_as_i32()? & v4.try_as_i32()?);
                                    if ValType::from(v1) != ValType::from(v2) {
                                        return None;
                                    }
                                    if v3.try_as_i32()? != 0 {
                                        v1 = v1;
                                    } else {
                                        v1 = v2;
                                    }
                                    local_0 = v1.try_as_i32()?;
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_4 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(local_2);
                                    v2 = TaggedVal::from(-56i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    local_6 = v1.try_as_i32()?;
                                    v2 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                    );
                                    local_0 = v1.try_as_i32()?;
                                    v2 = TaggedVal::from(1i32);
                                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 1058852) as usize,
                                    )?);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058392) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_0);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058376) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_4);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058388) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_5);
                                    v1 = TaggedVal::from(local_6);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(56i32);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 4) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    {}
                                    break 'label_61;
                                    break;
                                }
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 12) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v1 = TaggedVal::from(8i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_62;
                                }
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_62;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_62;
                                }
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(-8i32);
                                v2 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                );
                                v2 = TaggedVal::from(15i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                v2 = TaggedVal::from(0i32);
                                v3 = TaggedVal::from(local_4);
                                v4 = TaggedVal::from(8i32);
                                v3 = TaggedVal::from(
                                    v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?),
                                );
                                v4 = TaggedVal::from(15i32);
                                v3 = TaggedVal::from(v3.try_as_i32()? & v4.try_as_i32()?);
                                if ValType::from(v1) != ValType::from(v2) {
                                    return None;
                                }
                                if v3.try_as_i32()? != 0 {
                                    v1 = v1;
                                } else {
                                    v1 = v2;
                                }
                                local_6 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058376) as usize,
                                )?);
                                v2 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                local_11 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                );
                                local_6 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(1i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_8);
                                v2 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058852) as usize,
                                )?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058392) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_6);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058376) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_5);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058388) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_11);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(56i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_61;
                                break;
                            }
                            'label_69: loop {
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058380) as usize,
                                )?);
                                local_8 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_69;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_5);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058380) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_5);
                                local_8 = v0.try_as_i32()?;
                                break;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(1058812i32);
                            local_0 = v0.try_as_i32()?;
                            'label_70: loop {
                                'label_71: loop {
                                    'label_72: loop {
                                        'label_73: loop {
                                            'label_74: loop {
                                                'label_75: loop {
                                                    'label_76: loop {
                                                        'label_77: loop {
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            v1 = TaggedVal::from(local_6);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    == v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_76;
                                                            }
                                                            v0 = TaggedVal::from(local_0);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 8) as usize,
                                                            )?);
                                                            local_0 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                continue 'label_77;
                                                            }
                                                            {}
                                                            break 'label_75;
                                                            break;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_0);
                                                    v0 = TaggedVal::from(
                                                        read_mem_u8(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 12) as usize,
                                                        )
                                                        .and_then(|x| Some(x as i32))?,
                                                    );
                                                    v1 = TaggedVal::from(8i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_74;
                                                    }
                                                    break;
                                                }
                                                v0 = TaggedVal::from(1058812i32);
                                                local_0 = v0.try_as_i32()?;
                                                'label_78: loop {
                                                    'label_79: loop {
                                                        v0 = TaggedVal::from(local_0);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                        )?);
                                                        local_6 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_4);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_79;
                                                        }
                                                        v0 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(local_0);
                                                        v1 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v1.try_as_i32()? + 4) as usize,
                                                        )?);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_6 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_4);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_73;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_0);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 8) as usize,
                                                    )?);
                                                    local_0 = v0.try_as_i32()?;
                                                    {}
                                                    continue 'label_78;
                                                    break;
                                                }
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_5);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 4) as usize,
                                            )?);
                                            v2 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 4) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(-8i32);
                                            v2 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(15i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            v2 = TaggedVal::from(0i32);
                                            v3 = TaggedVal::from(local_5);
                                            v4 = TaggedVal::from(8i32);
                                            v3 = TaggedVal::from(
                                                v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?),
                                            );
                                            v4 = TaggedVal::from(15i32);
                                            v3 = TaggedVal::from(
                                                v3.try_as_i32()? & v4.try_as_i32()?,
                                            );
                                            if ValType::from(v1) != ValType::from(v2) {
                                                return None;
                                            }
                                            if v3.try_as_i32()? != 0 {
                                                v1 = v1;
                                            } else {
                                                v1 = v2;
                                            }
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_11 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_3);
                                            v2 = TaggedVal::from(3i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? | v2.try_as_i32()?,
                                            );
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 4) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(-8i32);
                                            v2 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(15i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            v2 = TaggedVal::from(0i32);
                                            v3 = TaggedVal::from(local_6);
                                            v4 = TaggedVal::from(8i32);
                                            v3 = TaggedVal::from(
                                                v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?),
                                            );
                                            v4 = TaggedVal::from(15i32);
                                            v3 = TaggedVal::from(
                                                v3.try_as_i32()? & v4.try_as_i32()?,
                                            );
                                            if ValType::from(v1) != ValType::from(v2) {
                                                return None;
                                            }
                                            if v3.try_as_i32()? != 0 {
                                                v1 = v1;
                                            } else {
                                                v1 = v2;
                                            }
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_5 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_11);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(local_3);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_11);
                                            v1 = TaggedVal::from(local_3);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            'label_80: loop {
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(local_5);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_80;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 1058388) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 1058376) as usize,
                                                )?);
                                                v2 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                                );
                                                local_0 = v1.try_as_i32()?;
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 1058376) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_0);
                                                v2 = TaggedVal::from(1i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? | v2.try_as_i32()?,
                                                );
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 4) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                {}
                                                break 'label_71;
                                                break;
                                            }
                                            'label_81: loop {
                                                v0 = TaggedVal::from(0i32);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 1058384) as usize,
                                                )?);
                                                v1 = TaggedVal::from(local_5);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_81;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 1058384) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v1.try_as_i32()? + 1058372) as usize,
                                                )?);
                                                v2 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                                );
                                                local_0 = v1.try_as_i32()?;
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 1058372) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_0);
                                                v2 = TaggedVal::from(1i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? | v2.try_as_i32()?,
                                                );
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 4) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_0);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(local_0);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                {}
                                                break 'label_71;
                                                break;
                                            }
                                            'label_82: loop {
                                                v0 = TaggedVal::from(local_5);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 4) as usize,
                                                )?);
                                                local_4 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(3i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_82;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(-8i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                local_7 = v0.try_as_i32()?;
                                                'label_83: loop {
                                                    'label_84: loop {
                                                        v0 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(255i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_84;
                                                        }
                                                        v0 = TaggedVal::from(local_5);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 12) as usize,
                                                        )?);
                                                        local_3 = v0.try_as_i32()?;
                                                        'label_85: loop {
                                                            v0 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 8) as usize,
                                                            )?);
                                                            local_2 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_4);
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                (v1.try_as_i32()? as u32)
                                                                    >> (v2.try_as_i32()? % 32),
                                                            );
                                                            local_9 = v1.try_as_i32()?;
                                                            v2 = TaggedVal::from(3i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    << (v2.try_as_i32()? % 32),
                                                            );
                                                            v2 = TaggedVal::from(1058404i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    .wrapping_add(v2.try_as_i32()?),
                                                            );
                                                            local_4 = v1.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    == v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_85;
                                                            }
                                                            v0 = TaggedVal::from(local_8);
                                                            v1 = TaggedVal::from(local_2);
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    > (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );

                                                            break;
                                                        }
                                                        'label_86: loop {
                                                            v0 = TaggedVal::from(local_3);
                                                            v1 = TaggedVal::from(local_2);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    != v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_86;
                                                            }
                                                            v0 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v1.try_as_i32()? + 1058364)
                                                                    as usize,
                                                            )?);
                                                            v2 = TaggedVal::from(-2i32);
                                                            v3 = TaggedVal::from(local_9);
                                                            v2 = TaggedVal::from(
                                                                v2.try_as_i32()?.rotate_left(
                                                                    v3.try_as_i32()? as u32,
                                                                ),
                                                            );
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    & v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 1058364)
                                                                    as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_83;
                                                            break;
                                                        }
                                                        'label_87: loop {
                                                            v0 = TaggedVal::from(local_3);
                                                            v1 = TaggedVal::from(local_4);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    == v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_87;
                                                            }
                                                            v0 = TaggedVal::from(local_8);
                                                            v1 = TaggedVal::from(local_3);
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    > (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );

                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_3);
                                                        v1 = TaggedVal::from(local_2);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 8) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(local_2);
                                                        v1 = TaggedVal::from(local_3);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 12) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        {}
                                                        break 'label_83;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_5);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 24) as usize,
                                                    )?);
                                                    local_9 = v0.try_as_i32()?;
                                                    'label_88: loop {
                                                        'label_89: loop {
                                                            v0 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 12) as usize,
                                                            )?);
                                                            local_2 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    == v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_89;
                                                            }
                                                            'label_90: loop {
                                                                v0 = TaggedVal::from(local_8);
                                                                v1 = TaggedVal::from(local_5);
                                                                v1 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v1.try_as_i32()? + 8) as usize,
                                                                )?);
                                                                local_4 = v1.try_as_i32()?;
                                                                v0 = TaggedVal::from(
                                                                    ((v0.try_as_i32()? as u32)
                                                                        > (v1.try_as_i32()? as u32))
                                                                        as i32,
                                                                );
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_90;
                                                                }
                                                                v0 = TaggedVal::from(local_4);
                                                                v0 = TaggedVal::from(read_mem_i32(
                                                                    &self.memory,
                                                                    (v0.try_as_i32()? + 12)
                                                                        as usize,
                                                                )?);
                                                                v1 = TaggedVal::from(local_5);
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()?
                                                                        != v1.try_as_i32()?)
                                                                        as i32,
                                                                );

                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_2);
                                                            v1 = TaggedVal::from(local_4);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 8) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_2);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 12) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_88;
                                                            break;
                                                        }
                                                        'label_91: loop {
                                                            v0 = TaggedVal::from(local_5);
                                                            v1 = TaggedVal::from(20i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            local_3 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_91;
                                                            }
                                                            v0 = TaggedVal::from(local_5);
                                                            v1 = TaggedVal::from(16i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            local_3 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_91;
                                                            }
                                                            v0 = TaggedVal::from(0i32);
                                                            local_2 = v0.try_as_i32()?;
                                                            {}
                                                            break 'label_88;
                                                            break;
                                                        }
                                                        'label_92: loop {
                                                            v0 = TaggedVal::from(local_4);
                                                            local_8 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_3);
                                                            local_2 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(20i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            local_3 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                continue 'label_92;
                                                            }
                                                            v0 = TaggedVal::from(local_2);
                                                            v1 = TaggedVal::from(16i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(local_2);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 16) as usize,
                                                            )?);
                                                            local_3 = v0.try_as_i32()?;
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                continue 'label_92;
                                                            }
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_8);
                                                        v1 = TaggedVal::from(0i32);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_9);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_83;
                                                    }
                                                    'label_93: loop {
                                                        'label_94: loop {
                                                            v0 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 28) as usize,
                                                            )?);
                                                            local_3 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(2i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    << (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(1058668i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    .wrapping_add(v1.try_as_i32()?),
                                                            );
                                                            local_4 = v0.try_as_i32()?;
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                            )?);
                                                            v1 = TaggedVal::from(local_5);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    != v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_94;
                                                            }
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_2);
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 0) as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            v0 = TaggedVal::from(local_2);
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_93;
                                                            }
                                                            v0 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(0i32);
                                                            v1 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v1.try_as_i32()? + 1058368)
                                                                    as usize,
                                                            )?);
                                                            v2 = TaggedVal::from(-2i32);
                                                            v3 = TaggedVal::from(local_3);
                                                            v2 = TaggedVal::from(
                                                                v2.try_as_i32()?.rotate_left(
                                                                    v3.try_as_i32()? as u32,
                                                                ),
                                                            );
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    & v2.try_as_i32()?,
                                                            );
                                                            write_mem_i32(
                                                                &mut self.memory,
                                                                (v0.try_as_i32()? + 1058368)
                                                                    as usize,
                                                                v1.try_as_i32()?,
                                                            )?;
                                                            {}
                                                            break 'label_83;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(16i32);
                                                        v2 = TaggedVal::from(20i32);
                                                        v3 = TaggedVal::from(local_9);
                                                        v3 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v3.try_as_i32()? + 16) as usize,
                                                        )?);
                                                        v4 = TaggedVal::from(local_5);
                                                        v3 = TaggedVal::from(
                                                            (v3.try_as_i32()? == v4.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if ValType::from(v1) != ValType::from(v2) {
                                                            return None;
                                                        }
                                                        if v3.try_as_i32()? != 0 {
                                                            v1 = v1;
                                                        } else {
                                                            v1 = v2;
                                                        }
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(local_2);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 0) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(local_2);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_83;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_2);
                                                    v1 = TaggedVal::from(local_9);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 24) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    'label_95: loop {
                                                        v0 = TaggedVal::from(local_5);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 16) as usize,
                                                        )?);
                                                        local_4 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_95;
                                                        }
                                                        v0 = TaggedVal::from(local_2);
                                                        v1 = TaggedVal::from(local_4);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 16) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(local_2);
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 24) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_5);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 20) as usize,
                                                    )?);
                                                    local_4 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_83;
                                                    }
                                                    v0 = TaggedVal::from(local_2);
                                                    v1 = TaggedVal::from(20i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(local_4);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(local_2);
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 24) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_7);
                                                v1 = TaggedVal::from(local_0);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_0 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_5);
                                                v1 = TaggedVal::from(local_7);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_5 = v0.try_as_i32()?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 4) as usize,
                                            )?);
                                            v2 = TaggedVal::from(-2i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 4) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_0);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(local_0);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_0);
                                            v2 = TaggedVal::from(1i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? | v2.try_as_i32()?,
                                            );
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 4) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            'label_96: loop {
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(255i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        > (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_96;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(3i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? as u32)
                                                        >> (v1.try_as_i32()? % 32),
                                                );
                                                local_4 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(3i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(1058404i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_0 = v0.try_as_i32()?;
                                                'label_97: loop {
                                                    'label_98: loop {
                                                        v0 = TaggedVal::from(0i32);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 1058364) as usize,
                                                        )?);
                                                        local_3 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(1i32);
                                                        v2 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()?
                                                                << (v2.try_as_i32()? % 32),
                                                        );
                                                        local_4 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_98;
                                                        }
                                                        v0 = TaggedVal::from(0i32);
                                                        v1 = TaggedVal::from(local_3);
                                                        v2 = TaggedVal::from(local_4);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()? | v2.try_as_i32()?,
                                                        );
                                                        write_mem_i32(
                                                            &mut self.memory,
                                                            (v0.try_as_i32()? + 1058364) as usize,
                                                            v1.try_as_i32()?,
                                                        )?;
                                                        v0 = TaggedVal::from(local_0);
                                                        local_4 = v0.try_as_i32()?;
                                                        {}
                                                        break 'label_97;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_0);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 8) as usize,
                                                    )?);
                                                    local_4 = v0.try_as_i32()?;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 12) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 8) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_0);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 12) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_4);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 8) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                {}
                                                break 'label_71;
                                                break;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            local_4 = v0.try_as_i32()?;
                                            'label_99: loop {
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(8i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? as u32)
                                                        >> (v1.try_as_i32()? % 32),
                                                );
                                                local_3 = v0.try_as_i32()?;
                                                v0 =
                                                    TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_99;
                                                }
                                                v0 = TaggedVal::from(31i32);
                                                local_4 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(16777215i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        > (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_99;
                                                }
                                                v0 = TaggedVal::from(local_3);
                                                v1 = TaggedVal::from(local_3);
                                                v2 = TaggedVal::from(1048320i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                                );
                                                v2 = TaggedVal::from(16i32);
                                                v1 = TaggedVal::from(
                                                    (v1.try_as_i32()? as u32)
                                                        >> (v2.try_as_i32()? % 32),
                                                );
                                                v2 = TaggedVal::from(8i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? & v2.try_as_i32()?,
                                                );
                                                local_4 = v1.try_as_i32()?;
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                local_3 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(local_3);
                                                v2 = TaggedVal::from(520192i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                                );
                                                v2 = TaggedVal::from(16i32);
                                                v1 = TaggedVal::from(
                                                    (v1.try_as_i32()? as u32)
                                                        >> (v2.try_as_i32()? % 32),
                                                );
                                                v2 = TaggedVal::from(4i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? & v2.try_as_i32()?,
                                                );
                                                local_3 = v1.try_as_i32()?;
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                local_5 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(local_5);
                                                v2 = TaggedVal::from(245760i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                                );
                                                v2 = TaggedVal::from(16i32);
                                                v1 = TaggedVal::from(
                                                    (v1.try_as_i32()? as u32)
                                                        >> (v2.try_as_i32()? % 32),
                                                );
                                                v2 = TaggedVal::from(2i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? & v2.try_as_i32()?,
                                                );
                                                local_5 = v1.try_as_i32()?;
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(15i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? as u32)
                                                        >> (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(local_3);
                                                v2 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? | v2.try_as_i32()?,
                                                );
                                                v2 = TaggedVal::from(local_5);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? | v2.try_as_i32()?,
                                                );
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                                );
                                                local_4 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(local_0);
                                                v2 = TaggedVal::from(local_4);
                                                v3 = TaggedVal::from(21i32);
                                                v2 = TaggedVal::from(
                                                    v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(
                                                    (v1.try_as_i32()? as u32)
                                                        >> (v2.try_as_i32()? % 32),
                                                );
                                                v2 = TaggedVal::from(1i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? & v2.try_as_i32()?,
                                                );
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? | v1.try_as_i32()?,
                                                );
                                                v1 = TaggedVal::from(28i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_4 = v0.try_as_i32()?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_4);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 28) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(0i64);
                                            write_mem_i64(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 16) as usize,
                                                v1.try_as_i64()?,
                                            )?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            v1 = TaggedVal::from(1058668i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_3 = v0.try_as_i32()?;
                                            'label_100: loop {
                                                v0 = TaggedVal::from(0i32);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 1058368) as usize,
                                                )?);
                                                local_5 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(1i32);
                                                v2 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                                );
                                                local_8 = v1.try_as_i32()?;
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_100;
                                                }
                                                v0 = TaggedVal::from(local_3);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(0i32);
                                                v1 = TaggedVal::from(local_5);
                                                v2 = TaggedVal::from(local_8);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? | v2.try_as_i32()?,
                                                );
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 1058368) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_3);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 24) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 8) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(local_6);
                                                write_mem_i32(
                                                    &mut self.memory,
                                                    (v0.try_as_i32()? + 12) as usize,
                                                    v1.try_as_i32()?,
                                                )?;
                                                {}
                                                break 'label_71;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(0i32);
                                            v2 = TaggedVal::from(25i32);
                                            v3 = TaggedVal::from(local_4);
                                            v4 = TaggedVal::from(1i32);
                                            v3 = TaggedVal::from(
                                                (v3.try_as_i32()? as u32)
                                                    >> (v4.try_as_i32()? % 32),
                                            );
                                            v2 = TaggedVal::from(
                                                v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?),
                                            );
                                            v3 = TaggedVal::from(local_4);
                                            v4 = TaggedVal::from(31i32);
                                            v3 = TaggedVal::from(
                                                (v3.try_as_i32()? == v4.try_as_i32()?) as i32,
                                            );
                                            if ValType::from(v1) != ValType::from(v2) {
                                                return None;
                                            }
                                            if v3.try_as_i32()? != 0 {
                                                v1 = v1;
                                            } else {
                                                v1 = v2;
                                            }
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            local_4 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_3);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            local_5 = v0.try_as_i32()?;
                                            'label_101: loop {
                                                v0 = TaggedVal::from(local_5);
                                                local_3 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 4) as usize,
                                                )?);
                                                v1 = TaggedVal::from(-8i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                v1 = TaggedVal::from(local_0);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_72;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(29i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? as u32)
                                                        >> (v1.try_as_i32()? % 32),
                                                );
                                                local_5 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                local_4 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_3);
                                                v1 = TaggedVal::from(local_5);
                                                v2 = TaggedVal::from(4i32);
                                                v1 = TaggedVal::from(
                                                    v1.try_as_i32()? & v2.try_as_i32()?,
                                                );
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(16i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_8 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )?);
                                                local_5 = v0.try_as_i32()?;
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    continue 'label_101;
                                                }
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_8);
                                            v1 = TaggedVal::from(local_6);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_3);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 24) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_6);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 12) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_6);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            {}
                                            break 'label_71;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(-8i32);
                                        v2 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                        );
                                        v2 = TaggedVal::from(15i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                        v2 = TaggedVal::from(0i32);
                                        v3 = TaggedVal::from(local_5);
                                        v4 = TaggedVal::from(8i32);
                                        v3 = TaggedVal::from(
                                            v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?),
                                        );
                                        v4 = TaggedVal::from(15i32);
                                        v3 = TaggedVal::from(v3.try_as_i32()? & v4.try_as_i32()?);
                                        if ValType::from(v1) != ValType::from(v2) {
                                            return None;
                                        }
                                        if v3.try_as_i32()? != 0 {
                                            v1 = v1;
                                        } else {
                                            v1 = v2;
                                        }
                                        local_0 = v1.try_as_i32()?;
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_11 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(local_2);
                                        v2 = TaggedVal::from(-56i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        local_8 = v1.try_as_i32()?;
                                        v2 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                        );
                                        local_0 = v1.try_as_i32()?;
                                        v2 = TaggedVal::from(1i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(local_8);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(56i32);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_6);
                                        v2 = TaggedVal::from(55i32);
                                        v3 = TaggedVal::from(local_6);
                                        v2 = TaggedVal::from(
                                            v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?),
                                        );
                                        v3 = TaggedVal::from(15i32);
                                        v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                                        v3 = TaggedVal::from(0i32);
                                        v4 = TaggedVal::from(local_6);
                                        v5 = TaggedVal::from(-55i32);
                                        v4 = TaggedVal::from(
                                            v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?),
                                        );
                                        v5 = TaggedVal::from(15i32);
                                        v4 = TaggedVal::from(v4.try_as_i32()? & v5.try_as_i32()?);
                                        if ValType::from(v2) != ValType::from(v3) {
                                            return None;
                                        }
                                        if v4.try_as_i32()? != 0 {
                                            v2 = v2;
                                        } else {
                                            v2 = v3;
                                        }
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        v2 = TaggedVal::from(-63i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        local_8 = v1.try_as_i32()?;
                                        v2 = TaggedVal::from(local_8);
                                        v3 = TaggedVal::from(local_4);
                                        v4 = TaggedVal::from(16i32);
                                        v3 = TaggedVal::from(
                                            v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?),
                                        );
                                        v2 = TaggedVal::from(
                                            ((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if ValType::from(v0) != ValType::from(v1) {
                                            return None;
                                        }
                                        if v2.try_as_i32()? != 0 {
                                            v0 = v0;
                                        } else {
                                            v0 = v1;
                                        }
                                        local_8 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(35i32);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 1058852) as usize,
                                        )?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058392) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(local_0);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058376) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(local_11);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058388) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(16i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(read_mem_i64(
                                            &self.memory,
                                            (v1.try_as_i32()? + 1058820) as usize,
                                        )?);
                                        write_mem_i64(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i64()?,
                                        )?;
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(read_mem_i64(
                                            &self.memory,
                                            (v1.try_as_i32()? + 1058812) as usize,
                                        )?);
                                        write_mem_i64(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                            v1.try_as_i64()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(local_8);
                                        v2 = TaggedVal::from(8i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058820) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(local_2);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058816) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(local_5);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058812) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(0i32);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 1058824) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(36i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_0 = v0.try_as_i32()?;
                                        'label_102: loop {
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(7i32);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(4i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_6);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    < (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_102;
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_61;
                                        }
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 4) as usize,
                                        )?);
                                        v2 = TaggedVal::from(-2i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(local_8);
                                        v2 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?),
                                        );
                                        local_2 = v1.try_as_i32()?;
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_2);
                                        v2 = TaggedVal::from(1i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 4) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        'label_103: loop {
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(255i32);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    > (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_103;
                                            }
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? as u32)
                                                    >> (v1.try_as_i32()? % 32),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            v1 = TaggedVal::from(1058404i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            'label_104: loop {
                                                'label_105: loop {
                                                    v0 = TaggedVal::from(0i32);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 1058364) as usize,
                                                    )?);
                                                    local_5 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(1i32);
                                                    v2 = TaggedVal::from(local_6);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                                    );
                                                    local_6 = v1.try_as_i32()?;
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_105;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    v1 = TaggedVal::from(local_5);
                                                    v2 = TaggedVal::from(local_6);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()? | v2.try_as_i32()?,
                                                    );
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 1058364) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(local_0);
                                                    local_6 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_104;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 8) as usize,
                                                )?);
                                                local_6 = v0.try_as_i32()?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_4);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 12) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_4);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(local_0);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 12) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(local_6);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            {}
                                            break 'label_61;
                                            break;
                                        }
                                        v0 = TaggedVal::from(0i32);
                                        local_0 = v0.try_as_i32()?;
                                        'label_106: loop {
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(8i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? as u32)
                                                    >> (v1.try_as_i32()? % 32),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_106;
                                            }
                                            v0 = TaggedVal::from(31i32);
                                            local_0 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(16777215i32);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    > (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_106;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_6);
                                            v2 = TaggedVal::from(1048320i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(16i32);
                                            v1 = TaggedVal::from(
                                                (v1.try_as_i32()? as u32)
                                                    >> (v2.try_as_i32()? % 32),
                                            );
                                            v2 = TaggedVal::from(8i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            local_0 = v1.try_as_i32()?;
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_6);
                                            v2 = TaggedVal::from(520192i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(16i32);
                                            v1 = TaggedVal::from(
                                                (v1.try_as_i32()? as u32)
                                                    >> (v2.try_as_i32()? % 32),
                                            );
                                            v2 = TaggedVal::from(4i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            local_6 = v1.try_as_i32()?;
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            local_5 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_5);
                                            v2 = TaggedVal::from(245760i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(16i32);
                                            v1 = TaggedVal::from(
                                                (v1.try_as_i32()? as u32)
                                                    >> (v2.try_as_i32()? % 32),
                                            );
                                            v2 = TaggedVal::from(2i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            local_5 = v1.try_as_i32()?;
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            v1 = TaggedVal::from(15i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? as u32)
                                                    >> (v1.try_as_i32()? % 32),
                                            );
                                            v1 = TaggedVal::from(local_6);
                                            v2 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? | v2.try_as_i32()?,
                                            );
                                            v2 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? | v2.try_as_i32()?,
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            v1 = TaggedVal::from(local_2);
                                            v2 = TaggedVal::from(local_0);
                                            v3 = TaggedVal::from(21i32);
                                            v2 = TaggedVal::from(
                                                v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(
                                                (v1.try_as_i32()? as u32)
                                                    >> (v2.try_as_i32()? % 32),
                                            );
                                            v2 = TaggedVal::from(1i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? | v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(28i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(0i64);
                                        write_mem_i64(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 16) as usize,
                                            v1.try_as_i64()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(28i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(local_0);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(2i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                        );
                                        v1 = TaggedVal::from(1058668i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_6 = v0.try_as_i32()?;
                                        'label_107: loop {
                                            v0 = TaggedVal::from(0i32);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1058368) as usize,
                                            )?);
                                            local_5 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(1i32);
                                            v2 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                            );
                                            local_8 = v1.try_as_i32()?;
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_107;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_4);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(0i32);
                                            v1 = TaggedVal::from(local_5);
                                            v2 = TaggedVal::from(local_8);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? | v2.try_as_i32()?,
                                            );
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 1058368) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(24i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(local_6);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(local_4);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 8) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(local_4);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 12) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            {}
                                            break 'label_61;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(0i32);
                                        v2 = TaggedVal::from(25i32);
                                        v3 = TaggedVal::from(local_0);
                                        v4 = TaggedVal::from(1i32);
                                        v3 = TaggedVal::from(
                                            (v3.try_as_i32()? as u32) >> (v4.try_as_i32()? % 32),
                                        );
                                        v2 = TaggedVal::from(
                                            v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?),
                                        );
                                        v3 = TaggedVal::from(local_0);
                                        v4 = TaggedVal::from(31i32);
                                        v3 = TaggedVal::from(
                                            (v3.try_as_i32()? == v4.try_as_i32()?) as i32,
                                        );
                                        if ValType::from(v1) != ValType::from(v2) {
                                            return None;
                                        }
                                        if v3.try_as_i32()? != 0 {
                                            v1 = v1;
                                        } else {
                                            v1 = v2;
                                        }
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                        );
                                        local_0 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_6);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_5 = v0.try_as_i32()?;
                                        'label_108: loop {
                                            v0 = TaggedVal::from(local_5);
                                            local_6 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 4) as usize,
                                            )?);
                                            v1 = TaggedVal::from(-8i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_70;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(29i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? as u32)
                                                    >> (v1.try_as_i32()? % 32),
                                            );
                                            local_5 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(local_5);
                                            v2 = TaggedVal::from(4i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? & v2.try_as_i32()?,
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v1 = TaggedVal::from(16i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_8 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            local_5 = v0.try_as_i32()?;
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_108;
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(local_4);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(24i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(local_6);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_4);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 12) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_4);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        {}
                                        break 'label_61;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                    )?);
                                    local_0 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(local_6);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(local_6);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_6);
                                    v1 = TaggedVal::from(0i32);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 24) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_6);
                                    v1 = TaggedVal::from(local_0);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_6);
                                    v1 = TaggedVal::from(local_3);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_11);
                                v1 = TaggedVal::from(8i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_0 = v0.try_as_i32()?;
                                {}
                                break 'label_0;
                                break;
                            }
                            v0 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_0 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(24i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_0);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_6);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058376) as usize,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058388) as usize,
                        )?);
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_6 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                        local_0 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058376) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058388) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(3i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        {}
                        break 'label_0;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(48i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058860) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_0;
                    break;
                }
                'label_109: loop {
                    v0 = TaggedVal::from(local_11);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_109;
                    }
                    'label_110: loop {
                        'label_111: loop {
                            v0 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 28) as usize,
                            )?);
                            local_4 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(2i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(1058668i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_0 = v1.try_as_i32()?;
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_111;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_5);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_110;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(local_7);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            local_7 = v1.try_as_i32()?;
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058368) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_109;
                            break;
                        }
                        v0 = TaggedVal::from(local_11);
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(20i32);
                        v3 = TaggedVal::from(local_11);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 16) as usize,
                        )?);
                        v4 = TaggedVal::from(local_8);
                        v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                        if ValType::from(v1) != ValType::from(v2) {
                            return None;
                        }
                        if v3.try_as_i32()? != 0 {
                            v1 = v1;
                        } else {
                            v1 = v2;
                        }
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_109;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_11);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    'label_112: loop {
                        v0 = TaggedVal::from(local_8);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_112;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_8);
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_109;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                'label_113: loop {
                    'label_114: loop {
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(15i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_114;
                        }
                        v0 = TaggedVal::from(local_8);
                        v1 = TaggedVal::from(local_6);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_0 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(3i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_8);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_113;
                        break;
                    }
                    v0 = TaggedVal::from(local_8);
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_5 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_6);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_8);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(3i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_6);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_6);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    'label_115: loop {
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_115;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(1058404i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        'label_116: loop {
                            'label_117: loop {
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058364) as usize,
                                )?);
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(1i32);
                                v2 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                local_4 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_117;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_6);
                                v2 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058364) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_0);
                                local_4 = v0.try_as_i32()?;
                                {}
                                break 'label_116;
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_4);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_113;
                        break;
                    }
                    'label_118: loop {
                        'label_119: loop {
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(
                                (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                            );
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_119;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_0 = v0.try_as_i32()?;
                            {}
                            break 'label_118;
                            break;
                        }
                        v0 = TaggedVal::from(31i32);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(16777215i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_118;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(1048320i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        local_0 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(520192i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        local_4 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        local_3 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(245760i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(2i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        local_3 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(15i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(local_6);
                        v2 = TaggedVal::from(local_0);
                        v3 = TaggedVal::from(21i32);
                        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                        v1 = TaggedVal::from(28i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 28) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(0i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 16) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    v1 = TaggedVal::from(1058668i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_4 = v0.try_as_i32()?;
                    'label_120: loop {
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(1i32);
                        v2 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        local_3 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_120;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_7);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058368) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_4);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_113;
                        break;
                    }
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(0i32);
                    v2 = TaggedVal::from(25i32);
                    v3 = TaggedVal::from(local_0);
                    v4 = TaggedVal::from(1i32);
                    v3 = TaggedVal::from((v3.try_as_i32()? as u32) >> (v4.try_as_i32()? % 32));
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
                    v3 = TaggedVal::from(local_0);
                    v4 = TaggedVal::from(31i32);
                    v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                    if ValType::from(v1) != ValType::from(v2) {
                        return None;
                    }
                    if v3.try_as_i32()? != 0 {
                        v1 = v1;
                    } else {
                        v1 = v2;
                    }
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    'label_121: loop {
                        'label_122: loop {
                            v0 = TaggedVal::from(local_3);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            v1 = TaggedVal::from(-8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_121;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(29i32);
                            v0 = TaggedVal::from(
                                (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                            );
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                            local_0 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(4i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_122;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_4);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_113;
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(0i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_4);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                v0 = TaggedVal::from(local_8);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_0 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            'label_123: loop {
                v0 = TaggedVal::from(local_10);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_123;
                }
                'label_124: loop {
                    'label_125: loop {
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 28) as usize,
                        )?);
                        local_6 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(2i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(1058668i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_0 = v1.try_as_i32()?;
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_125;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_8);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_8);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_124;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_9);
                        v2 = TaggedVal::from(-2i32);
                        v3 = TaggedVal::from(local_6);
                        v2 = TaggedVal::from(v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32));
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058368) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_123;
                        break;
                    }
                    v0 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(16i32);
                    v2 = TaggedVal::from(20i32);
                    v3 = TaggedVal::from(local_10);
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 16) as usize,
                    )?);
                    v4 = TaggedVal::from(local_5);
                    v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                    if ValType::from(v1) != ValType::from(v2) {
                        return None;
                    }
                    if v3.try_as_i32()? != 0 {
                        v1 = v1;
                    } else {
                        v1 = v2;
                    }
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_8);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_8);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_123;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_8);
                v1 = TaggedVal::from(local_10);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                    v1.try_as_i32()?,
                )?;
                'label_126: loop {
                    v0 = TaggedVal::from(local_5);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 16) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_126;
                    }
                    v0 = TaggedVal::from(local_8);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 16) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_8);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(20i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_123;
                }
                v0 = TaggedVal::from(local_8);
                v1 = TaggedVal::from(20i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_8);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                    v1.try_as_i32()?,
                )?;
                break;
            }
            'label_127: loop {
                'label_128: loop {
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(15i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_128;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_4);
                    v2 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_0 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(3i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_0 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 4) as usize,
                    )?);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_127;
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_6 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(3i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_6);
                v1 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_4);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                'label_129: loop {
                    v0 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_129;
                    }
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                    local_8 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    v1 = TaggedVal::from(1058404i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058384) as usize,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    'label_130: loop {
                        'label_131: loop {
                            v0 = TaggedVal::from(1i32);
                            v1 = TaggedVal::from(local_8);
                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                            local_8 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_131;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(local_8);
                            v2 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058364) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            local_8 = v0.try_as_i32()?;
                            {}
                            break 'label_130;
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                        )?);
                        local_8 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_8);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_8);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(local_6);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058384) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(local_4);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058372) as usize,
                    v1.try_as_i32()?,
                )?;
                break;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_147(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        self.func_148(v0.try_as_i32()?)?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_148(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_1 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(-4i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            local_2 = v1.try_as_i32()?;
            v2 = TaggedVal::from(-8i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_0 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                local_2 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v1 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v1.try_as_i32()? + 1058380) as usize,
                )?);
                local_4 = v1.try_as_i32()?;
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_0 = v0.try_as_i32()?;
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058384) as usize,
                    )?);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(3i32);
                            v1 = TaggedVal::from(
                                (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                            );
                            local_7 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(3i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(1058404i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_2 = v1.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );

                            break;
                        }
                        'label_5: loop {
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058364) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_7);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058364) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_1;
                            break;
                        }
                        'label_6: loop {
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );

                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_1;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    local_7 = v0.try_as_i32()?;
                    'label_7: loop {
                        'label_8: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_8;
                            }
                            'label_9: loop {
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 8) as usize,
                                )?);
                                local_2 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                )?);
                                v1 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);

                                break;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_2);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_7;
                            break;
                        }
                        'label_10: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_10;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_10;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_5 = v0.try_as_i32()?;
                            {}
                            break 'label_7;
                            break;
                        }
                        'label_11: loop {
                            v0 = TaggedVal::from(local_2);
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            local_5 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_11;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_11;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    'label_12: loop {
                        'label_13: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 28) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                            v1 = TaggedVal::from(1058668i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_13;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_5);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_12;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058368) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058368) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_1;
                            break;
                        }
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(20i32);
                        v3 = TaggedVal::from(local_7);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 16) as usize,
                        )?);
                        v4 = TaggedVal::from(local_1);
                        v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                        if ValType::from(v1) != ValType::from(v2) {
                            return None;
                        }
                        if v3.try_as_i32()? != 0 {
                            v1 = v1;
                        } else {
                            v1 = v2;
                        }
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_7);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    'label_14: loop {
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_14;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 20) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_2);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_5);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(-2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058372) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_15: loop {
                'label_16: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_16;
                    }
                    'label_17: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058388) as usize,
                        )?);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_17;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_1);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058388) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058376) as usize,
                        )?);
                        v2 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_0 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058376) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058384) as usize,
                        )?);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058372) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058384) as usize,
                            v1.try_as_i32()?,
                        )?;
                        return Some(());
                        break;
                    }
                    'label_18: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058384) as usize,
                        )?);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_18;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_1);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058384) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058372) as usize,
                        )?);
                        v2 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_0 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058372) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        return Some(());
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(-8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_0 = v0.try_as_i32()?;
                    'label_19: loop {
                        'label_20: loop {
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_20;
                            }
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            'label_21: loop {
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(
                                    (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                                );
                                local_3 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                v2 = TaggedVal::from(1058404i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                local_2 = v1.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_21;
                                }
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058380) as usize,
                                )?);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );

                                break;
                            }
                            'label_22: loop {
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_22;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058364) as usize,
                                )?);
                                v2 = TaggedVal::from(-2i32);
                                v3 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(
                                    v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                                );
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058364) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_19;
                                break;
                            }
                            'label_23: loop {
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_23;
                                }
                                v0 = TaggedVal::from(0i32);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 1058380) as usize,
                                )?);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );

                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_4);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_19;
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                        )?);
                        local_7 = v0.try_as_i32()?;
                        'label_24: loop {
                            'label_25: loop {
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_25;
                                }
                                'label_26: loop {
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058380) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 8) as usize,
                                    )?);
                                    local_2 = v1.try_as_i32()?;
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_26;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );

                                    break;
                                }
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_2);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_5);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_24;
                                break;
                            }
                            'label_27: loop {
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(20i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_4 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_27;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(16i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_4 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_27;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_5 = v0.try_as_i32()?;
                                {}
                                break 'label_24;
                                break;
                            }
                            'label_28: loop {
                                v0 = TaggedVal::from(local_2);
                                local_6 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_4);
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(20i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_4 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_28;
                                }
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(16i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 16) as usize,
                                )?);
                                local_4 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_28;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_19;
                        }
                        'label_29: loop {
                            'label_30: loop {
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 28) as usize,
                                )?);
                                local_4 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                v1 = TaggedVal::from(1058668i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_30;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_5);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_5);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_29;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058368) as usize,
                                )?);
                                v2 = TaggedVal::from(-2i32);
                                v3 = TaggedVal::from(local_4);
                                v2 = TaggedVal::from(
                                    v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                                );
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058368) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_19;
                                break;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(16i32);
                            v2 = TaggedVal::from(20i32);
                            v3 = TaggedVal::from(local_7);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 16) as usize,
                            )?);
                            v4 = TaggedVal::from(local_3);
                            v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                            if ValType::from(v1) != ValType::from(v2) {
                                return None;
                            }
                            if v3.try_as_i32()? != 0 {
                                v1 = v1;
                            } else {
                                v1 = v2;
                            }
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_7);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        'label_31: loop {
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_31;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_2);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 20) as usize,
                        )?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_19;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(20i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_0);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 1058384) as usize,
                    )?);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_15;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058372) as usize,
                        v1.try_as_i32()?,
                    )?;
                    return Some(());
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(-2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                break;
            }
            'label_32: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(255i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_32;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(1058404i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_0 = v0.try_as_i32()?;
                'label_33: loop {
                    'label_34: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058364) as usize,
                        )?);
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(1i32);
                        v2 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        local_2 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_34;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058364) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        local_2 = v0.try_as_i32()?;
                        {}
                        break 'label_33;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_2 = v0.try_as_i32()?;
            'label_35: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_35;
                }
                v0 = TaggedVal::from(31i32);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(16777215i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_35;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(1048320i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(8i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                local_2 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                local_4 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(520192i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(4i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                local_4 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                local_5 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(245760i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                local_5 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(15i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                v2 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(21i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                v1 = TaggedVal::from(28i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(0i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(28i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_2);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(2i32);
            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
            v1 = TaggedVal::from(1058668i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_4 = v0.try_as_i32()?;
            'label_36: loop {
                'label_37: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058368) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(1i32);
                    v2 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    local_3 = v1.try_as_i32()?;
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_37;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058368) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(24i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_4);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_36;
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(0i32);
                v2 = TaggedVal::from(25i32);
                v3 = TaggedVal::from(local_2);
                v4 = TaggedVal::from(1i32);
                v3 = TaggedVal::from((v3.try_as_i32()? as u32) >> (v4.try_as_i32()? % 32));
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
                v3 = TaggedVal::from(local_2);
                v4 = TaggedVal::from(31i32);
                v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                if ValType::from(v1) != ValType::from(v2) {
                    return None;
                }
                if v3.try_as_i32()? != 0 {
                    v1 = v1;
                } else {
                    v1 = v2;
                }
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_5 = v0.try_as_i32()?;
                'label_38: loop {
                    'label_39: loop {
                        v0 = TaggedVal::from(local_5);
                        local_4 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        v1 = TaggedVal::from(-8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_38;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(29i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_39;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(24i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_4);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_36;
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(24i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_4);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                break;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v1.try_as_i32()? + 1058396) as usize,
            )?);
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            local_1 = v1.try_as_i32()?;
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058396) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(1058820i32);
            local_1 = v0.try_as_i32()?;
            'label_40: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_0 = v0.try_as_i32()?;
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_40;
                }
                break;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(-1i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058396) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_149(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(0i32);
                local_2 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_mul(v1.try_as_i32()?));
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
            v1 = TaggedVal::from(65536i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-1i32);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(local_0);
            v2 = TaggedVal::from((v2.try_as_i32()? as u32).checked_div(v3.try_as_i32()? as u32)?);
            v3 = TaggedVal::from(local_1);
            v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
            if ValType::from(v0) != ValType::from(v1) {
                return None;
            }
            if v2.try_as_i32()? != 0 {
                v0 = v0;
            } else {
                v0 = v1;
            }
            local_2 = v0.try_as_i32()?;
            break;
        }
        'label_2: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(self.func_146(v0.try_as_i32()?)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(0i32);
            v2 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(self.func_168(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);

            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_150(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_146(v0.try_as_i32()?)?);
            return Some(v0.try_as_i32()?);
            break;
        }
        'label_1: loop {
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(-64i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(48i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058860) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(11i32);
        v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(19i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(-16i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(-8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(-4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_6 = v0.try_as_i32()?;
        v1 = TaggedVal::from(3i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        local_7 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 1058380) as usize,
        )?);
        local_8 = v0.try_as_i32()?;
        'label_2: loop {
            v0 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(-8i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_9 = v0.try_as_i32()?;
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(local_7);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_2;
            }
            v0 = TaggedVal::from(local_8);
            v1 = TaggedVal::from(local_4);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);

            break;
        }
        v0 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(local_2);
        if ValType::from(v0) != ValType::from(v1) {
            return None;
        }
        if v2.try_as_i32()? != 0 {
            v0 = v0;
        } else {
            v0 = v1;
        }
        local_2 = v0.try_as_i32()?;
        'label_3: loop {
            'label_4: loop {
                'label_5: loop {
                    v0 = TaggedVal::from(local_7);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_5;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(256i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(4i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    v1 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 1058844) as usize,
                    )?);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    {}
                    break 'label_4;
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_9);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_7 = v0.try_as_i32()?;
                'label_6: loop {
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_6;
                    }
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_6);
                    v3 = TaggedVal::from(1i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    v2 = TaggedVal::from(2i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(3i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 4) as usize,
                    )?);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_1);
                    self.func_151(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_0);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                'label_7: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058388) as usize,
                    )?);
                    v1 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_7;
                    }
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058376) as usize,
                    )?);
                    v1 = TaggedVal::from(local_9);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_6);
                    v3 = TaggedVal::from(1i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    v2 = TaggedVal::from(2i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_4);
                    v2 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_1 = v1.try_as_i32()?;
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058388) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_9);
                    v2 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                    local_2 = v1.try_as_i32()?;
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058376) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                'label_8: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058384) as usize,
                    )?);
                    v1 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_8;
                    }
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058372) as usize,
                    )?);
                    v1 = TaggedVal::from(local_9);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    'label_9: loop {
                        'label_10: loop {
                            v0 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_10;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(local_6);
                            v3 = TaggedVal::from(1i32);
                            v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            v2 = TaggedVal::from(2i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_9);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_9 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 4) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_9;
                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_6);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(local_9);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        v2 = TaggedVal::from(2i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_9);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_2 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_2);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058384) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058372) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_7);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(-8i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v1 = TaggedVal::from(local_9);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_10 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_2);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_10);
                v1 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_11 = v0.try_as_i32()?;
                'label_11: loop {
                    'label_12: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_12;
                        }
                        v0 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                        )?);
                        local_1 = v0.try_as_i32()?;
                        'label_13: loop {
                            v0 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(3i32);
                            v1 = TaggedVal::from(
                                (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                            );
                            local_3 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(3i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(1058404i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_7 = v1.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_13;
                            }
                            v0 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(local_9);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );

                            break;
                        }
                        'label_14: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_9);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_14;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058364) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058364) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_11;
                            break;
                        }
                        'label_15: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_15;
                            }
                            v0 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );

                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_9);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_9);
                        v1 = TaggedVal::from(local_1);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_11;
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    local_12 = v0.try_as_i32()?;
                    'label_16: loop {
                        'label_17: loop {
                            v0 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_17;
                            }
                            'label_18: loop {
                                v0 = TaggedVal::from(local_8);
                                v1 = TaggedVal::from(local_7);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 8) as usize,
                                )?);
                                local_1 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_18;
                                }
                                v0 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                )?);
                                v1 = TaggedVal::from(local_7);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);

                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_1);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_3);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_16;
                            break;
                        }
                        'label_19: loop {
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_3 = v0.try_as_i32()?;
                            {}
                            break 'label_16;
                            break;
                        }
                        'label_20: loop {
                            v0 = TaggedVal::from(local_1);
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_9);
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_20;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_20;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_8);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_12);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_11;
                    }
                    'label_21: loop {
                        'label_22: loop {
                            v0 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 28) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                            v1 = TaggedVal::from(1058668i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_22;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_3);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_21;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058368) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_9);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058368) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_11;
                            break;
                        }
                        v0 = TaggedVal::from(local_12);
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(20i32);
                        v3 = TaggedVal::from(local_12);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 16) as usize,
                        )?);
                        v4 = TaggedVal::from(local_7);
                        v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                        if ValType::from(v1) != ValType::from(v2) {
                            return None;
                        }
                        if v3.try_as_i32()? != 0 {
                            v1 = v1;
                        } else {
                            v1 = v2;
                        }
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_11;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_12);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    'label_23: loop {
                        v0 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_23;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 20) as usize,
                    )?);
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_11;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    break;
                }
                'label_24: loop {
                    v0 = TaggedVal::from(local_11);
                    v1 = TaggedVal::from(15i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_24;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_6);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v2 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    v2 = TaggedVal::from(2i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_10);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 4) as usize,
                    )?);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(local_6);
                v3 = TaggedVal::from(1i32);
                v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                v2 = TaggedVal::from(2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_11);
                v2 = TaggedVal::from(3i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_10);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_11);
                self.func_151(v0.try_as_i32()?, v1.try_as_i32()?)?;
                v0 = TaggedVal::from(local_0);
                return Some(v0.try_as_i32()?);
                break;
            }
            'label_25: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_146(v0.try_as_i32()?)?);
                local_2 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_25;
                }
                v0 = TaggedVal::from(0i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
            local_9 = v2.try_as_i32()?;
            v3 = TaggedVal::from(-8i32);
            v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
            v3 = TaggedVal::from(4i32);
            v4 = TaggedVal::from(8i32);
            v5 = TaggedVal::from(local_9);
            v6 = TaggedVal::from(3i32);
            v5 = TaggedVal::from(v5.try_as_i32()? & v6.try_as_i32()?);
            if ValType::from(v3) != ValType::from(v4) {
                return None;
            }
            if v5.try_as_i32()? != 0 {
                v3 = v3;
            } else {
                v3 = v4;
            }
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
            local_9 = v2.try_as_i32()?;
            v3 = TaggedVal::from(local_1);
            v4 = TaggedVal::from(local_9);
            v5 = TaggedVal::from(local_1);
            v4 = TaggedVal::from(((v4.try_as_i32()? as u32) < (v5.try_as_i32()? as u32)) as i32);
            if ValType::from(v2) != ValType::from(v3) {
                return None;
            }
            if v4.try_as_i32()? != 0 {
                v2 = v2;
            } else {
                v2 = v3;
            }
            v0 = TaggedVal::from(self.func_167(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            self.func_148(v0.try_as_i32()?)?;
            v0 = TaggedVal::from(local_1);
            local_0 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_151(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058384) as usize,
                    )?);
                    v1 = TaggedVal::from(local_0);
                    v2 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                    local_0 = v1.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058380) as usize,
                    )?);
                    local_4 = v0.try_as_i32()?;
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(3i32);
                            v1 = TaggedVal::from(
                                (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                            );
                            local_7 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(3i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(1058404i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_3 = v1.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );

                            break;
                        }
                        'label_5: loop {
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058364) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_7);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058364) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_1;
                            break;
                        }
                        'label_6: loop {
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );

                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(local_5);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_1;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    local_7 = v0.try_as_i32()?;
                    'label_7: loop {
                        'label_8: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                            )?);
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_8;
                            }
                            'label_9: loop {
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 8) as usize,
                                )?);
                                local_3 = v1.try_as_i32()?;
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                )?);
                                v1 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);

                                break;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_3);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_6);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_7;
                            break;
                        }
                        'label_10: loop {
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_10;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_10;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_6 = v0.try_as_i32()?;
                            {}
                            break 'label_7;
                            break;
                        }
                        'label_11: loop {
                            v0 = TaggedVal::from(local_3);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_5);
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_11;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_11;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    'label_12: loop {
                        'label_13: loop {
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 28) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(2i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                            v1 = TaggedVal::from(1058668i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_13;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_6);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_6);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_12;
                            }
                            v0 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(0i32);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 1058368) as usize,
                            )?);
                            v2 = TaggedVal::from(-2i32);
                            v3 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(
                                v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 1058368) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_1;
                            break;
                        }
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from(20i32);
                        v3 = TaggedVal::from(local_7);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 16) as usize,
                        )?);
                        v4 = TaggedVal::from(local_0);
                        v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                        if ValType::from(v1) != ValType::from(v2) {
                            return None;
                        }
                        if v3.try_as_i32()? != 0 {
                            v1 = v1;
                        } else {
                            v1 = v2;
                        }
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_6);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(local_7);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    'label_14: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_14;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 20) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_6);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                        v1.try_as_i32()?,
                    )?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(-2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058372) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            'label_15: loop {
                'label_16: loop {
                    v0 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_16;
                    }
                    'label_17: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058388) as usize,
                        )?);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_17;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058388) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058376) as usize,
                        )?);
                        v2 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_1 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058376) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058384) as usize,
                        )?);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058372) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058384) as usize,
                            v1.try_as_i32()?,
                        )?;
                        return Some(());
                        break;
                    }
                    'label_18: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058384) as usize,
                        )?);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_18;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_0);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058384) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 1058372) as usize,
                        )?);
                        v2 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_1 = v1.try_as_i32()?;
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058372) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        return Some(());
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 1058380) as usize,
                    )?);
                    local_4 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(-8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    'label_19: loop {
                        'label_20: loop {
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_20;
                            }
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            'label_21: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                )?);
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(
                                    (v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32),
                                );
                                local_2 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                v2 = TaggedVal::from(1058404i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                local_3 = v1.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_21;
                                }
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_6);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );

                                break;
                            }
                            'label_22: loop {
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_6);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_22;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058364) as usize,
                                )?);
                                v2 = TaggedVal::from(-2i32);
                                v3 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(
                                    v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                                );
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058364) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_19;
                                break;
                            }
                            'label_23: loop {
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_23;
                                }
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                                );

                                break;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_6);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_5);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()?,
                            )?;
                            {}
                            break 'label_19;
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                        )?);
                        local_7 = v0.try_as_i32()?;
                        'label_24: loop {
                            'label_25: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                )?);
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_25;
                                }
                                'label_26: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(local_2);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 8) as usize,
                                    )?);
                                    local_3 = v1.try_as_i32()?;
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_26;
                                    }
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );

                                    break;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(local_3);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_6);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_24;
                                break;
                            }
                            'label_27: loop {
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(20i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_27;
                                }
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(16i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_27;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_6 = v0.try_as_i32()?;
                                {}
                                break 'label_24;
                                break;
                            }
                            'label_28: loop {
                                v0 = TaggedVal::from(local_3);
                                local_4 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_5);
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(20i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_28;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(16i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_6);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 16) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_28;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(0i32);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_19;
                        }
                        'label_29: loop {
                            'label_30: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 28) as usize,
                                )?);
                                local_5 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                v1 = TaggedVal::from(1058668i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_30;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_6);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_6);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_29;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 1058368) as usize,
                                )?);
                                v2 = TaggedVal::from(-2i32);
                                v3 = TaggedVal::from(local_5);
                                v2 = TaggedVal::from(
                                    v2.try_as_i32()?.rotate_left(v3.try_as_i32()? as u32),
                                );
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058368) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                {}
                                break 'label_19;
                                break;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(16i32);
                            v2 = TaggedVal::from(20i32);
                            v3 = TaggedVal::from(local_7);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 16) as usize,
                            )?);
                            v4 = TaggedVal::from(local_2);
                            v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
                            if ValType::from(v1) != ValType::from(v2) {
                                return None;
                            }
                            if v3.try_as_i32()? != 0 {
                                v1 = v1;
                            } else {
                                v1 = v2;
                            }
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_6);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(local_7);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        'label_31: loop {
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_31;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_3);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_6);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                                v1.try_as_i32()?,
                            )?;
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 20) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_19;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(20i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                            v1.try_as_i32()?,
                        )?;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 1058384) as usize,
                    )?);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_15;
                    }
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1058372) as usize,
                        v1.try_as_i32()?,
                    )?;
                    return Some(());
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(-2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                break;
            }
            'label_32: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(255i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_32;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(1058404i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                'label_33: loop {
                    'label_34: loop {
                        v0 = TaggedVal::from(0i32);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 1058364) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(1i32);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        local_3 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_34;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058364) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        local_3 = v0.try_as_i32()?;
                        {}
                        break 'label_33;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_3);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_3 = v0.try_as_i32()?;
            'label_35: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_35;
                }
                v0 = TaggedVal::from(31i32);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(16777215i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_35;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(1048320i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(8i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                local_3 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                local_5 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(520192i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(4i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                local_5 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                local_6 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_6);
                v2 = TaggedVal::from(245760i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(2i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                local_6 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(15i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                v2 = TaggedVal::from(local_6);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_3);
                v3 = TaggedVal::from(21i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                v1 = TaggedVal::from(28i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(0i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(28i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(2i32);
            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
            v1 = TaggedVal::from(1058668i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_5 = v0.try_as_i32()?;
            'label_36: loop {
                v0 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 1058368) as usize,
                )?);
                local_6 = v0.try_as_i32()?;
                v1 = TaggedVal::from(1i32);
                v2 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                local_2 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_36;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(local_6);
                v2 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058368) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(24i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_5);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(0i32);
            v2 = TaggedVal::from(25i32);
            v3 = TaggedVal::from(local_3);
            v4 = TaggedVal::from(1i32);
            v3 = TaggedVal::from((v3.try_as_i32()? as u32) >> (v4.try_as_i32()? % 32));
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
            v3 = TaggedVal::from(local_3);
            v4 = TaggedVal::from(31i32);
            v3 = TaggedVal::from((v3.try_as_i32()? == v4.try_as_i32()?) as i32);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_6 = v0.try_as_i32()?;
            'label_37: loop {
                'label_38: loop {
                    v0 = TaggedVal::from(local_6);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    v1 = TaggedVal::from(-8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_37;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(29i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_6);
                    v2 = TaggedVal::from(4i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_6 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_38;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(24i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_5);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_0);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                return Some(());
                break;
            }
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_0);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 12) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(24i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_5);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 12) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_152(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(16i32);
                v2 = TaggedVal::from(local_0);
                v3 = TaggedVal::from(16i32);
                v2 =
                    TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                if ValType::from(v0) != ValType::from(v1) {
                    return None;
                }
                if v2.try_as_i32()? != 0 {
                    v0 = v0;
                } else {
                    v0 = v1;
                }
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(-1i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                local_0 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(32i32);
            local_3 = v0.try_as_i32()?;
            'label_2: loop {
                v0 = TaggedVal::from(local_3);
                local_0 = v0.try_as_i32()?;
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_2);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_2;
                }
                break;
            }
            break;
        }
        'label_3: loop {
            v0 = TaggedVal::from(-64i32);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_3;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(48i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058860) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(0i32);
            return Some(v0.try_as_i32()?);
            break;
        }
        'label_4: loop {
            v0 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(19i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(-16i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(local_1);
            v3 = TaggedVal::from(11i32);
            v2 = TaggedVal::from(((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32)) as i32);
            if ValType::from(v0) != ValType::from(v1) {
                return None;
            }
            if v2.try_as_i32()? != 0 {
                v0 = v0;
            } else {
                v0 = v1;
            }
            local_1 = v0.try_as_i32()?;
            v1 = TaggedVal::from(12i32);
            v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v0 = TaggedVal::from(self.func_146(v0.try_as_i32()?)?);
            local_3 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_4;
            }
            v0 = TaggedVal::from(0i32);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(-8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        'label_5: loop {
            'label_6: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_6;
                }
                v0 = TaggedVal::from(local_2);
                local_0 = v0.try_as_i32()?;
                {}
                break 'label_5;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(-4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_5 = v0.try_as_i32()?;
            v1 = TaggedVal::from(-8i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(0i32);
            v3 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(-8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            local_3 = v1.try_as_i32()?;
            v2 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(local_3);
            v4 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_sub(v4.try_as_i32()?));
            v4 = TaggedVal::from(15i32);
            v3 = TaggedVal::from(((v3.try_as_i32()? as u32) > (v4.try_as_i32()? as u32)) as i32);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            local_0 = v1.try_as_i32()?;
            v2 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
            local_3 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            local_6 = v0.try_as_i32()?;
            'label_7: loop {
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_7;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_6);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                v2 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                {}
                break 'label_5;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_6);
            v2 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 4) as usize)?);
            v3 = TaggedVal::from(1i32);
            v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(2i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_6);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_6 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v2 = TaggedVal::from(1i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
            v3 = TaggedVal::from(1i32);
            v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(2i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v2 = TaggedVal::from(1i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_3);
            self.func_151(v0.try_as_i32()?, v1.try_as_i32()?)?;
            break;
        }
        'label_8: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_8;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(-8i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_8;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(1i32);
            v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(2i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
            local_1 = v1.try_as_i32()?;
            v2 = TaggedVal::from(3i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
            v2 = TaggedVal::from(1i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            self.func_151(v0.try_as_i32()?, v1.try_as_i32()?)?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_153(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(self.func_146(v0.try_as_i32()?)?);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_152(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_154(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        self.func_0(v0.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_155(&mut self) -> Option<()> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_0 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(3i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v0 = TaggedVal::from(self.func_2(v0.try_as_i32()?, v1.try_as_i32()?)?);
                        local_2 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_2);
                                match v0.try_as_i32()? {
                                    0 => {
                                        {}
                                        break 'label_5;
                                    }
                                    1 => {
                                        {}
                                        break 'label_2;
                                    }
                                    2 => {
                                        {}
                                        break 'label_2;
                                    }
                                    3 => {
                                        {}
                                        break 'label_2;
                                    }
                                    4 => {
                                        {}
                                        break 'label_2;
                                    }
                                    5 => {
                                        {}
                                        break 'label_2;
                                    }
                                    6 => {
                                        {}
                                        break 'label_2;
                                    }
                                    7 => {
                                        {}
                                        break 'label_2;
                                    }
                                    8 => {
                                        {}
                                        break 'label_4;
                                    }
                                    _ => {
                                        {}
                                        break 'label_5;
                                    }
                                }
                                break;
                            }
                            'label_6: loop {
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_6;
                                }
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                )?);
                                local_2 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(self.func_145(v0.try_as_i32()?)?);
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_1;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(local_3);
                                v2 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(self.func_3(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                )?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_2;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 12) as usize,
                                )?);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(0i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_0;
                                }
                                'label_7: loop {
                                    'label_8: loop {
                                        v0 = TaggedVal::from(0i32);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 1058872) as usize,
                                        )?);
                                        local_2 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(0i32);
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 1058868) as usize,
                                        )?);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_8;
                                        }
                                        v0 = TaggedVal::from(0i32);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 1058864) as usize,
                                        )?);
                                        local_4 = v0.try_as_i32()?;
                                        {}
                                        break 'label_7;
                                        break;
                                    }
                                    v0 = TaggedVal::from(8i32);
                                    v1 = TaggedVal::from(local_2);
                                    v2 = TaggedVal::from(1i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                    );
                                    v2 = TaggedVal::from(4i32);
                                    v3 = TaggedVal::from(local_2);
                                    if ValType::from(v1) != ValType::from(v2) {
                                        return None;
                                    }
                                    if v3.try_as_i32()? != 0 {
                                        v1 = v1;
                                    } else {
                                        v1 = v2;
                                    }
                                    local_5 = v1.try_as_i32()?;
                                    v0 = TaggedVal::from(
                                        self.func_149(v0.try_as_i32()?, v1.try_as_i32()?)?,
                                    );
                                    local_4 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_1;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v1.try_as_i32()? + 1058864) as usize,
                                    )?);
                                    local_6 = v1.try_as_i32()?;
                                    v2 = TaggedVal::from(local_2);
                                    v3 = TaggedVal::from(3i32);
                                    v2 = TaggedVal::from(
                                        v2.try_as_i32()? << (v3.try_as_i32()? % 32),
                                    );
                                    v0 = TaggedVal::from(self.func_167(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?);
                                    local_2 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_6);
                                    self.func_147(v0.try_as_i32()?)?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_5);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058868) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v1 = TaggedVal::from(local_2);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 1058864) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(0i32);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 1058872) as usize,
                                    )?);
                                    local_2 = v0.try_as_i32()?;
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                v1 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(1i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 1058872) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(3i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_1);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_3);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                            );
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_3;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                    return Some(());
                    break;
                }
                v0 = TaggedVal::from(71i32);
                self.func_154(v0.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(70i32);
            self.func_154(v0.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        self.func_144()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_156(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from((self.memory.len() / 65536) as i32);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
            return Some(v0.try_as_i32()?);
            break;
        }
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(65535i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                {
                    let orig_size = (self.memory.len() / 65536);
                    self.memory.resize_with(
                        self.memory.len() + (65536 * v0.try_as_i32()? as usize),
                        Default::default,
                    );
                    v0 = TaggedVal::from(orig_size as i32);
                }
                local_0 = v0.try_as_i32()?;
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(0i32);
                v1 = TaggedVal::from(48i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1058860) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(-1i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(16i32);
            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
            return Some(v0.try_as_i32()?);
            break;
        }
        self.func_144()?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_157(&mut self) -> Option<()> {
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058880) as usize,
            )?);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            self.func_158()?;
            break;
        }
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_158(&mut self) -> Option<()> {
        let mut local_0: i32 = 0i32;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_0 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(12i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_0);
                    v2 = TaggedVal::from(8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_4(v0.try_as_i32()?, v1.try_as_i32()?)?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                        )?);
                        local_1 = v0.try_as_i32()?;
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(1058876i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1058880) as usize,
                            v1.try_as_i32()?,
                        )?;
                        {}
                        break 'label_0;
                        break;
                    }
                    'label_4: loop {
                        'label_5: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            v0 = TaggedVal::from(self.func_145(v0.try_as_i32()?)?);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(4i32);
                            v0 =
                                TaggedVal::from(self.func_149(v0.try_as_i32()?, v1.try_as_i32()?)?);
                            local_1 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_3);
                            self.func_147(v0.try_as_i32()?)?;
                            break;
                        }
                        v0 = TaggedVal::from(70i32);
                        self.func_154(v0.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(self.func_5(v0.try_as_i32()?, v1.try_as_i32()?)?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_3);
                    self.func_147(v0.try_as_i32()?)?;
                    v0 = TaggedVal::from(local_1);
                    self.func_147(v0.try_as_i32()?)?;
                    break;
                }
                v0 = TaggedVal::from(71i32);
                self.func_154(v0.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058880) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_159(&mut self) -> Option<()> {
        self.func_158()?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_160(&mut self) -> Option<()> {
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_161(&mut self) -> Option<()> {
        self.func_160()?;
        self.func_160()?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_162(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        self.func_157()?;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(61i32);
            v0 = TaggedVal::from(self.func_166(v0.try_as_i32()?, v1.try_as_i32()?)?);
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058880) as usize,
            )?);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_4);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_4 = v0.try_as_i32()?;
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(self.func_169(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                        )?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(61i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_4 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_2);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_2;
                    }
                    {}
                    break 'label_0;
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_163(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(1i32);
                v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(self.func_167(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);

                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_3 = v0.try_as_i32()?;
            'label_2: loop {
                'label_3: loop {
                    'label_4: loop {
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        'label_5: loop {
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_0);
                            local_3 = v0.try_as_i32()?;
                            {}
                            break 'label_2;
                            break;
                        }
                        'label_6: loop {
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_6;
                            }
                            v0 = TaggedVal::from(local_0);
                            local_3 = v0.try_as_i32()?;
                            {}
                            break 'label_3;
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        local_3 = v0.try_as_i32()?;
                        'label_7: loop {
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_0;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            {}
                            continue 'label_7;
                            break;
                        }
                        break;
                    }
                    'label_8: loop {
                        'label_9: loop {
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_9;
                            }
                            v0 = TaggedVal::from(local_2);
                            local_3 = v0.try_as_i32()?;
                            {}
                            break 'label_8;
                            break;
                        }
                        'label_10: loop {
                            'label_11: loop {
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_11;
                                }
                                v0 = TaggedVal::from(local_2);
                                local_3 = v0.try_as_i32()?;
                                {}
                                break 'label_10;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_5 = v0.try_as_i32()?;
                            'label_12: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_0;
                                }
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_4);
                                v2 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_3 = v0.try_as_i32()?;
                                local_2 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(3i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_12;
                                }
                                break;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_8;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(-4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(-4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_6 = v0.try_as_i32()?;
                        'label_13: loop {
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_6);
                            v2 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(-4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(3i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_13;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    'label_14: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_14;
                        }
                        {}
                        break 'label_0;
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(4i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(local_2);
                local_6 = v0.try_as_i32()?;
                'label_15: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(-4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_6 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_15;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                local_2 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_16: loop {
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_16;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_164(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(0i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(0i32);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 1058908) as usize,
            )?);
            local_2 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(1058884i32);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(1058884i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 1058908) as usize,
                v1.try_as_i32()?,
            )?;
            break;
        }
        'label_1: loop {
            'label_2: loop {
                'label_3: loop {
                    'label_4: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(1052432i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(77i32);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(77i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_4;
                        }
                        {}
                        break 'label_2;
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_1);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(1052512i32);
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_1;
                break;
            }
            v0 = TaggedVal::from(1052512i32);
            local_1 = v0.try_as_i32()?;
            'label_5: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_4 = v0.try_as_i32()?;
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_5;
                }
                v0 = TaggedVal::from(local_4);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_5;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v1.try_as_i32()? + 20) as usize,
        )?);
        v0 = TaggedVal::from(self.func_173(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_165(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(self.func_164(v0.try_as_i32()?)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(self.func_171(v0.try_as_i32()?)?);
                local_3 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_2);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(68i32);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(-1i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                local_2 = v2.try_as_i32()?;
                v0 = TaggedVal::from(self.func_167(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);
                v1 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(68i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_0);
            v2 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(1i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v0 = TaggedVal::from(self.func_167(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);

            v0 = TaggedVal::from(0i32);
            local_3 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_166(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(255i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(255i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_3;
                        }
                        break;
                    }
                    break;
                }
                'label_4: loop {
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(-16843009i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(-2139062144i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(16843009i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_mul(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    'label_5: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                        local_3 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(-16843009i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(-2139062144i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(-16843009i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(-2139062144i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_5;
                        }
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_0 = v0.try_as_i32()?;
                'label_6: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(255i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_6;
                    }
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_0);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(self.func_171(v1.try_as_i32()?)?);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_167(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                local_3 = v0.try_as_i32()?;
                'label_2: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_4 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_4);
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_2;
                    }
                    {}
                    break 'label_0;
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_2);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            local_3 = v0.try_as_i32()?;
            break;
        }
        'label_3: loop {
            'label_4: loop {
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(3i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                local_2 = v0.try_as_i32()?;
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                'label_5: loop {
                    'label_6: loop {
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_6;
                        }
                        v0 = TaggedVal::from(local_4);
                        local_2 = v0.try_as_i32()?;
                        {}
                        break 'label_5;
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(-16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    'label_7: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(-16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(15i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_7;
                        }
                        break;
                    }
                    break;
                }
                'label_8: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_8;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i64(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    break;
                }
                'label_9: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_9;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    break;
                }
                'label_10: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_10;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_0);
                return Some(v0.try_as_i32()?);
                break;
            }
            'label_11: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(32i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_11;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(2i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_11;
                }
                'label_12: loop {
                    'label_13: loop {
                        'label_14: loop {
                            v0 = TaggedVal::from(local_2);
                            match v0.try_as_i32()? {
                                0 => {
                                    {}
                                    break 'label_14;
                                }
                                1 => {
                                    {}
                                    break 'label_13;
                                }
                                2 => {
                                    {}
                                    break 'label_12;
                                }
                                _ => {
                                    {}
                                    break 'label_14;
                                }
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 1) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v1.try_as_i32()?;
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 2) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 2) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(-3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_6 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_7 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(-20i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(-16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_8 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_2 = v0.try_as_i32()?;
                        'label_15: loop {
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_9 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(4i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_10 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(local_5);
                            v3 = TaggedVal::from(24i32);
                            v2 = TaggedVal::from(
                                (v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_9);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(local_10);
                            v3 = TaggedVal::from(24i32);
                            v2 = TaggedVal::from(
                                (v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_9);
                            v2 = TaggedVal::from(12i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_10 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(local_5);
                            v3 = TaggedVal::from(24i32);
                            v2 = TaggedVal::from(
                                (v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(12i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_9);
                            v2 = TaggedVal::from(16i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v2 = TaggedVal::from(local_10);
                            v3 = TaggedVal::from(24i32);
                            v2 = TaggedVal::from(
                                (v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32),
                            );
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(-16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_15;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_8);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        v1 = TaggedVal::from(-19i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_4 = v0.try_as_i32()?;
                        {}
                        break 'label_11;
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    local_5 = v1.try_as_i32()?;
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 1) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(-2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_7 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(-20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(-16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    local_8 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    local_2 = v0.try_as_i32()?;
                    'label_16: loop {
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_9 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_10 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(local_5);
                        v3 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_9);
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(local_10);
                        v3 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_9);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_10 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(local_5);
                        v3 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_9);
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(16i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(local_10);
                        v3 = TaggedVal::from(16i32);
                        v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(-16i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_6 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(17i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_16;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_8);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    v1 = TaggedVal::from(-18i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_4 = v0.try_as_i32()?;
                    {}
                    break 'label_11;
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                local_5 = v1.try_as_i32()?;
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_7 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(-20i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(-16i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                local_8 = v0.try_as_i32()?;
                v0 = TaggedVal::from(0i32);
                local_2 = v0.try_as_i32()?;
                'label_17: loop {
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_9 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(4i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    local_10 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(24i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v2 = TaggedVal::from(local_5);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_9);
                    v2 = TaggedVal::from(8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    local_5 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(24i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v2 = TaggedVal::from(local_10);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_9);
                    v2 = TaggedVal::from(12i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    local_10 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(24i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v2 = TaggedVal::from(local_5);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(12i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_9);
                    v2 = TaggedVal::from(16i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    local_5 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(24i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v2 = TaggedVal::from(local_10);
                    v3 = TaggedVal::from(8i32);
                    v2 = TaggedVal::from((v2.try_as_i32()? as u32) >> (v3.try_as_i32()? % 32));
                    v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(-16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_6 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(18i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_17;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_7);
                v1 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_8);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                v1 = TaggedVal::from(-17i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_4 = v0.try_as_i32()?;
                break;
            }
            'label_18: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_18;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 2) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 2) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 3) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 3) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 4) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 5) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 5) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 6) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 6) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 7) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 7) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 8) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 9) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 9) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 10) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 10) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 11) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 11) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 12) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 13) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 13) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 14) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 14) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 15) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 15) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                break;
            }
            'label_19: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_19;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 2) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 2) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 3) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 3) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 4) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 5) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 5) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 6) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 6) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 7) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 7) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                break;
            }
            'label_20: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_20;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 2) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 2) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 3) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 3) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                break;
            }
            'label_21: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_21;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 1) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(2i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_3;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(
                read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_168(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(3i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 2) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 1) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(-3i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(-2i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(7i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 3) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(-4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(9i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(0i32);
            v2 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
            v2 = TaggedVal::from(3i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_4 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(255i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(16843009i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_mul(v2.try_as_i32()?));
            local_1 = v1.try_as_i32()?;
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
            v2 = TaggedVal::from(-4i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_4 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(-4i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(9i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-12i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(25i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 24) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 20) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 12) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-16i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-20i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-24i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-28i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(4i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            local_5 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            local_2 = v0.try_as_i32()?;
            v1 = TaggedVal::from(32i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
            local_6 = v0.try_as_i64()?;
            v1 = TaggedVal::from(32i64);
            v0 = TaggedVal::from(v0.try_as_i64()? << (v1.try_as_i64()? % 64));
            v1 = TaggedVal::from(local_6);
            v0 = TaggedVal::from(v0.try_as_i64()? | v1.try_as_i64()?);
            local_6 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_1 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_6);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(24i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_6);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(16i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_6);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_6);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(32i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(-32i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v1 = TaggedVal::from(31i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_1;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_169(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(0i32);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(0i32);
        local_3 = v0.try_as_i32()?;
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_2 = v0.try_as_i32()?;
            'label_2: loop {
                'label_3: loop {
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(255i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    local_5 = v1.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_3;
                    }
                    v0 = TaggedVal::from(local_4);
                    local_3 = v0.try_as_i32()?;
                    {}
                    break 'label_1;
                    break;
                }
                'label_4: loop {
                    v0 = TaggedVal::from(local_2);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    v0 = TaggedVal::from(local_4);
                    local_3 = v0.try_as_i32()?;
                    {}
                    break 'label_1;
                    break;
                }
                'label_5: loop {
                    v0 = TaggedVal::from(local_5);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_5;
                    }
                    v0 = TaggedVal::from(local_4);
                    local_3 = v0.try_as_i32()?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_4);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_2;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(255i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(
            read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_170(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(0i32);
        local_3 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    local_4 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    local_5 = v1.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_2 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_2;
                    }
                    {}
                    break 'label_0;
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_171(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(3i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        return Some(v0.try_as_i32()?);
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    'label_4: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        {}
                        continue 'label_4;
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(-4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                'label_5: loop {
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(-16843009i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(-2139062144i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_5;
                    }
                    break;
                }
                'label_6: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(255i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_6;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    return Some(v0.try_as_i32()?);
                    break;
                }
                'label_7: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 1) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_2);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_7;
                    }
                    {}
                    break 'label_0;
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_172(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_173(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_172(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_174(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        self.func_124(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_175(&mut self) -> Option<()> {
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(1054109i32);
        v1 = TaggedVal::from(17i32);
        v2 = TaggedVal::from(1054128i32);
        self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_176(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_177(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(44i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(3i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1054208i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(32i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1054232i32);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_178(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);

        'label_0: loop {
            {}
            continue 'label_0;
            break;
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_179(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_180(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(44i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1054452i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(32i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_181(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(20i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1054248i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 28) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(24i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_2);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_182(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(44i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1054972i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(32i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_183(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(44i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1055024i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 36) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(32i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_184(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut local_13: i32 = 0i32;
        let mut local_14: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 16) as usize,
        )?);
        local_3 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 8) as usize,
                        )?);
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                        )?);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(local_2);
                        v3 = TaggedVal::from(local_0);
                        v4 = TaggedVal::from(28i32);
                        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 0) as usize,
                        )?);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 12) as usize,
                        )?);
                        {
                            let rets =
                                self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                            if rets.len() != 1 {
                                return None;
                            }
                            v0 = rets[0];
                        }
                        local_3 = v0.try_as_i32()?;
                        {}
                        break 'label_0;
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                'label_4: loop {
                    'label_5: loop {
                        v0 = TaggedVal::from(local_2);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_5;
                        }
                        v0 = TaggedVal::from(0i32);
                        local_2 = v0.try_as_i32()?;
                        {}
                        break 'label_4;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    local_7 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    local_8 = v0.try_as_i32()?;
                    'label_6: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_9 = v0.try_as_i32()?;
                        'label_7: loop {
                            'label_8: loop {
                                'label_9: loop {
                                    v0 = TaggedVal::from(local_3);
                                    v0 = TaggedVal::from(
                                        read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    local_10 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(-1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? > v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_9;
                                    }
                                    'label_10: loop {
                                        'label_11: loop {
                                            v0 = TaggedVal::from(local_9);
                                            v1 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_11;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            local_11 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_5);
                                            local_3 = v0.try_as_i32()?;
                                            {}
                                            break 'label_10;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_3);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 1) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v1 = TaggedVal::from(63i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        local_11 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(2i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_9 = v0.try_as_i32()?;
                                        local_3 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_10);
                                    v1 = TaggedVal::from(31i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    local_12 = v0.try_as_i32()?;
                                    'label_12: loop {
                                        v0 = TaggedVal::from(local_10);
                                        v1 = TaggedVal::from(255i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        local_10 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(223i32);
                                        v0 = TaggedVal::from(
                                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_12;
                                        }
                                        v0 = TaggedVal::from(local_11);
                                        v1 = TaggedVal::from(local_12);
                                        v2 = TaggedVal::from(6i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                        );
                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                        local_10 = v0.try_as_i32()?;
                                        {}
                                        break 'label_8;
                                        break;
                                    }
                                    'label_13: loop {
                                        'label_14: loop {
                                            v0 = TaggedVal::from(local_3);
                                            v1 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_14;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            local_13 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_5);
                                            local_14 = v0.try_as_i32()?;
                                            {}
                                            break 'label_13;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_3);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v1 = TaggedVal::from(63i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        local_13 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_9 = v0.try_as_i32()?;
                                        local_14 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_13);
                                    v1 = TaggedVal::from(local_11);
                                    v2 = TaggedVal::from(6i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                    );
                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                    local_11 = v0.try_as_i32()?;
                                    'label_15: loop {
                                        v0 = TaggedVal::from(local_10);
                                        v1 = TaggedVal::from(240i32);
                                        v0 = TaggedVal::from(
                                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_15;
                                        }
                                        v0 = TaggedVal::from(local_11);
                                        v1 = TaggedVal::from(local_12);
                                        v2 = TaggedVal::from(12i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                        );
                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                        local_10 = v0.try_as_i32()?;
                                        {}
                                        break 'label_8;
                                        break;
                                    }
                                    'label_16: loop {
                                        'label_17: loop {
                                            v0 = TaggedVal::from(local_14);
                                            v1 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_17;
                                            }
                                            v0 = TaggedVal::from(0i32);
                                            local_10 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_9);
                                            local_3 = v0.try_as_i32()?;
                                            {}
                                            break 'label_16;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_14);
                                        v1 = TaggedVal::from(1i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_3 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(local_14);
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v1 = TaggedVal::from(63i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        local_10 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_11);
                                    v1 = TaggedVal::from(6i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                    );
                                    v1 = TaggedVal::from(local_12);
                                    v2 = TaggedVal::from(18i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                    );
                                    v2 = TaggedVal::from(1835008i32);
                                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                    v1 = TaggedVal::from(local_10);
                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                    local_10 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(1114112i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_7;
                                    }
                                    {}
                                    break 'label_4;
                                    break;
                                }
                                v0 = TaggedVal::from(local_10);
                                v1 = TaggedVal::from(255i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                local_10 = v0.try_as_i32()?;
                                break;
                            }
                            v0 = TaggedVal::from(local_9);
                            local_3 = v0.try_as_i32()?;
                            break;
                        }
                        'label_18: loop {
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_18;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(local_8);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_7 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_6;
                            }
                            {}
                            break 'label_4;
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(1114112i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_4;
                    }
                    'label_19: loop {
                        'label_20: loop {
                            v0 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_20;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_20;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(
                                read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v1 = TaggedVal::from(-64i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_19;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        local_3 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_3);
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_2 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(local_3);
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_1 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(local_0);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_9 = v0.try_as_i32()?;
            'label_21: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_21;
                }
                v0 = TaggedVal::from(local_2);
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                local_3 = v0.try_as_i32()?;
                'label_22: loop {
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v2 = TaggedVal::from(192i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v2 = TaggedVal::from(128i32);
                    v1 = TaggedVal::from((v1.try_as_i32()? == v2.try_as_i32()?) as i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_10 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_22;
                    }
                    break;
                }
                break;
            }
            'label_23: loop {
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_9);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v1.try_as_i32()? + 12) as usize,
                )?);
                local_6 = v1.try_as_i32()?;
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_23;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(local_0);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_7 = v0.try_as_i32()?;
            v0 = TaggedVal::from(0i32);
            local_9 = v0.try_as_i32()?;
            'label_24: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_24;
                }
                v0 = TaggedVal::from(0i32);
                local_9 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                local_3 = v0.try_as_i32()?;
                'label_25: loop {
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v2 = TaggedVal::from(192i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v2 = TaggedVal::from(128i32);
                    v1 = TaggedVal::from((v1.try_as_i32()? == v2.try_as_i32()?) as i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_10 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_25;
                    }
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_9);
            v1 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_6);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_9 = v0.try_as_i32()?;
            local_10 = v0.try_as_i32()?;
            'label_26: loop {
                'label_27: loop {
                    'label_28: loop {
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 32) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        local_3 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(local_3);
                        v3 = TaggedVal::from(3i32);
                        v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        match v0.try_as_i32()? {
                            0 => {
                                {}
                                break 'label_26;
                            }
                            1 => {
                                {}
                                break 'label_27;
                            }
                            2 => {
                                {}
                                break 'label_28;
                            }
                            3 => {
                                {}
                                break 'label_27;
                            }
                            _ => {
                                {}
                                break 'label_26;
                            }
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                    local_7 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                    local_10 = v0.try_as_i32()?;
                    {}
                    break 'label_26;
                    break;
                }
                v0 = TaggedVal::from(0i32);
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_9);
                local_7 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_7);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            'label_29: loop {
                'label_30: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_29;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    v1 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 4) as usize,
                    )?);
                    v2 = TaggedVal::from(local_0);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 28) as usize,
                    )?);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 16) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_30;
                    }
                    break;
                }
                v0 = TaggedVal::from(1i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_9 = v0.try_as_i32()?;
            v0 = TaggedVal::from(1i32);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(local_0);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 28) as usize,
            )?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_10);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 28) as usize,
            )?);
            local_10 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            local_0 = v0.try_as_i32()?;
            'label_31: loop {
                'label_32: loop {
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_32;
                    }
                    v0 = TaggedVal::from(0i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_9);
                v2 = TaggedVal::from(local_10);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 16) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_31;
                }
                break;
            }
            v0 = TaggedVal::from(1i32);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_3);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_185(
        &mut self,
        arg_0: i32,
        arg_1: i32,
        arg_2: i32,
        arg_3: i32,
        arg_4: i32,
    ) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(112i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(1i32);
        local_6 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        local_7 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(257i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(0i32);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            local_8 = v0.try_as_i32()?;
            v0 = TaggedVal::from(256i32);
            local_9 = v0.try_as_i32()?;
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_9);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(
                        read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(-65i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_9);
                    local_7 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_9);
                v1 = TaggedVal::from(-1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_7 = v0.try_as_i32()?;
                v0 = TaggedVal::from(0i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_9);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_8);
                v1 = TaggedVal::from(local_9);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_7);
                local_9 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_10);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_1;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_7);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(0i32);
        v2 = TaggedVal::from(5i32);
        v3 = TaggedVal::from(local_6);
        if ValType::from(v1) != ValType::from(v2) {
            return None;
        }
        if v3.try_as_i32()? != 0 {
            v1 = v1;
        } else {
            v1 = v2;
        }
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 28) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(1054248i32);
        v2 = TaggedVal::from(1055644i32);
        v3 = TaggedVal::from(local_6);
        if ValType::from(v1) != ValType::from(v2) {
            return None;
        }
        if v3.try_as_i32()? != 0 {
            v1 = v1;
        } else {
            v1 = v2;
        }
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        'label_3: loop {
            'label_4: loop {
                'label_5: loop {
                    'label_6: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        local_6 = v0.try_as_i32()?;
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_6;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_6;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_5;
                        }
                        'label_7: loop {
                            'label_8: loop {
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_8;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_7;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(
                                    read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v1 = TaggedVal::from(-64i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_7;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            local_2 = v0.try_as_i32()?;
                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_2);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 32) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_9 = v0.try_as_i32()?;
                        'label_9: loop {
                            'label_10: loop {
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_10;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(
                                    read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v1 = TaggedVal::from(-64i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? >= v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_6);
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_9;
                            }
                            {}
                            break 'label_3;
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_3);
                    v3 = TaggedVal::from(local_6);
                    if ValType::from(v1) != ValType::from(v2) {
                        return None;
                    }
                    if v3.try_as_i32()? != 0 {
                        v1 = v1;
                    } else {
                        v1 = v2;
                    }
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 40) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(48i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(3i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(72i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(20i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(79i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(84i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(79i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(3i64);
                    write_mem_i64(
                        &mut self.memory,
                        (v0.try_as_i32()? + 52) as usize,
                        v1.try_as_i64()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(1055684i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 48) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(13i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 76) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(72i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 64) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(24i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 88) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(16i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 80) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(40i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 72) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(48i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_4);
                    self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(100i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(79i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(72i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(20i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(79i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(84i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(13i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(48i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(20i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(4i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(4i64);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 52) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(1055744i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 48) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(13i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 76) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(72i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 64) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(24i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 96) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(16i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 88) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(12i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 80) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(8i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 72) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(48i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_4);
                self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_2);
            local_6 = v0.try_as_i32()?;
            break;
        }
        'label_11: loop {
            v0 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(local_1);
            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_11;
            }
            v0 = TaggedVal::from(1i32);
            local_9 = v0.try_as_i32()?;
            'label_12: loop {
                'label_13: loop {
                    'label_14: loop {
                        'label_15: loop {
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(
                                read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? > v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_15;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_9 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            local_7 = v0.try_as_i32()?;
                            'label_16: loop {
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(local_1);
                                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_16;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_3);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 1) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                v1 = TaggedVal::from(63i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                local_9 = v0.try_as_i32()?;
                                break;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(31i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            local_3 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(223i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_14;
                            }
                            v0 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(6i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                            v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                            local_2 = v0.try_as_i32()?;
                            {}
                            break 'label_13;
                            break;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(255i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 36) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(40i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        {}
                        break 'label_12;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    local_8 = v0.try_as_i32()?;
                    'label_17: loop {
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_17;
                        }
                        v0 = TaggedVal::from(local_7);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_8 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(63i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_0 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_9);
                    v2 = TaggedVal::from(6i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                    local_9 = v0.try_as_i32()?;
                    'label_18: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(240i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_18;
                        }
                        v0 = TaggedVal::from(local_9);
                        v1 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                        local_2 = v0.try_as_i32()?;
                        {}
                        break 'label_13;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_2 = v0.try_as_i32()?;
                    'label_19: loop {
                        v0 = TaggedVal::from(local_8);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_19;
                        }
                        v0 = TaggedVal::from(local_8);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(63i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_2 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(6i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(18i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                    v2 = TaggedVal::from(1835008i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(1114112i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_11;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_2);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 36) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(1i32);
                local_9 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(40i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(128i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_12;
                }
                v0 = TaggedVal::from(2i32);
                local_9 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(2048i32);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_12;
                }
                v0 = TaggedVal::from(3i32);
                v1 = TaggedVal::from(4i32);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(65536i32);
                v2 =
                    TaggedVal::from(((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32)) as i32);
                if ValType::from(v0) != ValType::from(v1) {
                    return None;
                }
                if v2.try_as_i32()? != 0 {
                    v0 = v0;
                } else {
                    v0 = v1;
                }
                local_9 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_6);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_9);
            v2 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 44) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(48i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(20i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(5i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(108i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(79i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(100i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(79i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(72i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(20i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(80i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(84i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(81i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(5i64);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 52) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(1055828i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 48) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_1);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 88) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(13i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 76) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(72i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 64) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 104) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(16i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 96) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(36i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 80) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(32i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 72) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(48i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(1054285i32);
        v1 = TaggedVal::from(43i32);
        v2 = TaggedVal::from(local_4);
        self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_186(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1054356i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1054248i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        self.func_129(v0.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_187(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u32(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i64))?,
        );
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_244(v0.try_as_i64()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_188(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(36i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(3i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(137438953472i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 4) as usize,
                            )?);
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(12i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            local_7 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(local_7);
                            v3 = TaggedVal::from(local_6);
                            v2 = TaggedVal::from(
                                ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                            );
                            if ValType::from(v0) != ValType::from(v1) {
                                return None;
                            }
                            if v2.try_as_i32()? != 0 {
                                v0 = v0;
                            } else {
                                v0 = v1;
                            }
                            local_7 = v0.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(20i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_9 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v2 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 4) as usize,
                            )?);
                            v3 = TaggedVal::from(local_1);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 12) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                                if rets.len() != 1 {
                                    return None;
                                }
                                v0 = rets[0];
                            }
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(12i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(0i32);
                            local_10 = v0.try_as_i32()?;
                            'label_5: loop {
                                'label_6: loop {
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_4);
                                        v2 = TaggedVal::from(4i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 0) as usize,
                                        )?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 12) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_4);
                                        v2 = TaggedVal::from(28i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v1.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        write_mem_u8(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 40) as usize,
                                            v1.try_as_i32()? as u8,
                                        )?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_4);
                                        v2 = TaggedVal::from(8i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        v1 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v1.try_as_i32()? + 0) as usize,
                                        )?);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(24i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_0 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(0i32);
                                        local_1 = v0.try_as_i32()?;
                                        'label_8: loop {
                                            'label_9: loop {
                                                'label_10: loop {
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(20i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                    )?);
                                                    match v0.try_as_i32()? {
                                                        0 => {
                                                            {}
                                                            break 'label_9;
                                                        }
                                                        1 => {
                                                            {}
                                                            break 'label_10;
                                                        }
                                                        2 => {
                                                            {}
                                                            break 'label_8;
                                                        }
                                                        _ => {
                                                            {}
                                                            break 'label_9;
                                                        }
                                                    }
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(local_8);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        >= (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_6;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(3i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                local_11 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(0i32);
                                                local_1 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_9);
                                                v1 = TaggedVal::from(local_11);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_11 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 4) as usize,
                                                )?);
                                                v1 = TaggedVal::from(82i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_8;
                                                }
                                                v0 = TaggedVal::from(local_11);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )?);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )?);
                                                local_0 = v0.try_as_i32()?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(1i32);
                                            local_1 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_0);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 20) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_1);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 16) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(16i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                        )?);
                                        local_0 = v0.try_as_i32()?;
                                        v0 = TaggedVal::from(0i32);
                                        local_1 = v0.try_as_i32()?;
                                        'label_11: loop {
                                            'label_12: loop {
                                                'label_13: loop {
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(12i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                    )?);
                                                    match v0.try_as_i32()? {
                                                        0 => {
                                                            {}
                                                            break 'label_12;
                                                        }
                                                        1 => {
                                                            {}
                                                            break 'label_13;
                                                        }
                                                        2 => {
                                                            {}
                                                            break 'label_11;
                                                        }
                                                        _ => {
                                                            {}
                                                            break 'label_12;
                                                        }
                                                    }
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(local_8);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        >= (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_5;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(3i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                local_11 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_9);
                                                v1 = TaggedVal::from(local_11);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_11 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 4) as usize,
                                                )?);
                                                v1 = TaggedVal::from(82i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_11);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )?);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )?);
                                                local_0 = v0.try_as_i32()?;
                                                break;
                                            }
                                            v0 = TaggedVal::from(1i32);
                                            local_1 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_0);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 28) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        v0 = TaggedVal::from(local_3);
                                        v1 = TaggedVal::from(local_1);
                                        write_mem_i32(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 24) as usize,
                                            v1.try_as_i32()?,
                                        )?;
                                        'label_14: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            local_0 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_8);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_14;
                                            }
                                            v0 = TaggedVal::from(local_9);
                                            v1 = TaggedVal::from(local_0);
                                            v2 = TaggedVal::from(3i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            v1 = TaggedVal::from(local_3);
                                            v2 = TaggedVal::from(8i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                            );
                                            v2 = TaggedVal::from(local_0);
                                            v2 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v2.try_as_i32()? + 4) as usize,
                                            )?);
                                            {
                                                let rets = self.indirect_call(
                                                    v2.try_as_i32()? as usize,
                                                    &[v0, v1],
                                                )?;
                                                if rets.len() != 1 {
                                                    return None;
                                                }
                                                v0 = rets[0];
                                            }
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_1;
                                            }
                                            v0 = TaggedVal::from(local_10);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_10 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_7);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_2;
                                            }
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(32i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_4 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(-4i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_0 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            local_1 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_2);
                                            v1 = TaggedVal::from(8i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_2 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_3);
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 32) as usize,
                                            )?);
                                            v1 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 0) as usize,
                                            )?);
                                            v2 = TaggedVal::from(local_1);
                                            v3 = TaggedVal::from(local_3);
                                            v3 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v3.try_as_i32()? + 36) as usize,
                                            )?);
                                            v3 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v3.try_as_i32()? + 12) as usize,
                                            )?);
                                            {
                                                let rets = self.indirect_call(
                                                    v3.try_as_i32()? as usize,
                                                    &[v0, v1, v2],
                                                )?;
                                                if rets.len() != 1 {
                                                    return None;
                                                }
                                                v0 = rets[0];
                                            }
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_7;
                                            }
                                            {}
                                            break 'label_1;
                                            break;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(local_8);
                                    v2 = TaggedVal::from(1054824i32);
                                    self.func_180(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                    break;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(local_8);
                                v2 = TaggedVal::from(1054840i32);
                                self.func_180(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                )?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_8);
                            v2 = TaggedVal::from(1054840i32);
                            self.func_180(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        local_6 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(20i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_4 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(local_4);
                        v3 = TaggedVal::from(local_6);
                        v2 = TaggedVal::from(
                            ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        local_7 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_4 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        v2 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 4) as usize,
                        )?);
                        v3 = TaggedVal::from(local_1);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 12) as usize,
                        )?);
                        {
                            let rets =
                                self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                            if rets.len() != 1 {
                                return None;
                            }
                            v0 = rets[0];
                        }
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_0 = v0.try_as_i32()?;
                        'label_15: loop {
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v2 = TaggedVal::from(local_4);
                            v3 = TaggedVal::from(4i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 0) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                                if rets.len() != 1 {
                                    return None;
                                }
                                v0 = rets[0];
                            }
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_0 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(-4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_10 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_2 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 32) as usize,
                            )?);
                            v1 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v2 = TaggedVal::from(local_10);
                            v3 = TaggedVal::from(local_3);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 36) as usize,
                            )?);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 12) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                                if rets.len() != 1 {
                                    return None;
                                }
                                v0 = rets[0];
                            }
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_15;
                            }
                            {}
                            break 'label_1;
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_7 = v0.try_as_i32()?;
                    break;
                }
                'label_16: loop {
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(local_7);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_16;
                    }
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 32) as usize,
                    )?);
                    v1 = TaggedVal::from(local_5);
                    v2 = TaggedVal::from(local_7);
                    v3 = TaggedVal::from(3i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_4 = v1.try_as_i32()?;
                    v1 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v1.try_as_i32()? + 0) as usize,
                    )?);
                    v2 = TaggedVal::from(local_4);
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 4) as usize,
                    )?);
                    v3 = TaggedVal::from(local_3);
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 36) as usize,
                    )?);
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 12) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(0i32);
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_4);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_189(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_190(v0.try_as_i32()?, v1.try_as_i32()?)?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(28i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(28i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(0i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1054248i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1i64);
                write_mem_i64(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i64()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1054252i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(8i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v0 = TaggedVal::from(self.func_188(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(32i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            v0 = TaggedVal::from(1i32);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_190(v0.try_as_i32()?, v1.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_190(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(32i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
                            v1 = TaggedVal::from(1i32);
                            v2 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(self.func_244(
                                v0.try_as_i64()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                            )?);
                            local_0 = v0.try_as_i32()?;
                            {}
                            break 'label_2;
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_4 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_0 = v0.try_as_i32()?;
                        'label_5: loop {
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(127i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(15i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            local_3 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(48i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            v2 = TaggedVal::from(local_3);
                            v3 = TaggedVal::from(87i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            v3 = TaggedVal::from(local_3);
                            v4 = TaggedVal::from(10i32);
                            v3 = TaggedVal::from(
                                ((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32,
                            );
                            if ValType::from(v1) != ValType::from(v2) {
                                return None;
                            }
                            if v3.try_as_i32()? != 0 {
                                v1 = v1;
                            } else {
                                v1 = v2;
                            }
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_0 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(
                                (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                            );
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_5;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(129i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(1i32);
                        v2 = TaggedVal::from(1054572i32);
                        v3 = TaggedVal::from(2i32);
                        v4 = TaggedVal::from(local_2);
                        v5 = TaggedVal::from(local_0);
                        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                        v5 = TaggedVal::from(128i32);
                        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                        v5 = TaggedVal::from(0i32);
                        v6 = TaggedVal::from(local_0);
                        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
                        v0 = TaggedVal::from(self.func_218(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                            v4.try_as_i32()?,
                            v5.try_as_i32()?,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        {}
                        break 'label_2;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_0 = v0.try_as_i32()?;
                    'label_6: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(127i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(15i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        local_3 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(48i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        v2 = TaggedVal::from(local_3);
                        v3 = TaggedVal::from(55i32);
                        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                        v3 = TaggedVal::from(local_3);
                        v4 = TaggedVal::from(10i32);
                        v3 = TaggedVal::from(
                            ((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v1) != ValType::from(v2) {
                            return None;
                        }
                        if v3.try_as_i32()? != 0 {
                            v1 = v1;
                        } else {
                            v1 = v2;
                        }
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        local_4 = v0.try_as_i32()?;
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_6;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(128i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_4 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(129i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v2 = TaggedVal::from(1054572i32);
                    v3 = TaggedVal::from(2i32);
                    v4 = TaggedVal::from(local_2);
                    v5 = TaggedVal::from(local_0);
                    v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                    v5 = TaggedVal::from(128i32);
                    v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                    v5 = TaggedVal::from(0i32);
                    v6 = TaggedVal::from(local_0);
                    v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_218(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                        v4.try_as_i32()?,
                        v5.try_as_i32()?,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(128i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                v0 = TaggedVal::from(local_0);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(128i32);
            v2 = TaggedVal::from(1054556i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(128i32);
        v2 = TaggedVal::from(1054556i32);
        self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_191(&mut self, arg_0: i32) -> Option<i64> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(-3452326882552253247i64);
        Some(v0.try_as_i64()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_192(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        v1 = TaggedVal::from(1054260i32);
        v2 = TaggedVal::from(11i32);
        v3 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(28i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_193(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        v1 = TaggedVal::from(1054271i32);
        v2 = TaggedVal::from(14i32);
        v3 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(28i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_194(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(1114112i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        match v0.try_as_i32()? {
                            0 => {
                                {}
                                break 'label_0;
                            }
                            1 => {
                                {}
                                break 'label_1;
                            }
                            2 => {
                                {}
                                break 'label_2;
                            }
                            3 => {
                                {}
                                break 'label_3;
                            }
                            _ => {
                                {}
                                break 'label_0;
                            }
                        }
                        break;
                    }
                    'label_4: loop {
                        'label_5: loop {
                            'label_6: loop {
                                'label_7: loop {
                                    'label_8: loop {
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(12i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        match v0.try_as_i32()? {
                                            0 => {
                                                {}
                                                break 'label_0;
                                            }
                                            1 => {
                                                {}
                                                break 'label_4;
                                            }
                                            2 => {
                                                {}
                                                break 'label_5;
                                            }
                                            3 => {
                                                {}
                                                break 'label_6;
                                            }
                                            4 => {
                                                {}
                                                break 'label_7;
                                            }
                                            5 => {
                                                {}
                                                break 'label_8;
                                            }
                                            _ => {
                                                {}
                                                break 'label_0;
                                            }
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(4i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 12) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    v0 = TaggedVal::from(92i32);
                                    return Some(v0.try_as_i32()?);
                                    break;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(3i32);
                                write_mem_u8(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                    v1.try_as_i32()? as u8,
                                )?;
                                v0 = TaggedVal::from(117i32);
                                return Some(v0.try_as_i32()?);
                                break;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(2i32);
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 12) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(123i32);
                            return Some(v0.try_as_i32()?);
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                        )?);
                        v1 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(8i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        local_2 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(2i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(28i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(15i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_1 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(48i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(87i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v2 = TaggedVal::from(local_1);
                        v3 = TaggedVal::from(10i32);
                        v2 = TaggedVal::from(
                            ((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        local_1 = v0.try_as_i32()?;
                        'label_9: loop {
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_9;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(-1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            write_mem_i32(
                                &mut self.memory,
                                (v0.try_as_i32()? + 8) as usize,
                                v1.try_as_i32()?,
                            )?;
                            v0 = TaggedVal::from(local_1);
                            return Some(v0.try_as_i32()?);
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(1i32);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        return Some(v0.try_as_i32()?);
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(0i32);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(125i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(92i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(0i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_195(
        &mut self,
        arg_0: i32,
        arg_1: i32,
        arg_2: i32,
        arg_3: i32,
        arg_4: i32,
    ) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i64 = 0i64;
        let mut local_10: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_6 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 5) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            local_7 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_8 = v0.try_as_i32()?;
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(1i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_8);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054501i32);
                v2 = TaggedVal::from(1054503i32);
                v3 = TaggedVal::from(local_7);
                v4 = TaggedVal::from(255i32);
                v3 = TaggedVal::from(v3.try_as_i32()? & v4.try_as_i32()?);
                local_7 = v3.try_as_i32()?;
                if ValType::from(v1) != ValType::from(v2) {
                    return None;
                }
                if v3.try_as_i32()? != 0 {
                    v1 = v1;
                } else {
                    v1 = v2;
                }
                v2 = TaggedVal::from(2i32);
                v3 = TaggedVal::from(3i32);
                v4 = TaggedVal::from(local_7);
                if ValType::from(v2) != ValType::from(v3) {
                    return None;
                }
                if v4.try_as_i32()? != 0 {
                    v2 = v2;
                } else {
                    v2 = v3;
                }
                v3 = TaggedVal::from(local_8);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(1i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_8 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(local_8);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(1i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_8 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054336i32);
                v2 = TaggedVal::from(2i32);
                v3 = TaggedVal::from(local_8);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                v2 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_6 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_7);
                v1 = TaggedVal::from(255i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(1i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_8);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054496i32);
                v2 = TaggedVal::from(3i32);
                v3 = TaggedVal::from(local_8);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_8 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_6 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(1i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 23) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(52i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1054468i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_8);
            v1 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v1.try_as_i32()? + 24) as usize,
            )?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(23i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_8);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_9 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_8);
            v0 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            local_10 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_8);
            v1 = TaggedVal::from(
                read_mem_u8(&self.memory, (v1.try_as_i32()? + 32) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 56) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_10);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_9);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 32) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_8);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 24) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 48) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(self.func_205(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(8i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1054336i32);
            v2 = TaggedVal::from(2i32);
            v0 = TaggedVal::from(self.func_205(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
            )?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_5);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 48) as usize,
            )?);
            v1 = TaggedVal::from(1054499i32);
            v2 = TaggedVal::from(2i32);
            v3 = TaggedVal::from(local_5);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 52) as usize,
            )?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_6 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 5) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_6);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_196(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(36i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(1054328i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(79i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 44) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(40i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 32) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_2);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_197(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 4) as usize)?);
        v0 =
            TaggedVal::from(self.func_184(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_198(
        &mut self,
        arg_0: i32,
        arg_1: i32,
        arg_2: i32,
        arg_3: i32,
        arg_4: i32,
    ) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut local_5: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_5 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_3);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 20) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(44i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(2i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(60i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(83i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(2i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 28) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(1054340i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(79i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 52) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_5);
        v2 = TaggedVal::from(48i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_5);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 56) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(local_5);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 48) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_5);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_4);
        self.func_186(v0.try_as_i32()?, v1.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_199(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 4) as usize)?);
        v2 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v2.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_200(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_201(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 12) as usize,
        )?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_202(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_203(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_204(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(20i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(12i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(13i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(79i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(12i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 16) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(24i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(20i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(3i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(3i64);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 28) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1054376i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 24) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 40) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(24i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_205(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(0i32);
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(40i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_5 = v0.try_as_i32()?;
            'label_2: loop {
                'label_3: loop {
                    'label_4: loop {
                        'label_5: loop {
                            'label_6: loop {
                                'label_7: loop {
                                    v0 = TaggedVal::from(local_0);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                    )?);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_7;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                    )?);
                                    v1 = TaggedVal::from(1054492i32);
                                    v2 = TaggedVal::from(4i32);
                                    v3 = TaggedVal::from(local_0);
                                    v3 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v3.try_as_i32()? + 4) as usize,
                                    )?);
                                    v3 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v3.try_as_i32()? + 12) as usize,
                                    )?);
                                    {
                                        let rets = self.indirect_call(
                                            v3.try_as_i32()? as usize,
                                            &[v0, v1, v2],
                                        )?;
                                        if rets.len() != 1 {
                                            return None;
                                        }
                                        v0 = rets[0];
                                    }
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_2;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(10i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 40) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(4294967306i64);
                                write_mem_i64(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 32) as usize,
                                    v1.try_as_i64()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_2);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 28) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(0i32);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 24) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_2);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 20) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_1);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 16) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(8i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(10i32);
                                v2 = TaggedVal::from(local_1);
                                v3 = TaggedVal::from(local_2);
                                self.func_206(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                    v3.try_as_i32()?,
                                )?;
                                'label_8: loop {
                                    'label_9: loop {
                                        'label_10: loop {
                                            'label_11: loop {
                                                v0 = TaggedVal::from(local_3);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 8) as usize,
                                                )?);
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_3);
                                                v0 = TaggedVal::from(read_mem_i32(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 12) as usize,
                                                )?);
                                                local_4 = v0.try_as_i32()?;
                                                'label_12: loop {
                                                    v0 = TaggedVal::from(local_3);
                                                    v1 = TaggedVal::from(local_4);
                                                    v2 = TaggedVal::from(local_3);
                                                    v2 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v2.try_as_i32()? + 24) as usize,
                                                    )?);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    v2 = TaggedVal::from(1i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    local_4 = v1.try_as_i32()?;
                                                    write_mem_i32(
                                                        &mut self.memory,
                                                        (v0.try_as_i32()? + 24) as usize,
                                                        v1.try_as_i32()?,
                                                    )?;
                                                    'label_13: loop {
                                                        'label_14: loop {
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_3);
                                                            v1 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v1.try_as_i32()? + 36) as usize,
                                                            )?);
                                                            local_6 = v1.try_as_i32()?;
                                                            v0 = TaggedVal::from(
                                                                ((v0.try_as_i32()? as u32)
                                                                    >= (v1.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_14;
                                                            }
                                                            v0 = TaggedVal::from(local_3);
                                                            v0 = TaggedVal::from(read_mem_i32(
                                                                &self.memory,
                                                                (v0.try_as_i32()? + 20) as usize,
                                                            )?);
                                                            local_7 = v0.try_as_i32()?;
                                                            {}
                                                            break 'label_13;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_3);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 20) as usize,
                                                        )?);
                                                        local_7 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_4);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_13;
                                                        }
                                                        v0 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(5i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                >= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_5;
                                                        }
                                                        v0 = TaggedVal::from(local_3);
                                                        v0 = TaggedVal::from(read_mem_i32(
                                                            &self.memory,
                                                            (v0.try_as_i32()? + 16) as usize,
                                                        )?);
                                                        v1 = TaggedVal::from(local_4);
                                                        v2 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(
                                                            v1.try_as_i32()?
                                                                .wrapping_sub(v2.try_as_i32()?),
                                                        );
                                                        local_8 = v1.try_as_i32()?;
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_9 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(local_5);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_9;
                                                        }
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(local_5);
                                                        v2 = TaggedVal::from(local_6);
                                                        v0 = TaggedVal::from(self.func_170(
                                                            v0.try_as_i32()?,
                                                            v1.try_as_i32()?,
                                                            v2.try_as_i32()?,
                                                        )?);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == 0) as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_9;
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 28) as usize,
                                                    )?);
                                                    local_9 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_4);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_10;
                                                    }
                                                    v0 = TaggedVal::from(local_7);
                                                    v1 = TaggedVal::from(local_9);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_10;
                                                    }
                                                    v0 = TaggedVal::from(local_3);
                                                    v1 = TaggedVal::from(local_6);
                                                    v2 = TaggedVal::from(local_3);
                                                    v3 = TaggedVal::from(16i32);
                                                    v2 = TaggedVal::from(
                                                        v2.try_as_i32()?
                                                            .wrapping_add(v3.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    v2 = TaggedVal::from(23i32);
                                                    v1 = TaggedVal::from(
                                                        v1.try_as_i32()?
                                                            .wrapping_add(v2.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(
                                                        read_mem_u8(
                                                            &self.memory,
                                                            (v1.try_as_i32()? + 0) as usize,
                                                        )
                                                        .and_then(|x| Some(x as i32))?,
                                                    );
                                                    v2 = TaggedVal::from(local_3);
                                                    v2 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v2.try_as_i32()? + 16) as usize,
                                                    )?);
                                                    v3 = TaggedVal::from(local_4);
                                                    v2 = TaggedVal::from(
                                                        v2.try_as_i32()?
                                                            .wrapping_add(v3.try_as_i32()?),
                                                    );
                                                    v3 = TaggedVal::from(local_9);
                                                    v4 = TaggedVal::from(local_4);
                                                    v3 = TaggedVal::from(
                                                        v3.try_as_i32()?
                                                            .wrapping_sub(v4.try_as_i32()?),
                                                    );
                                                    self.func_206(
                                                        v0.try_as_i32()?,
                                                        v1.try_as_i32()?,
                                                        v2.try_as_i32()?,
                                                        v3.try_as_i32()?,
                                                    )?;
                                                    v0 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 4) as usize,
                                                    )?);
                                                    local_4 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(local_3);
                                                    v0 = TaggedVal::from(read_mem_i32(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                    )?);
                                                    v1 = TaggedVal::from(1i32);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == v1.try_as_i32()?)
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        continue 'label_12;
                                                    }
                                                    break;
                                                }
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_3);
                                            v1 = TaggedVal::from(local_3);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 28) as usize,
                                            )?);
                                            write_mem_i32(
                                                &mut self.memory,
                                                (v0.try_as_i32()? + 24) as usize,
                                                v1.try_as_i32()?,
                                            )?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_0);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 8) as usize,
                                        )?);
                                        v1 = TaggedVal::from(0i32);
                                        write_mem_u8(
                                            &mut self.memory,
                                            (v0.try_as_i32()? + 0) as usize,
                                            v1.try_as_i32()? as u8,
                                        )?;
                                        v0 = TaggedVal::from(local_2);
                                        local_4 = v0.try_as_i32()?;
                                        {}
                                        break 'label_8;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 8) as usize,
                                    )?);
                                    v1 = TaggedVal::from(1i32);
                                    write_mem_u8(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 0) as usize,
                                        v1.try_as_i32()? as u8,
                                    )?;
                                    v0 = TaggedVal::from(local_8);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_4 = v0.try_as_i32()?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                )?);
                                local_9 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_6 = v0.try_as_i32()?;
                                'label_15: loop {
                                    v0 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    v1 = TaggedVal::from(local_2);
                                    v2 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(
                                        (v1.try_as_i32()? == v2.try_as_i32()?) as i32,
                                    );
                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                    local_7 = v0.try_as_i32()?;
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_15;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v1 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_4;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v0 = TaggedVal::from(
                                        read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    v1 = TaggedVal::from(-65i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_4;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(local_1);
                                v2 = TaggedVal::from(local_4);
                                v3 = TaggedVal::from(local_9);
                                v3 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v3.try_as_i32()? + 12) as usize,
                                )?);
                                {
                                    let rets = self
                                        .indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                                    if rets.len() != 1 {
                                        return None;
                                    }
                                    v0 = rets[0];
                                }
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_2;
                                }
                                'label_16: loop {
                                    v0 = TaggedVal::from(local_7);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_16;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v1 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_3;
                                    }
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v0 = TaggedVal::from(
                                        read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    v1 = TaggedVal::from(-65i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_3;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_1);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_1 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                );
                                local_2 = v0.try_as_i32()?;
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_6;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(0i32);
                            local_4 = v0.try_as_i32()?;
                            {}
                            break 'label_0;
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(4i32);
                        v2 = TaggedVal::from(1055112i32);
                        self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(0i32);
                    v3 = TaggedVal::from(local_4);
                    v4 = TaggedVal::from(1055612i32);
                    self.func_185(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                        v4.try_as_i32()?,
                    )?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(local_4);
                v3 = TaggedVal::from(local_2);
                v4 = TaggedVal::from(1055628i32);
                self.func_185(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                )?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_4);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_206(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(0i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(3i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(4i32);
                        v1 = TaggedVal::from(local_5);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(local_5);
                        v3 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(
                            ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        local_6 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_4 = v0.try_as_i32()?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v1 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_5);
                            v2 = TaggedVal::from(1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_5 = v1.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_4;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        local_4 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(-8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_7 = v1.try_as_i32()?;
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(255i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(16843009i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_mul(v1.try_as_i32()?));
                    local_5 = v0.try_as_i32()?;
                    'label_5: loop {
                        'label_6: loop {
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_6 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            v1 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                            local_8 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                            v1 = TaggedVal::from(local_8);
                            v2 = TaggedVal::from(-16843009i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v1 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v1.try_as_i32()? + 0) as usize,
                            )?);
                            v2 = TaggedVal::from(local_5);
                            v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
                            local_6 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(-1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
                            v2 = TaggedVal::from(local_6);
                            v3 = TaggedVal::from(-16843009i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                            v1 = TaggedVal::from(-2139062144i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(8i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_4 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_6;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(1054884i32);
                    self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(1i32);
                local_6 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_5 = v0.try_as_i32()?;
            v0 = TaggedVal::from(0i32);
            local_6 = v0.try_as_i32()?;
            'label_7: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_7;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_8 = v0.try_as_i32()?;
                v0 = TaggedVal::from(0i32);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(255i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                local_6 = v0.try_as_i32()?;
                'label_8: loop {
                    'label_9: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_5);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v1 = TaggedVal::from(local_6);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_8;
                        }
                        v0 = TaggedVal::from(local_8);
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_5 = v1.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_9;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_8);
                    v1 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_5 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(1i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_5);
                local_5 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_4);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_5 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_5);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_6);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_207(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i64 = 0i64;
        let mut local_8: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_5 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(1i32);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_6);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054501i32);
                v2 = TaggedVal::from(1054511i32);
                v3 = TaggedVal::from(local_5);
                if ValType::from(v1) != ValType::from(v2) {
                    return None;
                }
                if v3.try_as_i32()? != 0 {
                    v1 = v1;
                } else {
                    v1 = v2;
                }
                v2 = TaggedVal::from(2i32);
                v3 = TaggedVal::from(1i32);
                v4 = TaggedVal::from(local_5);
                if ValType::from(v2) != ValType::from(v3) {
                    return None;
                }
                if v4.try_as_i32()? != 0 {
                    v2 = v2;
                } else {
                    v2 = v3;
                }
                v3 = TaggedVal::from(local_6);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
                v2 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_5);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(1i32);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_6);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054509i32);
                v2 = TaggedVal::from(2i32);
                v3 = TaggedVal::from(local_6);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_6 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(1i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 23) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(52i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1054468i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v1.try_as_i32()? + 24) as usize,
            )?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(23i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_6);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_7 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_6);
            v0 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            local_8 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(
                read_mem_u8(&self.memory, (v1.try_as_i32()? + 32) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 56) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_8);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_7);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 32) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_6);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 24) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 48) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 48) as usize,
            )?);
            v1 = TaggedVal::from(1054499i32);
            v2 = TaggedVal::from(2i32);
            v3 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 52) as usize,
            )?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_4);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        v2 = TaggedVal::from(1i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_208(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(255i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_3);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                'label_2: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 9) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(1i32);
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_3);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    v1 = TaggedVal::from(1054512i32);
                    v2 = TaggedVal::from(1i32);
                    v3 = TaggedVal::from(local_3);
                    v4 = TaggedVal::from(28i32);
                    v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 0) as usize,
                    )?);
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 12) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054513i32);
                v2 = TaggedVal::from(1i32);
                v3 = TaggedVal::from(local_1);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_1 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(255i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        v1 = TaggedVal::from(0i32);
        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_209(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i64 = 0i64;
        let mut local_7: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 5) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            local_4 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_5 = v0.try_as_i32()?;
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                'label_2: loop {
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(255i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(1i32);
                    local_4 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_5);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 24) as usize,
                    )?);
                    v1 = TaggedVal::from(1054501i32);
                    v2 = TaggedVal::from(2i32);
                    v3 = TaggedVal::from(local_5);
                    v4 = TaggedVal::from(28i32);
                    v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 0) as usize,
                    )?);
                    v3 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v3.try_as_i32()? + 12) as usize,
                    )?);
                    {
                        let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_0);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    local_5 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_4 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            'label_3: loop {
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(255i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(1i32);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_5);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(1054514i32);
                v2 = TaggedVal::from(1i32);
                v3 = TaggedVal::from(local_5);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_5 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_4 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(1i32);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 23) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(52i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(1054468i32);
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v1.try_as_i32()? + 24) as usize,
            )?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 8) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(23i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 16) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
            local_6 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(read_mem_i64(
                &self.memory,
                (v0.try_as_i32()? + 16) as usize,
            )?);
            local_7 = v0.try_as_i64()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(
                read_mem_u8(&self.memory, (v1.try_as_i32()? + 32) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 56) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_7);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 40) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_6);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 32) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
            write_mem_i64(
                &mut self.memory,
                (v0.try_as_i32()? + 24) as usize,
                v1.try_as_i64()?,
            )?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(8i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_i32(
                &mut self.memory,
                (v0.try_as_i32()? + 48) as usize,
                v1.try_as_i32()?,
            )?;
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(24i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v2 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 48) as usize,
            )?);
            v1 = TaggedVal::from(1054499i32);
            v2 = TaggedVal::from(2i32);
            v3 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 52) as usize,
            )?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 5) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_4);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(64i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_210(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_2);
        self.func_209(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_211(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(1i32);
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            v1 = TaggedVal::from(1054532i32);
            v2 = TaggedVal::from(1i32);
            v3 = TaggedVal::from(local_0);
            v4 = TaggedVal::from(28i32);
            v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
            v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_212(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2048i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(65536i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 14) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(224i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(6i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 13) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(3i32);
                        local_1 = v0.try_as_i32()?;
                        {}
                        break 'label_0;
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_1);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(12i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(1i32);
                    local_1 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(63i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(128i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 13) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(6i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(192i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(12i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(2i32);
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 15) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(18i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(240i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 12) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(6i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 14) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(12i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 13) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(4i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_205(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_213(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1054776i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_214(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_2);
        v0 =
            TaggedVal::from(self.func_205(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_215(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2048i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(65536i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 14) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(12i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(224i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 12) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(6i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(63i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        v2 = TaggedVal::from(128i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 13) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(3i32);
                        local_1 = v0.try_as_i32()?;
                        {}
                        break 'label_0;
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_1);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(12i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(1i32);
                    local_1 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(63i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(128i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 13) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(6i32);
                v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(192i32);
                v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(12i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(2i32);
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 15) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(18i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(240i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 12) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(6i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 14) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            v2 = TaggedVal::from(12i32);
            v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(63i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(128i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 13) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(4i32);
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_205(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_216(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(1054776i32);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_217(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_218(
        &mut self,
        arg_0: i32,
        arg_1: i32,
        arg_2: i32,
        arg_3: i32,
        arg_4: i32,
        arg_5: i32,
    ) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut local_5: i32 = arg_5;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(43i32);
                v1 = TaggedVal::from(1114112i32);
                v2 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
                local_6 = v2.try_as_i32()?;
                v3 = TaggedVal::from(1i32);
                v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                local_1 = v2.try_as_i32()?;
                if ValType::from(v0) != ValType::from(v1) {
                    return None;
                }
                if v2.try_as_i32()? != 0 {
                    v0 = v0;
                } else {
                    v0 = v1;
                }
                local_7 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_5);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_8 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_8 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_6 = v0.try_as_i32()?;
            v0 = TaggedVal::from(45i32);
            local_7 = v0.try_as_i32()?;
            break;
        }
        'label_2: loop {
            'label_3: loop {
                v0 = TaggedVal::from(local_6);
                v1 = TaggedVal::from(4i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_3;
                }
                v0 = TaggedVal::from(0i32);
                local_2 = v0.try_as_i32()?;
                {}
                break 'label_2;
                break;
            }
            v0 = TaggedVal::from(0i32);
            local_9 = v0.try_as_i32()?;
            'label_4: loop {
                v0 = TaggedVal::from(local_3);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_4;
                }
                v0 = TaggedVal::from(local_3);
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                local_1 = v0.try_as_i32()?;
                'label_5: loop {
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v2 = TaggedVal::from(192i32);
                    v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                    v2 = TaggedVal::from(128i32);
                    v1 = TaggedVal::from((v1.try_as_i32()? == v2.try_as_i32()?) as i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_10 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_5;
                    }
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(local_8);
            v1 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_9);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
            local_8 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(1i32);
        local_1 = v0.try_as_i32()?;
        'label_6: loop {
            'label_7: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_7;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_7);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(self.func_219(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                )?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_6;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(local_5);
                v3 = TaggedVal::from(local_0);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_6;
                break;
            }
            'label_8: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(12i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_9 = v0.try_as_i32()?;
                v1 = TaggedVal::from(local_8);
                v0 =
                    TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_8;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_7);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(self.func_219(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                )?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_6;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(local_5);
                v3 = TaggedVal::from(local_0);
                v4 = TaggedVal::from(28i32);
                v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                return Some(v0.try_as_i32()?);
                break;
            }
            'label_9: loop {
                'label_10: loop {
                    v0 = TaggedVal::from(local_6);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_10;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(local_8);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    local_8 = v0.try_as_i32()?;
                    'label_11: loop {
                        'label_12: loop {
                            'label_13: loop {
                                v0 = TaggedVal::from(1i32);
                                v1 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v1.try_as_i32()? + 32) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                local_10 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(local_10);
                                v3 = TaggedVal::from(3i32);
                                v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
                                if ValType::from(v0) != ValType::from(v1) {
                                    return None;
                                }
                                if v2.try_as_i32()? != 0 {
                                    v0 = v0;
                                } else {
                                    v0 = v1;
                                }
                                match v0.try_as_i32()? {
                                    0 => {
                                        {}
                                        break 'label_11;
                                    }
                                    1 => {
                                        {}
                                        break 'label_12;
                                    }
                                    2 => {
                                        {}
                                        break 'label_13;
                                    }
                                    3 => {
                                        {}
                                        break 'label_12;
                                    }
                                    _ => {
                                        {}
                                        break 'label_11;
                                    }
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(
                                (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                            );
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_9);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(
                                (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                            );
                            local_8 = v0.try_as_i32()?;
                            {}
                            break 'label_11;
                            break;
                        }
                        v0 = TaggedVal::from(0i32);
                        local_8 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_9);
                        local_1 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    'label_14: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_9;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                        )?);
                        v1 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        v2 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 28) as usize,
                        )?);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 16) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                            if rets.len() != 1 {
                                return None;
                            }
                            v0 = rets[0];
                        }
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_14;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(1i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(48i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 32) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                local_11 = v0.try_as_i32()?;
                v0 = TaggedVal::from(1i32);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 32) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_7);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(local_3);
                v0 = TaggedVal::from(self.func_219(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                )?);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_6;
                }
                v0 = TaggedVal::from(0i32);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_9);
                v1 = TaggedVal::from(local_8);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                local_10 = v0.try_as_i32()?;
                local_3 = v0.try_as_i32()?;
                'label_15: loop {
                    'label_16: loop {
                        'label_17: loop {
                            v0 = TaggedVal::from(1i32);
                            v1 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v1.try_as_i32()? + 32) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            local_9 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(local_9);
                            v3 = TaggedVal::from(3i32);
                            v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
                            if ValType::from(v0) != ValType::from(v1) {
                                return None;
                            }
                            if v2.try_as_i32()? != 0 {
                                v0 = v0;
                            } else {
                                v0 = v1;
                            }
                            match v0.try_as_i32()? {
                                0 => {
                                    {}
                                    break 'label_15;
                                }
                                1 => {
                                    {}
                                    break 'label_16;
                                }
                                2 => {
                                    {}
                                    break 'label_17;
                                }
                                3 => {
                                    {}
                                    break 'label_16;
                                }
                                _ => {
                                    {}
                                    break 'label_15;
                                }
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_10);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_10);
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(1i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        local_3 = v0.try_as_i32()?;
                        {}
                        break 'label_15;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_10);
                    local_1 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_1 = v0.try_as_i32()?;
                'label_18: loop {
                    'label_19: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_18;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                        )?);
                        v1 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 4) as usize,
                        )?);
                        v2 = TaggedVal::from(local_0);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 28) as usize,
                        )?);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 16) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                            if rets.len() != 1 {
                                return None;
                            }
                            v0 = rets[0];
                        }
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_19;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(1i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(1i32);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(local_5);
                v3 = TaggedVal::from(local_0);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 28) as usize,
                )?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_6;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_9 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 28) as usize,
                )?);
                local_3 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                local_2 = v0.try_as_i32()?;
                'label_20: loop {
                    'label_21: loop {
                        v0 = TaggedVal::from(local_9);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_9 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_20;
                        }
                        v0 = TaggedVal::from(1i32);
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_10);
                        v2 = TaggedVal::from(local_3);
                        v2 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v2.try_as_i32()? + 16) as usize,
                        )?);
                        {
                            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                            if rets.len() != 1 {
                                return None;
                            }
                            v0 = rets[0];
                        }
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_6;
                        }
                        {}
                        continue 'label_21;
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_11);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 32) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_6);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(0i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_10 = v0.try_as_i32()?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(local_7);
            v2 = TaggedVal::from(local_2);
            v3 = TaggedVal::from(local_3);
            v0 = TaggedVal::from(self.func_219(
                v0.try_as_i32()?,
                v1.try_as_i32()?,
                v2.try_as_i32()?,
                v3.try_as_i32()?,
            )?);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_6;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(local_5);
            v3 = TaggedVal::from(local_0);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 28) as usize,
            )?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_6;
            }
            v0 = TaggedVal::from(local_8);
            v1 = TaggedVal::from(1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_9 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 28) as usize,
            )?);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            local_0 = v0.try_as_i32()?;
            'label_22: loop {
                'label_23: loop {
                    v0 = TaggedVal::from(local_9);
                    v1 = TaggedVal::from(-1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_9 = v0.try_as_i32()?;
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_23;
                    }
                    v0 = TaggedVal::from(0i32);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(1i32);
                local_1 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(local_10);
                v2 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 16) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_22;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_219(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(1114112i32);
                v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(1i32);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(local_0);
                v3 = TaggedVal::from(28i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 16) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_0;
                }
                break;
            }
            'label_2: loop {
                v0 = TaggedVal::from(local_2);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_2;
                }
                v0 = TaggedVal::from(0i32);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(local_3);
            v3 = TaggedVal::from(local_0);
            v4 = TaggedVal::from(28i32);
            v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
            v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_4 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_4);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_220(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(local_0);
        v4 = TaggedVal::from(28i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_221(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(28i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(16i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(8i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(8i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(8i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v0 =
            TaggedVal::from(self.func_188(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_222(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        v1 = TaggedVal::from(4i32);
        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_223(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        v1 = TaggedVal::from(5i32);
        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_224(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v1.try_as_i32()? + 24) as usize,
        )?);
        v2 = TaggedVal::from(local_2);
        v3 = TaggedVal::from(local_3);
        v4 = TaggedVal::from(local_1);
        v5 = TaggedVal::from(28i32);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v4 = TaggedVal::from(read_mem_i32(&self.memory, (v4.try_as_i32()? + 0) as usize)?);
        v4 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v4.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v4.try_as_i32()? as usize, &[v1, v2, v3])?;
            if rets.len() != 1 {
                return None;
            }
            v1 = rets[0];
        }
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 8) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_3);
        v1 = TaggedVal::from((v1.try_as_i32()? == 0) as i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 9) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_225(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        v1 = TaggedVal::from(1054515i32);
        v2 = TaggedVal::from(1i32);
        v3 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(28i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        local_2 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(0i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 5) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_226(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_0);
        v3 = TaggedVal::from(28i32);
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
        v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
        v2 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v2.try_as_i32()? + 16) as usize,
        )?);
        {
            let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_227(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut local_13: i32 = 0i32;
        let mut local_14: i32 = 0i32;
        let mut local_15: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(1i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(34i32);
                v2 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(28i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 16) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        local_5 = v0.try_as_i32()?;
                        {}
                        break 'label_2;
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_6 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    local_5 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_0);
                    local_7 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(0i32);
                    local_8 = v0.try_as_i32()?;
                    'label_4: loop {
                        'label_5: loop {
                            v0 = TaggedVal::from(local_7);
                            local_9 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_10 = v0.try_as_i32()?;
                            'label_6: loop {
                                'label_7: loop {
                                    'label_8: loop {
                                        v0 = TaggedVal::from(local_7);
                                        v0 = TaggedVal::from(
                                            read_mem_i8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        local_11 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(-1i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? > v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_8;
                                        }
                                        'label_9: loop {
                                            'label_10: loop {
                                                v0 = TaggedVal::from(local_10);
                                                v1 = TaggedVal::from(local_6);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_10;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                local_12 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_6);
                                                local_7 = v0.try_as_i32()?;
                                                {}
                                                break 'label_9;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_7);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 1) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(63i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            local_12 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_7);
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_10 = v0.try_as_i32()?;
                                            local_7 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_11);
                                        v1 = TaggedVal::from(31i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        local_4 = v0.try_as_i32()?;
                                        'label_11: loop {
                                            v0 = TaggedVal::from(local_11);
                                            v1 = TaggedVal::from(255i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            local_11 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(223i32);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    > (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_11;
                                            }
                                            v0 = TaggedVal::from(local_12);
                                            v1 = TaggedVal::from(local_4);
                                            v2 = TaggedVal::from(6i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? | v1.try_as_i32()?,
                                            );
                                            local_12 = v0.try_as_i32()?;
                                            {}
                                            break 'label_7;
                                            break;
                                        }
                                        'label_12: loop {
                                            'label_13: loop {
                                                v0 = TaggedVal::from(local_7);
                                                v1 = TaggedVal::from(local_6);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_13;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                local_13 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_6);
                                                local_14 = v0.try_as_i32()?;
                                                {}
                                                break 'label_12;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_7);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(63i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            local_13 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_7);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_10 = v0.try_as_i32()?;
                                            local_14 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_13);
                                        v1 = TaggedVal::from(local_12);
                                        v2 = TaggedVal::from(6i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                        );
                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                        local_12 = v0.try_as_i32()?;
                                        'label_14: loop {
                                            v0 = TaggedVal::from(local_11);
                                            v1 = TaggedVal::from(240i32);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_14;
                                            }
                                            v0 = TaggedVal::from(local_12);
                                            v1 = TaggedVal::from(local_4);
                                            v2 = TaggedVal::from(12i32);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? | v1.try_as_i32()?,
                                            );
                                            local_12 = v0.try_as_i32()?;
                                            {}
                                            break 'label_7;
                                            break;
                                        }
                                        'label_15: loop {
                                            'label_16: loop {
                                                v0 = TaggedVal::from(local_14);
                                                v1 = TaggedVal::from(local_6);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_16;
                                                }
                                                v0 = TaggedVal::from(0i32);
                                                local_11 = v0.try_as_i32()?;
                                                v0 = TaggedVal::from(local_10);
                                                local_7 = v0.try_as_i32()?;
                                                {}
                                                break 'label_15;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_14);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_7 = v0.try_as_i32()?;
                                            v0 = TaggedVal::from(local_14);
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(63i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            local_11 = v0.try_as_i32()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_12);
                                        v1 = TaggedVal::from(6i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                        );
                                        v1 = TaggedVal::from(local_4);
                                        v2 = TaggedVal::from(18i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                        );
                                        v2 = TaggedVal::from(1835008i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                        v1 = TaggedVal::from(local_11);
                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                        local_12 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(1114112i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_6;
                                        }
                                        {}
                                        break 'label_4;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_11);
                                    v1 = TaggedVal::from(255i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    local_12 = v0.try_as_i32()?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_10);
                                local_7 = v0.try_as_i32()?;
                                break;
                            }
                            v0 = TaggedVal::from(2i32);
                            local_10 = v0.try_as_i32()?;
                            'label_17: loop {
                                'label_18: loop {
                                    'label_19: loop {
                                        'label_20: loop {
                                            'label_21: loop {
                                                'label_22: loop {
                                                    v0 = TaggedVal::from(local_12);
                                                    v1 = TaggedVal::from(-9i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_11 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(30i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            <= (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_22;
                                                    }
                                                    v0 = TaggedVal::from(local_12);
                                                    v1 = TaggedVal::from(92i32);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? != v1.try_as_i32()?)
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_21;
                                                    }
                                                    {}
                                                    break 'label_20;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(116i32);
                                                local_14 = v0.try_as_i32()?;
                                                'label_23: loop {
                                                    'label_24: loop {
                                                        v0 = TaggedVal::from(local_11);
                                                        match v0.try_as_i32()? {
                                                            0 => {
                                                                {}
                                                                break 'label_18;
                                                            }
                                                            1 => {
                                                                {}
                                                                break 'label_23;
                                                            }
                                                            2 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            3 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            4 => {
                                                                {}
                                                                break 'label_24;
                                                            }
                                                            5 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            6 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            7 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            8 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            9 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            10 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            11 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            12 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            13 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            14 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            15 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            16 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            17 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            18 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            19 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            20 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            21 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            22 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            23 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            24 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            25 => {
                                                                {}
                                                                break 'label_20;
                                                            }
                                                            26 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            27 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            28 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            29 => {
                                                                {}
                                                                break 'label_21;
                                                            }
                                                            30 => {
                                                                {}
                                                                break 'label_20;
                                                            }
                                                            _ => {
                                                                {}
                                                                break 'label_18;
                                                            }
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(114i32);
                                                    local_14 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_18;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(110i32);
                                                local_14 = v0.try_as_i32()?;
                                                {}
                                                break 'label_18;
                                                break;
                                            }
                                            'label_25: loop {
                                                v0 = TaggedVal::from(local_12);
                                                v0 = TaggedVal::from(
                                                    self.func_228(v0.try_as_i32()?)?,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_25;
                                                }
                                                'label_26: loop {
                                                    'label_27: loop {
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(65536i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_27;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(131072i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_26;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-918000i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(196112i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-201547i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(716213i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-195102i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(1506i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-191457i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(3103i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-183970i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(14i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(2097150i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(178206i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-173790i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(34i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        v0 = TaggedVal::from(local_12);
                                                        v1 = TaggedVal::from(-177973i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(10i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                <= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_25;
                                                        }
                                                        {}
                                                        break 'label_17;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_12);
                                                    v1 = TaggedVal::from(1055932i32);
                                                    v2 = TaggedVal::from(41i32);
                                                    v3 = TaggedVal::from(1056014i32);
                                                    v4 = TaggedVal::from(290i32);
                                                    v5 = TaggedVal::from(1056304i32);
                                                    v6 = TaggedVal::from(309i32);
                                                    v0 = TaggedVal::from(self.func_229(
                                                        v0.try_as_i32()?,
                                                        v1.try_as_i32()?,
                                                        v2.try_as_i32()?,
                                                        v3.try_as_i32()?,
                                                        v4.try_as_i32()?,
                                                        v5.try_as_i32()?,
                                                        v6.try_as_i32()?,
                                                    )?);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? == 0) as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_25;
                                                    }
                                                    {}
                                                    break 'label_17;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_12);
                                                v1 = TaggedVal::from(1056613i32);
                                                v2 = TaggedVal::from(38i32);
                                                v3 = TaggedVal::from(1056689i32);
                                                v4 = TaggedVal::from(175i32);
                                                v5 = TaggedVal::from(1056864i32);
                                                v6 = TaggedVal::from(419i32);
                                                v0 = TaggedVal::from(self.func_229(
                                                    v0.try_as_i32()?,
                                                    v1.try_as_i32()?,
                                                    v2.try_as_i32()?,
                                                    v3.try_as_i32()?,
                                                    v4.try_as_i32()?,
                                                    v5.try_as_i32()?,
                                                    v6.try_as_i32()?,
                                                )?);
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_17;
                                                }
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_12);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? | v1.try_as_i32()?,
                                            );
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()?.leading_zeros() as i32),
                                            );
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? as u32)
                                                    >> (v1.try_as_i32()? % 32),
                                            );
                                            v1 = TaggedVal::from(7i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? ^ v1.try_as_i32()?,
                                            );
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? as u32 as u64 as i64),
                                            );
                                            v1 = TaggedVal::from(21474836480i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? | v1.try_as_i64()?,
                                            );
                                            local_15 = v0.try_as_i64()?;
                                            v0 = TaggedVal::from(3i32);
                                            local_10 = v0.try_as_i32()?;
                                            {}
                                            break 'label_19;
                                            break;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_12);
                                    local_14 = v0.try_as_i32()?;
                                    break;
                                }
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_1);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 4) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_0);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_5);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 8) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                v0 = TaggedVal::from(local_3);
                                v1 = TaggedVal::from(local_8);
                                write_mem_i32(
                                    &mut self.memory,
                                    (v0.try_as_i32()? + 12) as usize,
                                    v1.try_as_i32()?,
                                )?;
                                'label_28: loop {
                                    'label_29: loop {
                                        v0 = TaggedVal::from(local_8);
                                        v1 = TaggedVal::from(local_5);
                                        v0 = TaggedVal::from(
                                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_29;
                                        }
                                        'label_30: loop {
                                            v0 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_30;
                                            }
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(local_1);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_30;
                                            }
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(local_1);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_29;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_i8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(-65i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_29;
                                            }
                                            break;
                                        }
                                        'label_31: loop {
                                            v0 = TaggedVal::from(local_8);
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_31;
                                            }
                                            v0 = TaggedVal::from(local_8);
                                            v1 = TaggedVal::from(local_1);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_31;
                                            }
                                            v0 = TaggedVal::from(local_8);
                                            v1 = TaggedVal::from(local_1);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_29;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(local_8);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_i8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(-65i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_29;
                                            }
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v0 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v0.try_as_i32()? + 24) as usize,
                                        )?);
                                        v1 = TaggedVal::from(local_0);
                                        v2 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        v2 = TaggedVal::from(local_8);
                                        v3 = TaggedVal::from(local_5);
                                        v2 = TaggedVal::from(
                                            v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?),
                                        );
                                        v3 = TaggedVal::from(local_2);
                                        v3 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v3.try_as_i32()? + 28) as usize,
                                        )?);
                                        v3 = TaggedVal::from(read_mem_i32(
                                            &self.memory,
                                            (v3.try_as_i32()? + 12) as usize,
                                        )?);
                                        {
                                            let rets = self.indirect_call(
                                                v3.try_as_i32()? as usize,
                                                &[v0, v1, v2],
                                            )?;
                                            if rets.len() != 1 {
                                                return None;
                                            }
                                            v0 = rets[0];
                                        }
                                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_28;
                                        }
                                        v0 = TaggedVal::from(1i32);
                                        local_4 = v0.try_as_i32()?;
                                        {}
                                        break 'label_1;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(local_3);
                                    v2 = TaggedVal::from(12i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 24) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(local_3);
                                    v2 = TaggedVal::from(8i32);
                                    v1 = TaggedVal::from(
                                        v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                    );
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 20) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(local_3);
                                    write_mem_i32(
                                        &mut self.memory,
                                        (v0.try_as_i32()? + 16) as usize,
                                        v1.try_as_i32()?,
                                    )?;
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(16i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    self.func_230(v0.try_as_i32()?)?;
                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                    break;
                                }
                                'label_32: loop {
                                    v0 = TaggedVal::from(local_10);
                                    local_11 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(1i32);
                                    local_4 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(92i32);
                                    local_5 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(1i32);
                                    local_10 = v0.try_as_i32()?;
                                    'label_33: loop {
                                        'label_34: loop {
                                            'label_35: loop {
                                                'label_36: loop {
                                                    'label_37: loop {
                                                        'label_38: loop {
                                                            v0 = TaggedVal::from(local_11);
                                                            match v0.try_as_i32()? {
                                                                0 => {
                                                                    {}
                                                                    break 'label_36;
                                                                }
                                                                1 => {
                                                                    {}
                                                                    break 'label_37;
                                                                }
                                                                2 => {
                                                                    {}
                                                                    break 'label_33;
                                                                }
                                                                3 => {
                                                                    {}
                                                                    break 'label_38;
                                                                }
                                                                _ => {
                                                                    {}
                                                                    break 'label_36;
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        'label_39: loop {
                                                            'label_40: loop {
                                                                'label_41: loop {
                                                                    'label_42: loop {
                                                                        v0 = TaggedVal::from(
                                                                            local_15,
                                                                        );
                                                                        v1 = TaggedVal::from(32i64);
                                                                        v0 = TaggedVal::from(
                                                                            (v0.try_as_i64()?
                                                                                as u64)
                                                                                >> (v1
                                                                                    .try_as_i64(
                                                                                    )?
                                                                                    % 64),
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i64()? as i32,
                                                                        );
                                                                        v1 =
                                                                            TaggedVal::from(255i32);
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                & v1.try_as_i32()?,
                                                                        );
                                                                        match v0.try_as_i32()? {
                                                                            0 => {
                                                                                {}
                                                                                break 'label_36;
                                                                            }
                                                                            1 => {
                                                                                {}
                                                                                break 'label_39;
                                                                            }
                                                                            2 => {
                                                                                {}
                                                                                break 'label_40;
                                                                            }
                                                                            3 => {
                                                                                {}
                                                                                break 'label_41;
                                                                            }
                                                                            4 => {
                                                                                {}
                                                                                break 'label_42;
                                                                            }
                                                                            5 => {
                                                                                {}
                                                                                break 'label_35;
                                                                            }
                                                                            _ => {
                                                                                {}
                                                                                break 'label_36;
                                                                            }
                                                                        }
                                                                        break;
                                                                    }
                                                                    v0 = TaggedVal::from(local_15);
                                                                    v1 = TaggedVal::from(
                                                                        -1095216660481i64,
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i64()?
                                                                            & v1.try_as_i64()?,
                                                                    );
                                                                    v1 = TaggedVal::from(
                                                                        12884901888i64,
                                                                    );
                                                                    v0 = TaggedVal::from(
                                                                        v0.try_as_i64()?
                                                                            | v1.try_as_i64()?,
                                                                    );
                                                                    local_15 = v0.try_as_i64()?;
                                                                    v0 = TaggedVal::from(3i32);
                                                                    local_10 = v0.try_as_i32()?;
                                                                    v0 = TaggedVal::from(117i32);
                                                                    local_5 = v0.try_as_i32()?;
                                                                    {}
                                                                    break 'label_33;
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(local_15);
                                                                v1 = TaggedVal::from(
                                                                    -1095216660481i64,
                                                                );
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i64()?
                                                                        & v1.try_as_i64()?,
                                                                );
                                                                v1 = TaggedVal::from(8589934592i64);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i64()?
                                                                        | v1.try_as_i64()?,
                                                                );
                                                                local_15 = v0.try_as_i64()?;
                                                                v0 = TaggedVal::from(3i32);
                                                                local_10 = v0.try_as_i32()?;
                                                                v0 = TaggedVal::from(123i32);
                                                                local_5 = v0.try_as_i32()?;
                                                                {}
                                                                break 'label_33;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_14);
                                                            v1 = TaggedVal::from(local_15);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i64()? as i32
                                                            );
                                                            local_11 = v1.try_as_i32()?;
                                                            v2 = TaggedVal::from(2i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    << (v2.try_as_i32()? % 32),
                                                            );
                                                            v2 = TaggedVal::from(28i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    & v2.try_as_i32()?,
                                                            );
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()? as u32)
                                                                    >> (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(15i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    & v1.try_as_i32()?,
                                                            );
                                                            local_10 = v0.try_as_i32()?;
                                                            v1 = TaggedVal::from(48i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    | v1.try_as_i32()?,
                                                            );
                                                            v1 = TaggedVal::from(local_10);
                                                            v2 = TaggedVal::from(87i32);
                                                            v1 = TaggedVal::from(
                                                                v1.try_as_i32()?
                                                                    .wrapping_add(v2.try_as_i32()?),
                                                            );
                                                            v2 = TaggedVal::from(local_10);
                                                            v3 = TaggedVal::from(10i32);
                                                            v2 = TaggedVal::from(
                                                                ((v2.try_as_i32()? as u32)
                                                                    < (v3.try_as_i32()? as u32))
                                                                    as i32,
                                                            );
                                                            if ValType::from(v0)
                                                                != ValType::from(v1)
                                                            {
                                                                return None;
                                                            }
                                                            if v2.try_as_i32()? != 0 {
                                                                v0 = v0;
                                                            } else {
                                                                v0 = v1;
                                                            }
                                                            local_5 = v0.try_as_i32()?;
                                                            'label_43: loop {
                                                                v0 = TaggedVal::from(local_11);
                                                                v0 = TaggedVal::from(
                                                                    (v0.try_as_i32()? == 0) as i32,
                                                                );
                                                                if v0.try_as_i32()? != 0 {
                                                                    {}
                                                                    break 'label_43;
                                                                }
                                                                v0 = TaggedVal::from(local_15);
                                                                v1 = TaggedVal::from(-1i64);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i64()?.wrapping_add(
                                                                        v1.try_as_i64()?,
                                                                    ),
                                                                );
                                                                v1 = TaggedVal::from(4294967295i64);
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i64()?
                                                                        & v1.try_as_i64()?,
                                                                );
                                                                v1 = TaggedVal::from(local_15);
                                                                v2 =
                                                                    TaggedVal::from(-4294967296i64);
                                                                v1 = TaggedVal::from(
                                                                    v1.try_as_i64()?
                                                                        & v2.try_as_i64()?,
                                                                );
                                                                v0 = TaggedVal::from(
                                                                    v0.try_as_i64()?
                                                                        | v1.try_as_i64()?,
                                                                );
                                                                local_15 = v0.try_as_i64()?;
                                                                {}
                                                                break 'label_34;
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_15);
                                                            v1 = TaggedVal::from(-1095216660481i64);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i64()?
                                                                    & v1.try_as_i64()?,
                                                            );
                                                            v1 = TaggedVal::from(4294967296i64);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i64()?
                                                                    | v1.try_as_i64()?,
                                                            );
                                                            local_15 = v0.try_as_i64()?;
                                                            {}
                                                            break 'label_34;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_15);
                                                        v1 = TaggedVal::from(-1095216660481i64);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i64()? & v1.try_as_i64()?,
                                                        );
                                                        local_15 = v0.try_as_i64()?;
                                                        v0 = TaggedVal::from(3i32);
                                                        local_10 = v0.try_as_i32()?;
                                                        v0 = TaggedVal::from(125i32);
                                                        local_5 = v0.try_as_i32()?;
                                                        {}
                                                        break 'label_33;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(0i32);
                                                    local_10 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(local_14);
                                                    local_5 = v0.try_as_i32()?;
                                                    {}
                                                    break 'label_33;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(1i32);
                                                local_10 = v0.try_as_i32()?;
                                                'label_44: loop {
                                                    v0 = TaggedVal::from(local_12);
                                                    v1 = TaggedVal::from(128i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_44;
                                                    }
                                                    v0 = TaggedVal::from(2i32);
                                                    local_10 = v0.try_as_i32()?;
                                                    v0 = TaggedVal::from(local_12);
                                                    v1 = TaggedVal::from(2048i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_44;
                                                    }
                                                    v0 = TaggedVal::from(3i32);
                                                    v1 = TaggedVal::from(4i32);
                                                    v2 = TaggedVal::from(local_12);
                                                    v3 = TaggedVal::from(65536i32);
                                                    v2 = TaggedVal::from(
                                                        ((v2.try_as_i32()? as u32)
                                                            < (v3.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if ValType::from(v0) != ValType::from(v1) {
                                                        return None;
                                                    }
                                                    if v2.try_as_i32()? != 0 {
                                                        v0 = v0;
                                                    } else {
                                                        v0 = v1;
                                                    }
                                                    local_10 = v0.try_as_i32()?;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_10);
                                                v1 = TaggedVal::from(local_8);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_5 = v0.try_as_i32()?;
                                                {}
                                                break 'label_17;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_15);
                                            v1 = TaggedVal::from(-1095216660481i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? & v1.try_as_i64()?,
                                            );
                                            v1 = TaggedVal::from(17179869184i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? | v1.try_as_i64()?,
                                            );
                                            local_15 = v0.try_as_i64()?;
                                            break;
                                        }
                                        v0 = TaggedVal::from(3i32);
                                        local_10 = v0.try_as_i32()?;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v0.try_as_i32()? + 24) as usize,
                                    )?);
                                    v1 = TaggedVal::from(local_5);
                                    v2 = TaggedVal::from(local_2);
                                    v2 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v2.try_as_i32()? + 28) as usize,
                                    )?);
                                    v2 = TaggedVal::from(read_mem_i32(
                                        &self.memory,
                                        (v2.try_as_i32()? + 16) as usize,
                                    )?);
                                    {
                                        let rets = self
                                            .indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                                        if rets.len() != 1 {
                                            return None;
                                        }
                                        v0 = rets[0];
                                    }
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_32;
                                    }
                                    {}
                                    break 'label_1;
                                    break;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_8);
                            v1 = TaggedVal::from(local_9);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_8 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_7);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_5;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_5);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(
                        read_mem_i8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(-65i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    break;
                }
                v0 = TaggedVal::from(1i32);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(local_1);
                v3 = TaggedVal::from(local_5);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
                v3 = TaggedVal::from(local_2);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 28) as usize,
                )?);
                v3 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v3.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(34i32);
                v2 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 28) as usize,
                )?);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 16) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_4 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(32i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
            v0 = TaggedVal::from(local_4);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(local_5);
        v3 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(1055628i32);
        self.func_185(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_228(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(0i32);
                    v1 = TaggedVal::from(15i32);
                    v2 = TaggedVal::from(local_0);
                    v3 = TaggedVal::from(68900i32);
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_1 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(local_1);
                    v3 = TaggedVal::from(2i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(1057440i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 0) as usize,
                    )?);
                    v3 = TaggedVal::from(11i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(local_0);
                    v4 = TaggedVal::from(11i32);
                    v3 = TaggedVal::from(v3.try_as_i32()? << (v4.try_as_i32()? % 32));
                    local_1 = v3.try_as_i32()?;
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(4i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_2 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(local_2);
                    v3 = TaggedVal::from(2i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(1057440i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 0) as usize,
                    )?);
                    v3 = TaggedVal::from(11i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(2i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_2 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(local_2);
                    v3 = TaggedVal::from(2i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(1057440i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 0) as usize,
                    )?);
                    v3 = TaggedVal::from(11i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(1i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    local_2 = v1.try_as_i32()?;
                    v2 = TaggedVal::from(local_2);
                    v3 = TaggedVal::from(2i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(1057440i32);
                    v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                    v2 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v2.try_as_i32()? + 0) as usize,
                    )?);
                    v3 = TaggedVal::from(11i32);
                    v2 = TaggedVal::from(v2.try_as_i32()? << (v3.try_as_i32()? % 32));
                    v3 = TaggedVal::from(local_1);
                    v2 = TaggedVal::from(
                        ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                    );
                    if ValType::from(v0) != ValType::from(v1) {
                        return None;
                    }
                    if v2.try_as_i32()? != 0 {
                        v0 = v0;
                    } else {
                        v0 = v1;
                    }
                    local_2 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(2i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    v1 = TaggedVal::from(1057440i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                    )?);
                    v1 = TaggedVal::from(11i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                    local_3 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(
                        ((v1.try_as_i32()? as u32) < (v2.try_as_i32()? as u32)) as i32,
                    );
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(30i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(689i32);
                    local_3 = v0.try_as_i32()?;
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(30i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(1057444i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        v1 = TaggedVal::from(21i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        local_3 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_2 = v0.try_as_i32()?;
                    'label_4: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_4;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(31i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_0;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(2i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(1057440i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        v1 = TaggedVal::from(2097151i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_2 = v0.try_as_i32()?;
                        break;
                    }
                    'label_5: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_1);
                        v2 = TaggedVal::from(2i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                        v2 = TaggedVal::from(1057440i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v1 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v1.try_as_i32()? + 0) as usize,
                        )?);
                        v2 = TaggedVal::from(21i32);
                        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
                        local_1 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(1i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_5;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_0 = v0.try_as_i32()?;
                        'label_6: loop {
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(688i32);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(1057564i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            v1 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v1.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_0 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(1i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            local_1 = v1.try_as_i32()?;
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_6;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_3);
                        local_1 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(31i32);
                v2 = TaggedVal::from(1057320i32);
                self.func_180(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(689i32);
            v2 = TaggedVal::from(1057336i32);
            self.func_180(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(31i32);
        v2 = TaggedVal::from(1057352i32);
        self.func_180(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_229(
        &mut self,
        arg_0: i32,
        arg_1: i32,
        arg_2: i32,
        arg_3: i32,
        arg_4: i32,
        arg_5: i32,
        arg_6: i32,
    ) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = arg_4;
        let mut local_5: i32 = arg_5;
        let mut local_6: i32 = arg_6;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut local_11: i32 = 0i32;
        let mut local_12: i32 = 0i32;
        let mut local_13: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(1i32);
        local_7 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_8 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(65280i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v1 = TaggedVal::from(8i32);
                v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                local_9 = v0.try_as_i32()?;
                v0 = TaggedVal::from(0i32);
                local_10 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(255i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                local_11 = v0.try_as_i32()?;
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(2i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_12 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_10);
                        v1 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        local_2 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_13 = v0.try_as_i32()?;
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            local_1 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_9);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_1);
                            v1 = TaggedVal::from(local_9);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(local_13);
                            local_10 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_12);
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_12);
                            v1 = TaggedVal::from(local_8);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_3;
                            }
                            {}
                            break 'label_1;
                            break;
                        }
                        'label_5: loop {
                            v0 = TaggedVal::from(local_13);
                            v1 = TaggedVal::from(local_10);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_5;
                            }
                            v0 = TaggedVal::from(local_13);
                            v1 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_2;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(local_10);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_1 = v0.try_as_i32()?;
                            'label_6: loop {
                                'label_7: loop {
                                    v0 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(local_2);
                                    v1 = TaggedVal::from(-1i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_2 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_1);
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    local_10 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_1 = v0.try_as_i32()?;
                                    v0 = TaggedVal::from(local_10);
                                    v1 = TaggedVal::from(local_11);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        continue 'label_7;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_7 = v0.try_as_i32()?;
                                {}
                                break 'label_0;
                                break;
                            }
                            v0 = TaggedVal::from(local_13);
                            local_10 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_12);
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_12);
                            v1 = TaggedVal::from(local_8);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_3;
                            }
                            {}
                            break 'label_1;
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_10);
                    v1 = TaggedVal::from(local_13);
                    v2 = TaggedVal::from(1055900i32);
                    self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_13);
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(1055900i32);
                self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_6);
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_6);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_11 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(65535i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_1 = v0.try_as_i32()?;
            v0 = TaggedVal::from(1i32);
            local_7 = v0.try_as_i32()?;
            'label_8: loop {
                'label_9: loop {
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_10 = v0.try_as_i32()?;
                    'label_10: loop {
                        'label_11: loop {
                            v0 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            local_2 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(24i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                            v1 = TaggedVal::from(24i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                            local_13 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(0i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_11;
                            }
                            v0 = TaggedVal::from(local_10);
                            local_5 = v0.try_as_i32()?;
                            {}
                            break 'label_10;
                            break;
                        }
                        v0 = TaggedVal::from(local_10);
                        v1 = TaggedVal::from(local_11);
                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_8;
                        }
                        v0 = TaggedVal::from(local_13);
                        v1 = TaggedVal::from(127i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v1.try_as_i32()? + 1) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                        local_2 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(2i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_5 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                    local_1 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(0i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(1i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                    local_7 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_11);
                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        continue 'label_9;
                    }
                    {}
                    break 'label_0;
                    break;
                }
                break;
            }
            v0 = TaggedVal::from(1054285i32);
            v1 = TaggedVal::from(43i32);
            v2 = TaggedVal::from(1055916i32);
            self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_7);
        v1 = TaggedVal::from(1i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_230(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_1 = v0.try_as_i32()?;
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(read_mem_i32(&self.memory, (v1.try_as_i32()? + 4) as usize)?);
        v2 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 4) as usize)?);
        v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
        v3 = TaggedVal::from(local_0);
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 8) as usize)?);
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
        v4 = TaggedVal::from(1055596i32);
        self.func_185(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_231(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_184(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_232(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = TaggedVal::from(1i32);
        local_2 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            v1 = TaggedVal::from(39i32);
            v2 = TaggedVal::from(local_1);
            v3 = TaggedVal::from(28i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v2 = TaggedVal::from(read_mem_i32(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
            v2 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v2.try_as_i32()? + 16) as usize,
            )?);
            {
                let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(2i32);
            local_3 = v0.try_as_i32()?;
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_0);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                local_0 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(-9i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_4 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(30i32);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(92i32);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                {}
                                break 'label_3;
                                break;
                            }
                            v0 = TaggedVal::from(116i32);
                            local_5 = v0.try_as_i32()?;
                            'label_6: loop {
                                'label_7: loop {
                                    v0 = TaggedVal::from(local_4);
                                    match v0.try_as_i32()? {
                                        0 => {
                                            {}
                                            break 'label_1;
                                        }
                                        1 => {
                                            {}
                                            break 'label_6;
                                        }
                                        2 => {
                                            {}
                                            break 'label_4;
                                        }
                                        3 => {
                                            {}
                                            break 'label_4;
                                        }
                                        4 => {
                                            {}
                                            break 'label_7;
                                        }
                                        5 => {
                                            {}
                                            break 'label_4;
                                        }
                                        6 => {
                                            {}
                                            break 'label_4;
                                        }
                                        7 => {
                                            {}
                                            break 'label_4;
                                        }
                                        8 => {
                                            {}
                                            break 'label_4;
                                        }
                                        9 => {
                                            {}
                                            break 'label_4;
                                        }
                                        10 => {
                                            {}
                                            break 'label_4;
                                        }
                                        11 => {
                                            {}
                                            break 'label_4;
                                        }
                                        12 => {
                                            {}
                                            break 'label_4;
                                        }
                                        13 => {
                                            {}
                                            break 'label_4;
                                        }
                                        14 => {
                                            {}
                                            break 'label_4;
                                        }
                                        15 => {
                                            {}
                                            break 'label_4;
                                        }
                                        16 => {
                                            {}
                                            break 'label_4;
                                        }
                                        17 => {
                                            {}
                                            break 'label_4;
                                        }
                                        18 => {
                                            {}
                                            break 'label_4;
                                        }
                                        19 => {
                                            {}
                                            break 'label_4;
                                        }
                                        20 => {
                                            {}
                                            break 'label_4;
                                        }
                                        21 => {
                                            {}
                                            break 'label_4;
                                        }
                                        22 => {
                                            {}
                                            break 'label_4;
                                        }
                                        23 => {
                                            {}
                                            break 'label_4;
                                        }
                                        24 => {
                                            {}
                                            break 'label_4;
                                        }
                                        25 => {
                                            {}
                                            break 'label_3;
                                        }
                                        26 => {
                                            {}
                                            break 'label_4;
                                        }
                                        27 => {
                                            {}
                                            break 'label_4;
                                        }
                                        28 => {
                                            {}
                                            break 'label_4;
                                        }
                                        29 => {
                                            {}
                                            break 'label_4;
                                        }
                                        30 => {
                                            {}
                                            break 'label_3;
                                        }
                                        _ => {
                                            {}
                                            break 'label_1;
                                        }
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(114i32);
                                local_5 = v0.try_as_i32()?;
                                {}
                                break 'label_1;
                                break;
                            }
                            v0 = TaggedVal::from(110i32);
                            local_5 = v0.try_as_i32()?;
                            {}
                            break 'label_1;
                            break;
                        }
                        'label_8: loop {
                            'label_9: loop {
                                'label_10: loop {
                                    v0 = TaggedVal::from(local_0);
                                    v0 = TaggedVal::from(self.func_228(v0.try_as_i32()?)?);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_10;
                                    }
                                    'label_11: loop {
                                        'label_12: loop {
                                            'label_13: loop {
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(65536i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_13;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(131072i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_12;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-918000i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(196112i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-201547i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(716213i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-195102i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(1506i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-191457i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(3103i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-183970i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(14i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(2097150i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                v1 = TaggedVal::from(178206i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-173790i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(34i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        < (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_11;
                                                }
                                                v0 = TaggedVal::from(local_0);
                                                v1 = TaggedVal::from(-177973i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v1 = TaggedVal::from(10i32);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        > (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_8;
                                                }
                                                {}
                                                break 'label_11;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_0);
                                            v1 = TaggedVal::from(1055932i32);
                                            v2 = TaggedVal::from(41i32);
                                            v3 = TaggedVal::from(1056014i32);
                                            v4 = TaggedVal::from(290i32);
                                            v5 = TaggedVal::from(1056304i32);
                                            v6 = TaggedVal::from(309i32);
                                            v0 = TaggedVal::from(self.func_229(
                                                v0.try_as_i32()?,
                                                v1.try_as_i32()?,
                                                v2.try_as_i32()?,
                                                v3.try_as_i32()?,
                                                v4.try_as_i32()?,
                                                v5.try_as_i32()?,
                                                v6.try_as_i32()?,
                                            )?);
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_11;
                                            }
                                            {}
                                            break 'label_8;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_0);
                                        v1 = TaggedVal::from(1056613i32);
                                        v2 = TaggedVal::from(38i32);
                                        v3 = TaggedVal::from(1056689i32);
                                        v4 = TaggedVal::from(175i32);
                                        v5 = TaggedVal::from(1056864i32);
                                        v6 = TaggedVal::from(419i32);
                                        v0 = TaggedVal::from(self.func_229(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                            v3.try_as_i32()?,
                                            v4.try_as_i32()?,
                                            v5.try_as_i32()?,
                                            v6.try_as_i32()?,
                                        )?);
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_8;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_0);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                    v0 = TaggedVal::from((v0.try_as_i32()?.leading_zeros() as i32));
                                    v1 = TaggedVal::from(2i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                                    );
                                    v1 = TaggedVal::from(7i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                                    v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
                                    v1 = TaggedVal::from(21474836480i64);
                                    v0 = TaggedVal::from(v0.try_as_i64()? | v1.try_as_i64()?);
                                    local_6 = v0.try_as_i64()?;
                                    {}
                                    break 'label_9;
                                    break;
                                }
                                v0 = TaggedVal::from(local_0);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                v0 = TaggedVal::from((v0.try_as_i32()?.leading_zeros() as i32));
                                v1 = TaggedVal::from(2i32);
                                v0 = TaggedVal::from(
                                    (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                                );
                                v1 = TaggedVal::from(7i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                                v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
                                v1 = TaggedVal::from(21474836480i64);
                                v0 = TaggedVal::from(v0.try_as_i64()? | v1.try_as_i64()?);
                                local_6 = v0.try_as_i64()?;
                                break;
                            }
                            v0 = TaggedVal::from(3i32);
                            local_3 = v0.try_as_i32()?;
                            {}
                            break 'label_2;
                            break;
                        }
                        v0 = TaggedVal::from(1i32);
                        local_3 = v0.try_as_i32()?;
                        {}
                        break 'label_2;
                        break;
                    }
                    break;
                }
                v0 = TaggedVal::from(local_0);
                local_5 = v0.try_as_i32()?;
                break;
            }
            'label_14: loop {
                v0 = TaggedVal::from(local_3);
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(92i32);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(1i32);
                local_2 = v0.try_as_i32()?;
                v0 = TaggedVal::from(1i32);
                local_3 = v0.try_as_i32()?;
                'label_15: loop {
                    'label_16: loop {
                        'label_17: loop {
                            'label_18: loop {
                                'label_19: loop {
                                    'label_20: loop {
                                        v0 = TaggedVal::from(local_4);
                                        match v0.try_as_i32()? {
                                            0 => {
                                                {}
                                                break 'label_18;
                                            }
                                            1 => {
                                                {}
                                                break 'label_19;
                                            }
                                            2 => {
                                                {}
                                                break 'label_15;
                                            }
                                            3 => {
                                                {}
                                                break 'label_20;
                                            }
                                            _ => {
                                                {}
                                                break 'label_18;
                                            }
                                        }
                                        break;
                                    }
                                    'label_21: loop {
                                        'label_22: loop {
                                            'label_23: loop {
                                                'label_24: loop {
                                                    v0 = TaggedVal::from(local_6);
                                                    v1 = TaggedVal::from(32i64);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i64()? as u64)
                                                            >> (v1.try_as_i64()? % 64),
                                                    );
                                                    v0 = TaggedVal::from(v0.try_as_i64()? as i32);
                                                    v1 = TaggedVal::from(255i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    match v0.try_as_i32()? {
                                                        0 => {
                                                            {}
                                                            break 'label_18;
                                                        }
                                                        1 => {
                                                            {}
                                                            break 'label_21;
                                                        }
                                                        2 => {
                                                            {}
                                                            break 'label_22;
                                                        }
                                                        3 => {
                                                            {}
                                                            break 'label_23;
                                                        }
                                                        4 => {
                                                            {}
                                                            break 'label_24;
                                                        }
                                                        5 => {
                                                            {}
                                                            break 'label_17;
                                                        }
                                                        _ => {
                                                            {}
                                                            break 'label_18;
                                                        }
                                                    }
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_6);
                                                v1 = TaggedVal::from(-1095216660481i64);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i64()? & v1.try_as_i64()?,
                                                );
                                                v1 = TaggedVal::from(12884901888i64);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i64()? | v1.try_as_i64()?,
                                                );
                                                local_6 = v0.try_as_i64()?;
                                                v0 = TaggedVal::from(117i32);
                                                local_0 = v0.try_as_i32()?;
                                                {}
                                                break 'label_16;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(-1095216660481i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? & v1.try_as_i64()?,
                                            );
                                            v1 = TaggedVal::from(8589934592i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? | v1.try_as_i64()?,
                                            );
                                            local_6 = v0.try_as_i64()?;
                                            v0 = TaggedVal::from(123i32);
                                            local_0 = v0.try_as_i32()?;
                                            {}
                                            break 'label_16;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_5);
                                        v1 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(v1.try_as_i64()? as i32);
                                        local_4 = v1.try_as_i32()?;
                                        v2 = TaggedVal::from(2i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()? << (v2.try_as_i32()? % 32),
                                        );
                                        v2 = TaggedVal::from(28i32);
                                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                                        );
                                        v1 = TaggedVal::from(15i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        local_3 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(48i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                        v1 = TaggedVal::from(local_3);
                                        v2 = TaggedVal::from(87i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        v2 = TaggedVal::from(local_3);
                                        v3 = TaggedVal::from(10i32);
                                        v2 = TaggedVal::from(
                                            ((v2.try_as_i32()? as u32) < (v3.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if ValType::from(v0) != ValType::from(v1) {
                                            return None;
                                        }
                                        if v2.try_as_i32()? != 0 {
                                            v0 = v0;
                                        } else {
                                            v0 = v1;
                                        }
                                        local_0 = v0.try_as_i32()?;
                                        'label_25: loop {
                                            v0 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_25;
                                            }
                                            v0 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(-1i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?),
                                            );
                                            v1 = TaggedVal::from(4294967295i64);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? & v1.try_as_i64()?,
                                            );
                                            v1 = TaggedVal::from(local_6);
                                            v2 = TaggedVal::from(-4294967296i64);
                                            v1 = TaggedVal::from(
                                                v1.try_as_i64()? & v2.try_as_i64()?,
                                            );
                                            v0 = TaggedVal::from(
                                                v0.try_as_i64()? | v1.try_as_i64()?,
                                            );
                                            local_6 = v0.try_as_i64()?;
                                            {}
                                            break 'label_16;
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(-1095216660481i64);
                                        v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
                                        v1 = TaggedVal::from(4294967296i64);
                                        v0 = TaggedVal::from(v0.try_as_i64()? | v1.try_as_i64()?);
                                        local_6 = v0.try_as_i64()?;
                                        {}
                                        break 'label_16;
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_6);
                                    v1 = TaggedVal::from(-1095216660481i64);
                                    v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
                                    local_6 = v0.try_as_i64()?;
                                    v0 = TaggedVal::from(125i32);
                                    local_0 = v0.try_as_i32()?;
                                    {}
                                    break 'label_16;
                                    break;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_3 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_5);
                                local_0 = v0.try_as_i32()?;
                                {}
                                break 'label_15;
                                break;
                            }
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                            )?);
                            v1 = TaggedVal::from(39i32);
                            v2 = TaggedVal::from(local_1);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 28) as usize,
                            )?);
                            v2 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v2.try_as_i32()? + 16) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                                if rets.len() != 1 {
                                    return None;
                                }
                                v0 = rets[0];
                            }
                            return Some(v0.try_as_i32()?);
                            break;
                        }
                        v0 = TaggedVal::from(local_6);
                        v1 = TaggedVal::from(-1095216660481i64);
                        v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
                        v1 = TaggedVal::from(17179869184i64);
                        v0 = TaggedVal::from(v0.try_as_i64()? | v1.try_as_i64()?);
                        local_6 = v0.try_as_i64()?;
                        break;
                    }
                    v0 = TaggedVal::from(3i32);
                    local_3 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(local_1);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 28) as usize,
                )?);
                v2 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v2.try_as_i32()? + 16) as usize,
                )?);
                {
                    let rets = self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_14;
                }
                break;
            }
            break;
        }
        v0 = TaggedVal::from(local_2);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_233(&mut self, arg_0: i32, arg_1: i32, arg_2: i32, arg_3: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = arg_3;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(0i32);
        v2 = TaggedVal::from(local_3);
        v3 = TaggedVal::from(4i32);
        v4 = TaggedVal::from(local_2);
        v5 = TaggedVal::from(3i32);
        v4 = TaggedVal::from(v4.try_as_i32()? & v5.try_as_i32()?);
        local_4 = v4.try_as_i32()?;
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_sub(v4.try_as_i32()?));
        v4 = TaggedVal::from(0i32);
        v5 = TaggedVal::from(local_4);
        if ValType::from(v3) != ValType::from(v4) {
            return None;
        }
        if v5.try_as_i32()? != 0 {
            v3 = v3;
        } else {
            v3 = v4;
        }
        local_5 = v3.try_as_i32()?;
        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_sub(v3.try_as_i32()?));
        v3 = TaggedVal::from(7i32);
        v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
        v3 = TaggedVal::from(local_3);
        v4 = TaggedVal::from(local_5);
        v3 = TaggedVal::from(((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32);
        local_6 = v3.try_as_i32()?;
        if ValType::from(v1) != ValType::from(v2) {
            return None;
        }
        if v3.try_as_i32()? != 0 {
            v1 = v1;
        } else {
            v1 = v2;
        }
        local_4 = v1.try_as_i32()?;
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_7 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(local_6);
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        local_8 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_7);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(local_3);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_5 = v1.try_as_i32()?;
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        local_6 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_9 = v0.try_as_i32()?;
                        'label_4: loop {
                            'label_5: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_4;
                                }
                                v0 = TaggedVal::from(local_6);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_6 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_4 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(
                                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                        .and_then(|x| Some(x as i32))?,
                                );
                                local_10 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_5 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_10);
                                v1 = TaggedVal::from(local_9);
                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_5;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_7);
                            v1 = TaggedVal::from(local_6);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                            local_4 = v0.try_as_i32()?;
                            {}
                            break 'label_1;
                            break;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        v1 = TaggedVal::from(16843009i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_mul(v1.try_as_i32()?));
                        local_5 = v0.try_as_i32()?;
                        'label_6: loop {
                            'label_7: loop {
                                v0 = TaggedVal::from(local_7);
                                local_4 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(local_8);
                                v0 = TaggedVal::from(
                                    ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                                );
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_6;
                                }
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(-8i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_7 = v0.try_as_i32()?;
                                v0 = TaggedVal::from(local_2);
                                v1 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_6 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(-4i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 0) as usize,
                                )?);
                                v1 = TaggedVal::from(local_5);
                                v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                                local_10 = v0.try_as_i32()?;
                                v1 = TaggedVal::from(-1i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
                                v1 = TaggedVal::from(local_10);
                                v2 = TaggedVal::from(-16843009i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                v1 = TaggedVal::from(local_6);
                                v2 = TaggedVal::from(-8i32);
                                v1 = TaggedVal::from(
                                    v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v1.try_as_i32()? + 0) as usize,
                                )?);
                                v2 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
                                local_6 = v1.try_as_i32()?;
                                v2 = TaggedVal::from(-1i32);
                                v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
                                v2 = TaggedVal::from(local_6);
                                v3 = TaggedVal::from(-16843009i32);
                                v2 = TaggedVal::from(
                                    v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?),
                                );
                                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                                v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
                                v1 = TaggedVal::from(-2139062144i32);
                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    continue 'label_7;
                                }
                                break;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_2;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_6 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(255i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_10 = v0.try_as_i32()?;
                        'label_8: loop {
                            'label_9: loop {
                                v0 = TaggedVal::from(local_4);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_9;
                                }
                                v0 = TaggedVal::from(0i32);
                                local_5 = v0.try_as_i32()?;
                                {}
                                break 'label_0;
                                break;
                            }
                            v0 = TaggedVal::from(local_6);
                            v1 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_5 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_5);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v1 = TaggedVal::from(local_10);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            {}
                            continue 'label_8;
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_7);
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(1054900i32);
                    self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_3);
                v2 = TaggedVal::from(1054916i32);
                self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(1i32);
            local_5 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_4);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_5);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_234(&mut self, arg_0: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(1055040i32);
        v1 = TaggedVal::from(44i32);
        v2 = TaggedVal::from(local_0);
        self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_235(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_236(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_2);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_237(&mut self, arg_0: i32, arg_1: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut local_9: i32 = 0i32;
        let mut local_10: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
            local_2 = v0.try_as_i32()?;
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
            local_3 = v0.try_as_i32()?;
            v0 = TaggedVal::from(0i32);
            local_4 = v0.try_as_i32()?;
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    'label_7: loop {
                                        'label_8: loop {
                                            'label_9: loop {
                                                'label_10: loop {
                                                    'label_11: loop {
                                                        'label_12: loop {
                                                            'label_13: loop {
                                                                'label_14: loop {
                                                                    'label_15: loop {
                                                                        'label_16: loop {
                                                                            'label_17: loop {
                                                                                'label_18: loop {
                                                                                    v0 = TaggedVal::from(local_4);
                                                                                    v1 = TaggedVal::from(1i32);
                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                    local_5 = v0
                                                                                        .try_as_i32(
                                                                                        )?;
                                                                                    'label_19: loop {
                                                                                        'label_20: loop {
                                                                                            v0 = TaggedVal::from(local_3);
                                                                                            v1 = TaggedVal::from(local_4);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                            local_6 = v0.try_as_i32()?;
                                                                                            v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                            local_7 = v0.try_as_i32()?;
                                                                                            v1 = TaggedVal::from(24i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                            v1 = TaggedVal::from(24i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                                                                                            local_8 = v0.try_as_i32()?;
                                                                                            v1 = TaggedVal::from(-1i32);
                                                                                            v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_20;
}
                                                                                            v0 = TaggedVal::from(local_5);
                                                                                            local_4 = v0.try_as_i32()?;
                                                                                            {}
                                                                                            break 'label_19;
                                                                                            break;
                                                                                        }
                                                                                        'label_21: loop {
                                                                                            'label_22: loop {
                                                                                                'label_23: loop {
                                                                                                    'label_24: loop {
                                                                                                        v0 = TaggedVal::from(local_7);
                                                                                                        v1 = TaggedVal::from(1055338i32);
                                                                                                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                                        v1 = TaggedVal::from(-2i32);
                                                                                                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                        local_9 = v0.try_as_i32()?;
                                                                                                        v1 = TaggedVal::from(2i32);
                                                                                                        v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_24;
}
                                                                                                        v0 = TaggedVal::from(local_9);
                                                                                                        match v0.try_as_i32()? {
0 => {
{

}
break 'label_23;
},
1 => {
{

}
break 'label_22;
},
2 => {
{

}
break 'label_21;
},
_ => {
{

}
break 'label_23;
},
}
                                                                                                        break;
                                                                                                    }
                                                                                                    v0 = TaggedVal::from(local_2);
                                                                                                    v1 = TaggedVal::from(local_4);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_15;
}
                                                                                                    v0 = TaggedVal::from(local_2);
                                                                                                    v1 = TaggedVal::from(local_4);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_14;
}
                                                                                                    v0 = TaggedVal::from(local_0);
                                                                                                    v1 = TaggedVal::from(local_4);
                                                                                                    write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
                                                                                                    v0 = TaggedVal::from(local_0);
                                                                                                    v1 = TaggedVal::from(local_3);
                                                                                                    write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                    v0 = TaggedVal::from(local_1);
                                                                                                    v1 = TaggedVal::from(local_2);
                                                                                                    v2 = TaggedVal::from(local_5);
                                                                                                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                                                                                                    write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
                                                                                                    v0 = TaggedVal::from(local_1);
                                                                                                    v1 = TaggedVal::from(local_3);
                                                                                                    v2 = TaggedVal::from(local_5);
                                                                                                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                                    write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                    v0 = TaggedVal::from(local_0);
                                                                                                    v1 = TaggedVal::from(12i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    v1 = TaggedVal::from(1i32);
                                                                                                    write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                    v0 = TaggedVal::from(local_0);
                                                                                                    v1 = TaggedVal::from(8i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    v1 = TaggedVal::from(local_6);
                                                                                                    write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                    return Some(());
                                                                                                    break;
                                                                                                }
                                                                                                'label_25: loop {
                                                                                                    v0 = TaggedVal::from(local_3);
                                                                                                    v1 = TaggedVal::from(local_5);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    local_8 = v0.try_as_i32()?;
                                                                                                    v1 = TaggedVal::from(0i32);
                                                                                                    v2 = TaggedVal::from(local_2);
                                                                                                    v3 = TaggedVal::from(local_5);
                                                                                                    v2 = TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                                                                                                    if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                                    if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                                    local_7 = v0.try_as_i32()?;
                                                                                                    v1 = TaggedVal::from(1054249i32);
                                                                                                    v2 = TaggedVal::from(local_7);
                                                                                                    if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                                    if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                                    v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                                    v1 = TaggedVal::from(192i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                    v1 = TaggedVal::from(128i32);
                                                                                                    v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_25;
}
                                                                                                    v0 = TaggedVal::from(local_4);
                                                                                                    v1 = TaggedVal::from(2i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    local_4 = v0.try_as_i32()?;
                                                                                                    {
                                                                                                    }
                                                                                                    break 'label_19;
                                                                                                    break;
                                                                                                }
                                                                                                v0 = TaggedVal::from(local_2);
                                                                                                v1 = TaggedVal::from(local_4);
                                                                                                v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_13;
}
                                                                                                v0 = TaggedVal::from(local_2);
                                                                                                v1 = TaggedVal::from(local_4);
                                                                                                v0 = TaggedVal::from(((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_12;
}
                                                                                                v0 = TaggedVal::from(local_1);
                                                                                                v1 = TaggedVal::from(local_8);
                                                                                                write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                v0 = TaggedVal::from(local_0);
                                                                                                v1 = TaggedVal::from(local_4);
                                                                                                write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
                                                                                                v0 = TaggedVal::from(local_0);
                                                                                                v1 = TaggedVal::from(local_3);
                                                                                                write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                v0 = TaggedVal::from(local_1);
                                                                                                v1 = TaggedVal::from(local_2);
                                                                                                v2 = TaggedVal::from(local_5);
                                                                                                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                                                                                                write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
                                                                                                v0 = TaggedVal::from(local_0);
                                                                                                v1 = TaggedVal::from(12i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                v1 = TaggedVal::from(1i32);
                                                                                                write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                v0 = TaggedVal::from(local_0);
                                                                                                v1 = TaggedVal::from(8i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                v1 = TaggedVal::from(local_6);
                                                                                                write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                                return Some(());
                                                                                                break;
                                                                                            }
                                                                                            v0 = TaggedVal::from(local_3);
                                                                                            v1 = TaggedVal::from(local_5);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                            local_10 = v0.try_as_i32()?;
                                                                                            v1 = TaggedVal::from(0i32);
                                                                                            v2 = TaggedVal::from(local_2);
                                                                                            v3 = TaggedVal::from(local_5);
                                                                                            v2 = TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                                                                                            if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                            if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                            local_9 = v0.try_as_i32()?;
                                                                                            v1 = TaggedVal::from(1054249i32);
                                                                                            v2 = TaggedVal::from(local_9);
                                                                                            if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                            if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                            v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                            local_9 = v0.try_as_i32()?;
                                                                                            'label_26: loop {
                                                                                                'label_27: loop {
                                                                                                    v0 = TaggedVal::from(local_7);
                                                                                                    v1 = TaggedVal::from(-224i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    local_7 = v0.try_as_i32()?;
                                                                                                    v1 = TaggedVal::from(13i32);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_27;
}
                                                                                                    'label_28: loop {
                                                                                                        'label_29: loop {
                                                                                                            v0 = TaggedVal::from(local_7);
                                                                                                            match v0.try_as_i32()? {
0 => {
{

}
break 'label_29;
},
1 => {
{

}
break 'label_27;
},
2 => {
{

}
break 'label_27;
},
3 => {
{

}
break 'label_27;
},
4 => {
{

}
break 'label_27;
},
5 => {
{

}
break 'label_27;
},
6 => {
{

}
break 'label_27;
},
7 => {
{

}
break 'label_27;
},
8 => {
{

}
break 'label_27;
},
9 => {
{

}
break 'label_27;
},
10 => {
{

}
break 'label_27;
},
11 => {
{

}
break 'label_27;
},
12 => {
{

}
break 'label_27;
},
13 => {
{

}
break 'label_28;
},
_ => {
{

}
break 'label_29;
},
}
                                                                                                            break;
                                                                                                        }
                                                                                                        v0 = TaggedVal::from(local_9);
                                                                                                        v1 = TaggedVal::from(224i32);
                                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                        v1 = TaggedVal::from(160i32);
                                                                                                        v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_26;
}
                                                                                                        {
                                                                                                        }
                                                                                                        break 'label_1;
                                                                                                        break;
                                                                                                    }
                                                                                                    v0 = TaggedVal::from(local_9);
                                                                                                    v1 = TaggedVal::from(24i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                                    v1 = TaggedVal::from(24i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                                                                                                    v1 = TaggedVal::from(-1i32);
                                                                                                    v0 = TaggedVal::from((v0.try_as_i32()? > v1.try_as_i32()?) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                    v0 = TaggedVal::from(local_9);
                                                                                                    v1 = TaggedVal::from(255i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                    v1 = TaggedVal::from(160i32);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                    {
                                                                                                    }
                                                                                                    break 'label_26;
                                                                                                    break;
                                                                                                }
                                                                                                'label_30: loop {
                                                                                                    v0 = TaggedVal::from(local_8);
                                                                                                    v1 = TaggedVal::from(31i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    v1 = TaggedVal::from(255i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                    v1 = TaggedVal::from(11i32);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_30;
}
                                                                                                    v0 = TaggedVal::from(local_9);
                                                                                                    v1 = TaggedVal::from(24i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                                    v1 = TaggedVal::from(24i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                                                                                                    v1 = TaggedVal::from(-1i32);
                                                                                                    v0 = TaggedVal::from((v0.try_as_i32()? > v1.try_as_i32()?) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                    v0 = TaggedVal::from(local_9);
                                                                                                    v1 = TaggedVal::from(255i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                    v1 = TaggedVal::from(192i32);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                    {
                                                                                                    }
                                                                                                    break 'label_26;
                                                                                                    break;
                                                                                                }
                                                                                                v0 = TaggedVal::from(local_9);
                                                                                                v1 = TaggedVal::from(255i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                v1 = TaggedVal::from(191i32);
                                                                                                v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                v0 = TaggedVal::from(local_8);
                                                                                                v1 = TaggedVal::from(254i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                v1 = TaggedVal::from(238i32);
                                                                                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                v0 = TaggedVal::from(local_9);
                                                                                                v1 = TaggedVal::from(24i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                                v1 = TaggedVal::from(24i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                                                                                                v1 = TaggedVal::from(-1i32);
                                                                                                v0 = TaggedVal::from((v0.try_as_i32()? > v1.try_as_i32()?) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
                                                                                                break;
                                                                                            }
                                                                                            'label_31: loop {
                                                                                                v0 = TaggedVal::from(local_3);
                                                                                                v1 = TaggedVal::from(local_4);
                                                                                                v2 = TaggedVal::from(2i32);
                                                                                                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                                local_5 = v1.try_as_i32()?;
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                local_8 = v0.try_as_i32()?;
                                                                                                v1 = TaggedVal::from(0i32);
                                                                                                v2 = TaggedVal::from(local_2);
                                                                                                v3 = TaggedVal::from(local_5);
                                                                                                v2 = TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                                                                                                if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                                if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                                local_7 = v0.try_as_i32()?;
                                                                                                v1 = TaggedVal::from(1054249i32);
                                                                                                v2 = TaggedVal::from(local_7);
                                                                                                if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                                if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                                v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                                v1 = TaggedVal::from(192i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                v1 = TaggedVal::from(128i32);
                                                                                                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_31;
}
                                                                                                v0 = TaggedVal::from(local_4);
                                                                                                v1 = TaggedVal::from(3i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                local_4 = v0.try_as_i32()?;
                                                                                                {}
                                                                                                break 'label_19;
                                                                                                break;
                                                                                            }
                                                                                            v0 = TaggedVal::from(local_2);
                                                                                            v1 = TaggedVal::from(local_4);
                                                                                            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_11;
}
                                                                                            v0 = TaggedVal::from(local_4);
                                                                                            v1 = TaggedVal::from(-3i32);
                                                                                            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_10;
}
                                                                                            v0 = TaggedVal::from(local_2);
                                                                                            v1 = TaggedVal::from(local_5);
                                                                                            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_9;
}
                                                                                            v0 = TaggedVal::from(local_1);
                                                                                            v1 = TaggedVal::from(local_8);
                                                                                            write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                            v0 = TaggedVal::from(local_0);
                                                                                            v1 = TaggedVal::from(local_4);
                                                                                            write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
                                                                                            v0 = TaggedVal::from(local_0);
                                                                                            v1 = TaggedVal::from(local_3);
                                                                                            write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                            v0 = TaggedVal::from(local_1);
                                                                                            v1 = TaggedVal::from(local_2);
                                                                                            v2 = TaggedVal::from(local_5);
                                                                                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                                                                                            write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
                                                                                            v0 = TaggedVal::from(local_0);
                                                                                            v1 = TaggedVal::from(12i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                            v1 = TaggedVal::from(2i32);
                                                                                            write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                            v0 = TaggedVal::from(local_0);
                                                                                            v1 = TaggedVal::from(8i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                            v1 = TaggedVal::from(local_6);
                                                                                            write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 0) as usize, v1.try_as_i32()?)?;
                                                                                            return Some(());
                                                                                            break;
                                                                                        }
                                                                                        v0 = TaggedVal::from(local_3);
                                                                                        v1 = TaggedVal::from(local_5);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                        local_10 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(0i32);
                                                                                        v2 = TaggedVal::from(local_2);
                                                                                        v3 = TaggedVal::from(local_5);
                                                                                        v2 = TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                                                                                        if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                        if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                        local_9 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(1054249i32);
                                                                                        v2 = TaggedVal::from(local_9);
                                                                                        if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                        if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                        local_9 = v0.try_as_i32()?;
                                                                                        'label_32: loop {
                                                                                            'label_33: loop {
                                                                                                v0 = TaggedVal::from(local_7);
                                                                                                v1 = TaggedVal::from(-240i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                local_7 = v0.try_as_i32()?;
                                                                                                v1 = TaggedVal::from(4i32);
                                                                                                v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_33;
}
                                                                                                'label_34: loop {
                                                                                                    'label_35: loop {
                                                                                                        v0 = TaggedVal::from(local_7);
                                                                                                        match v0.try_as_i32()? {
0 => {
{

}
break 'label_35;
},
1 => {
{

}
break 'label_33;
},
2 => {
{

}
break 'label_33;
},
3 => {
{

}
break 'label_33;
},
4 => {
{

}
break 'label_34;
},
_ => {
{

}
break 'label_35;
},
}
                                                                                                        break;
                                                                                                    }
                                                                                                    v0 = TaggedVal::from(local_9);
                                                                                                    v1 = TaggedVal::from(112i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                                    v1 = TaggedVal::from(255i32);
                                                                                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                    v1 = TaggedVal::from(48i32);
                                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                                                                                                    if v0.try_as_i32()? != 0 {
{

}
break 'label_32;
}
                                                                                                    {
                                                                                                    }
                                                                                                    break 'label_2;
                                                                                                    break;
                                                                                                }
                                                                                                v0 = TaggedVal::from(local_9);
                                                                                                v1 = TaggedVal::from(24i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                                v1 = TaggedVal::from(24i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                                                                                                v1 = TaggedVal::from(-1i32);
                                                                                                v0 = TaggedVal::from((v0.try_as_i32()? > v1.try_as_i32()?) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
                                                                                                v0 = TaggedVal::from(local_9);
                                                                                                v1 = TaggedVal::from(255i32);
                                                                                                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                                v1 = TaggedVal::from(144i32);
                                                                                                v0 = TaggedVal::from(((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32);
                                                                                                if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
                                                                                                {}
                                                                                                break 'label_32;
                                                                                                break;
                                                                                            }
                                                                                            v0 = TaggedVal::from(local_9);
                                                                                            v1 = TaggedVal::from(255i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                            v1 = TaggedVal::from(191i32);
                                                                                            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
                                                                                            v0 = TaggedVal::from(local_8);
                                                                                            v1 = TaggedVal::from(15i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                            v1 = TaggedVal::from(255i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                            v1 = TaggedVal::from(2i32);
                                                                                            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
                                                                                            v0 = TaggedVal::from(local_9);
                                                                                            v1 = TaggedVal::from(24i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
                                                                                            v1 = TaggedVal::from(24i32);
                                                                                            v0 = TaggedVal::from(v0.try_as_i32()? >> (v1.try_as_i32()? % 32));
                                                                                            v1 = TaggedVal::from(-1i32);
                                                                                            v0 = TaggedVal::from((v0.try_as_i32()? > v1.try_as_i32()?) as i32);
                                                                                            if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
                                                                                            break;
                                                                                        }
                                                                                        v0 = TaggedVal::from(local_3);
                                                                                        v1 = TaggedVal::from(local_4);
                                                                                        v2 = TaggedVal::from(2i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                        local_5 = v1.try_as_i32()?;
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                        local_8 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(0i32);
                                                                                        v2 = TaggedVal::from(local_2);
                                                                                        v3 = TaggedVal::from(local_5);
                                                                                        v2 = TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                                                                                        if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                        if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                        local_7 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(1054249i32);
                                                                                        v2 = TaggedVal::from(local_7);
                                                                                        if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                        if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                        v1 = TaggedVal::from(192i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        v1 = TaggedVal::from(128i32);
                                                                                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_17;
}
                                                                                        v0 = TaggedVal::from(local_3);
                                                                                        v1 = TaggedVal::from(local_4);
                                                                                        v2 = TaggedVal::from(3i32);
                                                                                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                                                                                        local_5 = v1.try_as_i32()?;
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                        local_8 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(0i32);
                                                                                        v2 = TaggedVal::from(local_2);
                                                                                        v3 = TaggedVal::from(local_5);
                                                                                        v2 = TaggedVal::from(((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32);
                                                                                        if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                        if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                        local_7 = v0.try_as_i32()?;
                                                                                        v1 = TaggedVal::from(1054249i32);
                                                                                        v2 = TaggedVal::from(local_7);
                                                                                        if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                                                                                        if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
                                                                                        v0 = TaggedVal::from(read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize).and_then(|x| Some(x as i32))?);
                                                                                        v1 = TaggedVal::from(192i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                                                                        v1 = TaggedVal::from(128i32);
                                                                                        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                                                                                        if v0.try_as_i32()? != 0 {
{

}
break 'label_16;
}
                                                                                        v0 = TaggedVal::from(local_4);
                                                                                        v1 = TaggedVal::from(4i32);
                                                                                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                        local_4 = v0.try_as_i32()?;
                                                                                        break;
                                                                                    }
                                                                                    v0 = TaggedVal::from(local_4);
                                                                                    v1 = TaggedVal::from(local_2);
                                                                                    v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
                                                                                    if v0
                                                                                        .try_as_i32(
                                                                                        )?
                                                                                        != 0
                                                                                    {
                                                                                        {}
                                                                                        continue 'label_18;
                                                                                    }
                                                                                    break;
                                                                                }
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_1,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        0i32,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 4)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_1,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        1054248i32,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 0)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        local_2,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 4)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        local_3,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 0)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        12i32,
                                                                                    );
                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        0i32,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 0)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                v0 =
                                                                                    TaggedVal::from(
                                                                                        local_0,
                                                                                    );
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        8i32,
                                                                                    );
                                                                                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                                                                                v1 =
                                                                                    TaggedVal::from(
                                                                                        1054248i32,
                                                                                    );
                                                                                write_mem_i32(
                                                                                    &mut self
                                                                                        .memory,
                                                                                    (v0.try_as_i32(
                                                                                    )? + 0)
                                                                                        as usize,
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                )?;
                                                                                return Some(());
                                                                                break;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                local_2,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_4,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                ((v0.try_as_i32()?
                                                                                    as u32)
                                                                                    < (v1
                                                                                        .try_as_i32(
                                                                                        )?
                                                                                        as u32))
                                                                                    as i32,
                                                                            );
                                                                            if v0.try_as_i32()? != 0
                                                                            {
                                                                                {}
                                                                                break 'label_8;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                local_4,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                -3i32,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                ((v0.try_as_i32()?
                                                                                    as u32)
                                                                                    > (v1
                                                                                        .try_as_i32(
                                                                                        )?
                                                                                        as u32))
                                                                                    as i32,
                                                                            );
                                                                            if v0.try_as_i32()? != 0
                                                                            {
                                                                                {}
                                                                                break 'label_7;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                local_2,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_5,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                ((v0.try_as_i32()?
                                                                                    as u32)
                                                                                    < (v1
                                                                                        .try_as_i32(
                                                                                        )?
                                                                                        as u32))
                                                                                    as i32,
                                                                            );
                                                                            if v0.try_as_i32()? != 0
                                                                            {
                                                                                {}
                                                                                break 'label_6;
                                                                            }
                                                                            v0 = TaggedVal::from(
                                                                                local_1,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_8,
                                                                            );
                                                                            write_mem_i32(
                                                                                &mut self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 0)
                                                                                    as usize,
                                                                                v1.try_as_i32()?,
                                                                            )?;
                                                                            v0 = TaggedVal::from(
                                                                                local_0,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_4,
                                                                            );
                                                                            write_mem_i32(
                                                                                &mut self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 4)
                                                                                    as usize,
                                                                                v1.try_as_i32()?,
                                                                            )?;
                                                                            v0 = TaggedVal::from(
                                                                                local_0,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_3,
                                                                            );
                                                                            write_mem_i32(
                                                                                &mut self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 0)
                                                                                    as usize,
                                                                                v1.try_as_i32()?,
                                                                            )?;
                                                                            v0 = TaggedVal::from(
                                                                                local_1,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_2,
                                                                            );
                                                                            v2 = TaggedVal::from(
                                                                                local_5,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                v1.try_as_i32()?
                                                                                    .wrapping_sub(
                                                                                    v2.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                            );
                                                                            write_mem_i32(
                                                                                &mut self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 4)
                                                                                    as usize,
                                                                                v1.try_as_i32()?,
                                                                            )?;
                                                                            v0 = TaggedVal::from(
                                                                                local_0,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                12i32,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                v0.try_as_i32()?
                                                                                    .wrapping_add(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                2i32,
                                                                            );
                                                                            write_mem_i32(
                                                                                &mut self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 0)
                                                                                    as usize,
                                                                                v1.try_as_i32()?,
                                                                            )?;
                                                                            v0 = TaggedVal::from(
                                                                                local_0,
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                8i32,
                                                                            );
                                                                            v0 = TaggedVal::from(
                                                                                v0.try_as_i32()?
                                                                                    .wrapping_add(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                            );
                                                                            v1 = TaggedVal::from(
                                                                                local_6,
                                                                            );
                                                                            write_mem_i32(
                                                                                &mut self.memory,
                                                                                (v0.try_as_i32()?
                                                                                    + 0)
                                                                                    as usize,
                                                                                v1.try_as_i32()?,
                                                                            )?;
                                                                            return Some(());
                                                                            break;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            ((v0.try_as_i32()?
                                                                                as u32)
                                                                                < (v1
                                                                                    .try_as_i32()?
                                                                                    as u32))
                                                                                as i32,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_5;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        v1 = TaggedVal::from(-4i32);
                                                                        v0 = TaggedVal::from(
                                                                            ((v0.try_as_i32()?
                                                                                as u32)
                                                                                > (v1
                                                                                    .try_as_i32()?
                                                                                    as u32))
                                                                                as i32,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_4;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_5,
                                                                        );
                                                                        v0 = TaggedVal::from(
                                                                            ((v0.try_as_i32()?
                                                                                as u32)
                                                                                < (v1
                                                                                    .try_as_i32()?
                                                                                    as u32))
                                                                                as i32,
                                                                        );
                                                                        if v0.try_as_i32()? != 0 {
                                                                            {}
                                                                            break 'label_3;
                                                                        }
                                                                        v0 = TaggedVal::from(
                                                                            local_1,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_8,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_0,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_4,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 4)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_0,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_3,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_1,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_2,
                                                                        );
                                                                        v2 = TaggedVal::from(
                                                                            local_5,
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            v1.try_as_i32()?
                                                                                .wrapping_sub(
                                                                                    v2.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 4)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_0,
                                                                        );
                                                                        v1 = TaggedVal::from(12i32);
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        v1 = TaggedVal::from(3i32);
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        v0 = TaggedVal::from(
                                                                            local_0,
                                                                        );
                                                                        v1 = TaggedVal::from(8i32);
                                                                        v0 = TaggedVal::from(
                                                                            v0.try_as_i32()?
                                                                                .wrapping_add(
                                                                                    v1.try_as_i32(
                                                                                    )?,
                                                                                ),
                                                                        );
                                                                        v1 = TaggedVal::from(
                                                                            local_6,
                                                                        );
                                                                        write_mem_i32(
                                                                            &mut self.memory,
                                                                            (v0.try_as_i32()? + 0)
                                                                                as usize,
                                                                            v1.try_as_i32()?,
                                                                        )?;
                                                                        return Some(());
                                                                        break;
                                                                    }
                                                                    v0 = TaggedVal::from(local_4);
                                                                    v1 = TaggedVal::from(local_2);
                                                                    v2 =
                                                                        TaggedVal::from(1055152i32);
                                                                    self.func_182(
                                                                        v0.try_as_i32()?,
                                                                        v1.try_as_i32()?,
                                                                        v2.try_as_i32()?,
                                                                    )?;
                                                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                                                    break;
                                                                }
                                                                v0 = TaggedVal::from(local_5);
                                                                v1 = TaggedVal::from(local_2);
                                                                v2 = TaggedVal::from(1055152i32);
                                                                self.func_182(
                                                                    v0.try_as_i32()?,
                                                                    v1.try_as_i32()?,
                                                                    v2.try_as_i32()?,
                                                                )?;
                                                                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_4);
                                                            v1 = TaggedVal::from(local_2);
                                                            v2 = TaggedVal::from(1055248i32);
                                                            self.func_182(
                                                                v0.try_as_i32()?,
                                                                v1.try_as_i32()?,
                                                                v2.try_as_i32()?,
                                                            )?;
                                                            unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_5);
                                                        v1 = TaggedVal::from(local_2);
                                                        v2 = TaggedVal::from(1055248i32);
                                                        self.func_182(
                                                            v0.try_as_i32()?,
                                                            v1.try_as_i32()?,
                                                            v2.try_as_i32()?,
                                                        )?;
                                                        unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(local_2);
                                                    v2 = TaggedVal::from(1055216i32);
                                                    self.func_182(
                                                        v0.try_as_i32()?,
                                                        v1.try_as_i32()?,
                                                        v2.try_as_i32()?,
                                                    )?;
                                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(local_5);
                                                v2 = TaggedVal::from(1055216i32);
                                                self.func_183(
                                                    v0.try_as_i32()?,
                                                    v1.try_as_i32()?,
                                                    v2.try_as_i32()?,
                                                )?;
                                                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_5);
                                            v1 = TaggedVal::from(local_2);
                                            v2 = TaggedVal::from(1055216i32);
                                            self.func_182(
                                                v0.try_as_i32()?,
                                                v1.try_as_i32()?,
                                                v2.try_as_i32()?,
                                            )?;
                                            unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                            break;
                                        }
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_2);
                                        v2 = TaggedVal::from(1055168i32);
                                        self.func_182(
                                            v0.try_as_i32()?,
                                            v1.try_as_i32()?,
                                            v2.try_as_i32()?,
                                        )?;
                                        unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(local_5);
                                    v2 = TaggedVal::from(1055168i32);
                                    self.func_183(
                                        v0.try_as_i32()?,
                                        v1.try_as_i32()?,
                                        v2.try_as_i32()?,
                                    )?;
                                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                                    break;
                                }
                                v0 = TaggedVal::from(local_5);
                                v1 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(1055168i32);
                                self.func_182(
                                    v0.try_as_i32()?,
                                    v1.try_as_i32()?,
                                    v2.try_as_i32()?,
                                )?;
                                unreachable!(
                                    "Reached a point explicitly marked unreachable in WASM module"
                                );
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_2);
                            v2 = TaggedVal::from(1055184i32);
                            self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                            unreachable!(
                                "Reached a point explicitly marked unreachable in WASM module"
                            );
                            break;
                        }
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(local_5);
                        v2 = TaggedVal::from(1055184i32);
                        self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                        unreachable!(
                            "Reached a point explicitly marked unreachable in WASM module"
                        );
                        break;
                    }
                    v0 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(1055184i32);
                    self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                'label_36: loop {
                    'label_37: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_37;
                        }
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_4);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_36;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_10);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_4);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(local_3);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(local_5);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 4) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(12i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(1i32);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(8i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_6);
                        write_mem_i32(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()?,
                        )?;
                        return Some(());
                        break;
                    }
                    v0 = TaggedVal::from(local_4);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(1055200i32);
                    self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                    unreachable!("Reached a point explicitly marked unreachable in WASM module");
                    break;
                }
                v0 = TaggedVal::from(local_5);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(1055200i32);
                self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            'label_38: loop {
                'label_39: loop {
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_39;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_4);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_38;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_10);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_4);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_3);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(local_2);
                    v2 = TaggedVal::from(local_5);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(12i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_6);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    return Some(());
                    break;
                }
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(1055232i32);
                self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
                unreachable!("Reached a point explicitly marked unreachable in WASM module");
                break;
            }
            v0 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(local_2);
            v2 = TaggedVal::from(1055232i32);
            self.func_182(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(0i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_238(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 12) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(local_0);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(16i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_3);
                    v2 = TaggedVal::from(8i32);
                    v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                    self.func_237(v0.try_as_i32()?, v1.try_as_i32()?)?;
                    'label_3: loop {
                        v0 = TaggedVal::from(local_3);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 16) as usize,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        'label_4: loop {
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 28) as usize,
                            )?);
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 20) as usize,
                            )?);
                            local_5 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_1;
                            }
                            v0 = TaggedVal::from(1i32);
                            local_6 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                            )?);
                            v1 = TaggedVal::from(local_0);
                            v2 = TaggedVal::from(local_5);
                            v3 = TaggedVal::from(local_2);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 28) as usize,
                            )?);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 12) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                                if rets.len() != 1 {
                                    return None;
                                }
                                v0 = rets[0];
                            }
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_0;
                            }
                            'label_5: loop {
                                v0 = TaggedVal::from(local_4);
                                v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_5;
                                }
                                v0 = TaggedVal::from(local_2);
                                v0 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v0.try_as_i32()? + 24) as usize,
                                )?);
                                v1 = TaggedVal::from(65533i32);
                                v2 = TaggedVal::from(local_2);
                                v2 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v2.try_as_i32()? + 28) as usize,
                                )?);
                                v2 = TaggedVal::from(read_mem_i32(
                                    &self.memory,
                                    (v2.try_as_i32()? + 16) as usize,
                                )?);
                                {
                                    let rets =
                                        self.indirect_call(v2.try_as_i32()? as usize, &[v0, v1])?;
                                    if rets.len() != 1 {
                                        return None;
                                    }
                                    v0 = rets[0];
                                }
                                if v0.try_as_i32()? != 0 {
                                    {}
                                    break 'label_0;
                                }
                                break;
                            }
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_3);
                            v2 = TaggedVal::from(8i32);
                            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                            self.func_237(v0.try_as_i32()?, v1.try_as_i32()?)?;
                            v0 = TaggedVal::from(local_3);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 16) as usize,
                            )?);
                            local_0 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_4;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_6 = v0.try_as_i32()?;
                    {}
                    break 'label_0;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(1054248i32);
                v2 = TaggedVal::from(0i32);
                v0 = TaggedVal::from(self.func_184(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);
                local_6 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            'label_6: loop {
                v0 = TaggedVal::from(local_4);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_6;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(self.func_184(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);
                local_6 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(1055264i32);
            v1 = TaggedVal::from(35i32);
            v2 = TaggedVal::from(1055300i32);
            self.func_181(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(32i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_6);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_239(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(127i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(15i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_4 = v1.try_as_i32()?;
            v2 = TaggedVal::from(48i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(local_4);
            v3 = TaggedVal::from(87i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(local_4);
            v4 = TaggedVal::from(10i32);
            v3 = TaggedVal::from(((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
            v1 = TaggedVal::from(15i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_3 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                continue 'label_0;
            }
            break;
        }
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(128i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(129i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(128i32);
            v2 = TaggedVal::from(1054556i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(1054572i32);
        v3 = TaggedVal::from(2i32);
        v4 = TaggedVal::from(local_2);
        v5 = TaggedVal::from(local_0);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(128i32);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(0i32);
        v6 = TaggedVal::from(local_0);
        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
        v0 = TaggedVal::from(self.func_218(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
            v5.try_as_i32()?,
        )?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_240(&mut self, arg_0: i32, arg_1: i32, arg_2: i32) -> Option<()> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i32 = 0i32;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i64 = 0i64;
        let mut local_9: i32 = 0i32;
        let mut local_10: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_1);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
                        v1 = TaggedVal::from(0i32);
                        v2 = TaggedVal::from(local_1);
                        v3 = TaggedVal::from(3i32);
                        v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        local_3 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        v1 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(-7i32);
                        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                        local_4 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(local_4);
                        v3 = TaggedVal::from(local_2);
                        v2 = TaggedVal::from(
                            ((v2.try_as_i32()? as u32) > (v3.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v0) != ValType::from(v1) {
                            return None;
                        }
                        if v2.try_as_i32()? != 0 {
                            v0 = v0;
                        } else {
                            v0 = v1;
                        }
                        local_5 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_4 = v0.try_as_i32()?;
                        'label_4: loop {
                            'label_5: loop {
                                'label_6: loop {
                                    v0 = TaggedVal::from(local_1);
                                    v1 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    v0 = TaggedVal::from(
                                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                            .and_then(|x| Some(x as i32))?,
                                    );
                                    local_6 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(24i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                    );
                                    v1 = TaggedVal::from(24i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()? >> (v1.try_as_i32()? % 32),
                                    );
                                    local_7 = v0.try_as_i32()?;
                                    v1 = TaggedVal::from(-1i32);
                                    v0 = TaggedVal::from(
                                        (v0.try_as_i32()? > v1.try_as_i32()?) as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_6;
                                    }
                                    v0 = TaggedVal::from(1099511627776i64);
                                    local_8 = v0.try_as_i64()?;
                                    'label_7: loop {
                                        v0 = TaggedVal::from(local_6);
                                        v1 = TaggedVal::from(1055338i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v1 = TaggedVal::from(-2i32);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        local_9 = v0.try_as_i32()?;
                                        v1 = TaggedVal::from(2i32);
                                        v0 = TaggedVal::from(
                                            ((v0.try_as_i32()? as u32) <= (v1.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_7;
                                        }
                                        v0 = TaggedVal::from(4294967296i64);
                                        local_10 = v0.try_as_i64()?;
                                        {}
                                        break 'label_0;
                                        break;
                                    }
                                    'label_8: loop {
                                        'label_9: loop {
                                            'label_10: loop {
                                                'label_11: loop {
                                                    'label_12: loop {
                                                        v0 = TaggedVal::from(local_9);
                                                        match v0.try_as_i32()? {
                                                            0 => {
                                                                {}
                                                                break 'label_12;
                                                            }
                                                            1 => {
                                                                {}
                                                                break 'label_11;
                                                            }
                                                            2 => {
                                                                {}
                                                                break 'label_10;
                                                            }
                                                            _ => {
                                                                {}
                                                                break 'label_12;
                                                            }
                                                        }
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_4);
                                                    v1 = TaggedVal::from(1i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_6 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(local_2);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_9;
                                                    }
                                                    v0 = TaggedVal::from(0i64);
                                                    local_10 = v0.try_as_i64()?;
                                                    {}
                                                    break 'label_1;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(0i64);
                                                local_10 = v0.try_as_i64()?;
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(1i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_9 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(local_2);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        >= (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_1;
                                                }
                                                v0 = TaggedVal::from(local_1);
                                                v1 = TaggedVal::from(local_9);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v0 = TaggedVal::from(
                                                    read_mem_u8(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                    )
                                                    .and_then(|x| Some(x as i32))?,
                                                );
                                                local_9 = v0.try_as_i32()?;
                                                'label_13: loop {
                                                    'label_14: loop {
                                                        v0 = TaggedVal::from(local_6);
                                                        v1 = TaggedVal::from(-224i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        local_6 = v0.try_as_i32()?;
                                                        v1 = TaggedVal::from(13i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_14;
                                                        }
                                                        'label_15: loop {
                                                            'label_16: loop {
                                                                v0 = TaggedVal::from(local_6);
                                                                match v0.try_as_i32()? {
                                                                    0 => {
                                                                        {}
                                                                        break 'label_16;
                                                                    }
                                                                    1 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    2 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    3 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    4 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    5 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    6 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    7 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    8 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    9 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    10 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    11 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    12 => {
                                                                        {}
                                                                        break 'label_14;
                                                                    }
                                                                    13 => {
                                                                        {}
                                                                        break 'label_15;
                                                                    }
                                                                    _ => {
                                                                        {}
                                                                        break 'label_16;
                                                                    }
                                                                }
                                                                break;
                                                            }
                                                            v0 = TaggedVal::from(local_9);
                                                            v1 = TaggedVal::from(224i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    & v1.try_as_i32()?,
                                                            );
                                                            v1 = TaggedVal::from(160i32);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    == v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_13;
                                                            }
                                                            v0 = TaggedVal::from(4294967296i64);
                                                            local_10 = v0.try_as_i64()?;
                                                            {}
                                                            break 'label_0;
                                                            break;
                                                        }
                                                        'label_17: loop {
                                                            v0 = TaggedVal::from(local_9);
                                                            v1 = TaggedVal::from(24i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    << (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(24i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    >> (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(-1i32);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    <= v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_17;
                                                            }
                                                            v0 = TaggedVal::from(4294967296i64);
                                                            local_10 = v0.try_as_i64()?;
                                                            {}
                                                            break 'label_0;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(255i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(160i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_13;
                                                        }
                                                        v0 = TaggedVal::from(4294967296i64);
                                                        local_10 = v0.try_as_i64()?;
                                                        {}
                                                        break 'label_0;
                                                        break;
                                                    }
                                                    'label_18: loop {
                                                        v0 = TaggedVal::from(local_7);
                                                        v1 = TaggedVal::from(31i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(255i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(11i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                > (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_18;
                                                        }
                                                        'label_19: loop {
                                                            v0 = TaggedVal::from(local_9);
                                                            v1 = TaggedVal::from(24i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    << (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(24i32);
                                                            v0 = TaggedVal::from(
                                                                v0.try_as_i32()?
                                                                    >> (v1.try_as_i32()? % 32),
                                                            );
                                                            v1 = TaggedVal::from(-1i32);
                                                            v0 = TaggedVal::from(
                                                                (v0.try_as_i32()?
                                                                    <= v1.try_as_i32()?)
                                                                    as i32,
                                                            );
                                                            if v0.try_as_i32()? != 0 {
                                                                {}
                                                                break 'label_19;
                                                            }
                                                            v0 = TaggedVal::from(4294967296i64);
                                                            local_10 = v0.try_as_i64()?;
                                                            {}
                                                            break 'label_0;
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(255i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(192i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_13;
                                                        }
                                                        v0 = TaggedVal::from(4294967296i64);
                                                        local_10 = v0.try_as_i64()?;
                                                        {}
                                                        break 'label_0;
                                                        break;
                                                    }
                                                    'label_20: loop {
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(255i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(191i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                <= (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_20;
                                                        }
                                                        v0 = TaggedVal::from(4294967296i64);
                                                        local_10 = v0.try_as_i64()?;
                                                        {}
                                                        break 'label_0;
                                                        break;
                                                    }
                                                    'label_21: loop {
                                                        v0 = TaggedVal::from(local_7);
                                                        v1 = TaggedVal::from(254i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(238i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? == v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_21;
                                                        }
                                                        v0 = TaggedVal::from(4294967296i64);
                                                        local_10 = v0.try_as_i64()?;
                                                        {}
                                                        break 'label_0;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_9);
                                                    v1 = TaggedVal::from(24i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                    );
                                                    v1 = TaggedVal::from(24i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? >> (v1.try_as_i32()? % 32),
                                                    );
                                                    v1 = TaggedVal::from(-1i32);
                                                    v0 = TaggedVal::from(
                                                        (v0.try_as_i32()? <= v1.try_as_i32()?)
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_13;
                                                    }
                                                    v0 = TaggedVal::from(4294967296i64);
                                                    local_10 = v0.try_as_i64()?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(0i64);
                                                local_8 = v0.try_as_i64()?;
                                                v0 = TaggedVal::from(local_4);
                                                v1 = TaggedVal::from(2i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                local_6 = v0.try_as_i32()?;
                                                v1 = TaggedVal::from(local_2);
                                                v0 = TaggedVal::from(
                                                    ((v0.try_as_i32()? as u32)
                                                        >= (v1.try_as_i32()? as u32))
                                                        as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_0;
                                                }
                                                v0 = TaggedVal::from(local_1);
                                                v1 = TaggedVal::from(local_6);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                                );
                                                v0 = TaggedVal::from(
                                                    read_mem_u8(
                                                        &self.memory,
                                                        (v0.try_as_i32()? + 0) as usize,
                                                    )
                                                    .and_then(|x| Some(x as i32))?,
                                                );
                                                v1 = TaggedVal::from(192i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? & v1.try_as_i32()?,
                                                );
                                                v1 = TaggedVal::from(128i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_8;
                                                }
                                                {}
                                                break 'label_2;
                                                break;
                                            }
                                            v0 = TaggedVal::from(0i64);
                                            local_10 = v0.try_as_i64()?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(1i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_9 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_1;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_9);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            local_9 = v0.try_as_i32()?;
                                            'label_22: loop {
                                                'label_23: loop {
                                                    v0 = TaggedVal::from(local_6);
                                                    v1 = TaggedVal::from(-240i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    local_6 = v0.try_as_i32()?;
                                                    v1 = TaggedVal::from(4i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            > (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_23;
                                                    }
                                                    'label_24: loop {
                                                        'label_25: loop {
                                                            v0 = TaggedVal::from(local_6);
                                                            match v0.try_as_i32()? {
                                                                0 => {
                                                                    {}
                                                                    break 'label_25;
                                                                }
                                                                1 => {
                                                                    {}
                                                                    break 'label_23;
                                                                }
                                                                2 => {
                                                                    {}
                                                                    break 'label_23;
                                                                }
                                                                3 => {
                                                                    {}
                                                                    break 'label_23;
                                                                }
                                                                4 => {
                                                                    {}
                                                                    break 'label_24;
                                                                }
                                                                _ => {
                                                                    {}
                                                                    break 'label_25;
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(112i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                .wrapping_add(v1.try_as_i32()?),
                                                        );
                                                        v1 = TaggedVal::from(255i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()? & v1.try_as_i32()?,
                                                        );
                                                        v1 = TaggedVal::from(48i32);
                                                        v0 = TaggedVal::from(
                                                            ((v0.try_as_i32()? as u32)
                                                                < (v1.try_as_i32()? as u32))
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_22;
                                                        }
                                                        v0 = TaggedVal::from(4294967296i64);
                                                        local_10 = v0.try_as_i64()?;
                                                        {}
                                                        break 'label_0;
                                                        break;
                                                    }
                                                    'label_26: loop {
                                                        v0 = TaggedVal::from(local_9);
                                                        v1 = TaggedVal::from(24i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                << (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(24i32);
                                                        v0 = TaggedVal::from(
                                                            v0.try_as_i32()?
                                                                >> (v1.try_as_i32()? % 32),
                                                        );
                                                        v1 = TaggedVal::from(-1i32);
                                                        v0 = TaggedVal::from(
                                                            (v0.try_as_i32()? <= v1.try_as_i32()?)
                                                                as i32,
                                                        );
                                                        if v0.try_as_i32()? != 0 {
                                                            {}
                                                            break 'label_26;
                                                        }
                                                        v0 = TaggedVal::from(4294967296i64);
                                                        local_10 = v0.try_as_i64()?;
                                                        {}
                                                        break 'label_0;
                                                        break;
                                                    }
                                                    v0 = TaggedVal::from(local_9);
                                                    v1 = TaggedVal::from(255i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    v1 = TaggedVal::from(144i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            < (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_22;
                                                    }
                                                    v0 = TaggedVal::from(4294967296i64);
                                                    local_10 = v0.try_as_i64()?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                'label_27: loop {
                                                    v0 = TaggedVal::from(local_9);
                                                    v1 = TaggedVal::from(255i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    v1 = TaggedVal::from(191i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            <= (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_27;
                                                    }
                                                    v0 = TaggedVal::from(4294967296i64);
                                                    local_10 = v0.try_as_i64()?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                'label_28: loop {
                                                    v0 = TaggedVal::from(local_7);
                                                    v1 = TaggedVal::from(15i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()?
                                                            .wrapping_add(v1.try_as_i32()?),
                                                    );
                                                    v1 = TaggedVal::from(255i32);
                                                    v0 = TaggedVal::from(
                                                        v0.try_as_i32()? & v1.try_as_i32()?,
                                                    );
                                                    v1 = TaggedVal::from(2i32);
                                                    v0 = TaggedVal::from(
                                                        ((v0.try_as_i32()? as u32)
                                                            <= (v1.try_as_i32()? as u32))
                                                            as i32,
                                                    );
                                                    if v0.try_as_i32()? != 0 {
                                                        {}
                                                        break 'label_28;
                                                    }
                                                    v0 = TaggedVal::from(4294967296i64);
                                                    local_10 = v0.try_as_i64()?;
                                                    {}
                                                    break 'label_0;
                                                    break;
                                                }
                                                v0 = TaggedVal::from(local_9);
                                                v1 = TaggedVal::from(24i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? << (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(24i32);
                                                v0 = TaggedVal::from(
                                                    v0.try_as_i32()? >> (v1.try_as_i32()? % 32),
                                                );
                                                v1 = TaggedVal::from(-1i32);
                                                v0 = TaggedVal::from(
                                                    (v0.try_as_i32()? <= v1.try_as_i32()?) as i32,
                                                );
                                                if v0.try_as_i32()? != 0 {
                                                    {}
                                                    break 'label_22;
                                                }
                                                v0 = TaggedVal::from(4294967296i64);
                                                local_10 = v0.try_as_i64()?;
                                                {}
                                                break 'label_0;
                                                break;
                                            }
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(2i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_1;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_6);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(192i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(128i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_2;
                                            }
                                            v0 = TaggedVal::from(0i64);
                                            local_8 = v0.try_as_i64()?;
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(3i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_2);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    >= (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_0;
                                            }
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_6);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(
                                                read_mem_u8(
                                                    &self.memory,
                                                    (v0.try_as_i32()? + 0) as usize,
                                                )
                                                .and_then(|x| Some(x as i32))?,
                                            );
                                            v1 = TaggedVal::from(192i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(128i32);
                                            v0 = TaggedVal::from(
                                                (v0.try_as_i32()? == v1.try_as_i32()?) as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_8;
                                            }
                                            v0 = TaggedVal::from(3298534883328i64);
                                            local_8 = v0.try_as_i64()?;
                                            v0 = TaggedVal::from(4294967296i64);
                                            local_10 = v0.try_as_i64()?;
                                            {}
                                            break 'label_0;
                                            break;
                                        }
                                        v0 = TaggedVal::from(4294967296i64);
                                        local_10 = v0.try_as_i64()?;
                                        v0 = TaggedVal::from(local_1);
                                        v1 = TaggedVal::from(local_6);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v0 = TaggedVal::from(
                                            read_mem_u8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v1 = TaggedVal::from(192i32);
                                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                        v1 = TaggedVal::from(128i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_0;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_6);
                                    v1 = TaggedVal::from(1i32);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                    );
                                    local_4 = v0.try_as_i32()?;
                                    {}
                                    break 'label_5;
                                    break;
                                }
                                'label_29: loop {
                                    v0 = TaggedVal::from(local_3);
                                    v1 = TaggedVal::from(local_4);
                                    v0 = TaggedVal::from(
                                        v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?),
                                    );
                                    v1 = TaggedVal::from(3i32);
                                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_29;
                                    }
                                    'label_30: loop {
                                        v0 = TaggedVal::from(local_4);
                                        v1 = TaggedVal::from(local_5);
                                        v0 = TaggedVal::from(
                                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32))
                                                as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_30;
                                        }
                                        'label_31: loop {
                                            v0 = TaggedVal::from(local_1);
                                            v1 = TaggedVal::from(local_4);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_6 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(4i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            v0 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )?);
                                            v1 = TaggedVal::from(local_6);
                                            v1 = TaggedVal::from(read_mem_i32(
                                                &self.memory,
                                                (v1.try_as_i32()? + 0) as usize,
                                            )?);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? | v1.try_as_i32()?,
                                            );
                                            v1 = TaggedVal::from(-2139062144i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()? & v1.try_as_i32()?,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                break 'label_30;
                                            }
                                            v0 = TaggedVal::from(local_4);
                                            v1 = TaggedVal::from(8i32);
                                            v0 = TaggedVal::from(
                                                v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                            );
                                            local_4 = v0.try_as_i32()?;
                                            v1 = TaggedVal::from(local_5);
                                            v0 = TaggedVal::from(
                                                ((v0.try_as_i32()? as u32)
                                                    < (v1.try_as_i32()? as u32))
                                                    as i32,
                                            );
                                            if v0.try_as_i32()? != 0 {
                                                {}
                                                continue 'label_31;
                                            }
                                            break;
                                        }
                                        break;
                                    }
                                    v0 = TaggedVal::from(local_4);
                                    v1 = TaggedVal::from(local_2);
                                    v0 = TaggedVal::from(
                                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32))
                                            as i32,
                                    );
                                    if v0.try_as_i32()? != 0 {
                                        {}
                                        break 'label_5;
                                    }
                                    'label_32: loop {
                                        v0 = TaggedVal::from(local_1);
                                        v1 = TaggedVal::from(local_4);
                                        v0 = TaggedVal::from(
                                            v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                        );
                                        v0 = TaggedVal::from(
                                            read_mem_i8(
                                                &self.memory,
                                                (v0.try_as_i32()? + 0) as usize,
                                            )
                                            .and_then(|x| Some(x as i32))?,
                                        );
                                        v1 = TaggedVal::from(0i32);
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? < v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            break 'label_5;
                                        }
                                        v0 = TaggedVal::from(local_2);
                                        v1 = TaggedVal::from(local_4);
                                        v2 = TaggedVal::from(1i32);
                                        v1 = TaggedVal::from(
                                            v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?),
                                        );
                                        local_4 = v1.try_as_i32()?;
                                        v0 = TaggedVal::from(
                                            (v0.try_as_i32()? != v1.try_as_i32()?) as i32,
                                        );
                                        if v0.try_as_i32()? != 0 {
                                            {}
                                            continue 'label_32;
                                        }
                                        {}
                                        break 'label_3;
                                        break;
                                    }
                                    break;
                                }
                                v0 = TaggedVal::from(local_4);
                                v1 = TaggedVal::from(1i32);
                                v0 = TaggedVal::from(
                                    v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?),
                                );
                                local_4 = v0.try_as_i32()?;
                                break;
                            }
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(
                                ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                            );
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_4;
                            }
                            break;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(local_1);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(8i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(local_2);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(0i32);
                    write_mem_i32(
                        &mut self.memory,
                        (v0.try_as_i32()? + 0) as usize,
                        v1.try_as_i32()?,
                    )?;
                    return Some(());
                    break;
                }
                v0 = TaggedVal::from(2199023255552i64);
                local_8 = v0.try_as_i64()?;
                v0 = TaggedVal::from(4294967296i64);
                local_10 = v0.try_as_i64()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(0i64);
            local_8 = v0.try_as_i64()?;
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(local_10);
        v2 = TaggedVal::from(local_4);
        v2 = TaggedVal::from((v2.try_as_i32()? as u32 as u64 as i64));
        v1 = TaggedVal::from(v1.try_as_i64()? | v2.try_as_i64()?);
        v2 = TaggedVal::from(local_8);
        v1 = TaggedVal::from(v1.try_as_i64()? | v2.try_as_i64()?);
        write_mem_i64(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i64()?,
        )?;
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1i32);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        Some(())
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_241(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i64))?,
        );
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_244(v0.try_as_i64()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_242(&mut self, arg_0: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        'label_0: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(65536i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            'label_1: loop {
                'label_2: loop {
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(131072i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_1 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-201547i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(716213i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-195102i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(1506i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-191457i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(3103i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-183970i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(14i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(2097150i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    v1 = TaggedVal::from(178206i32);
                    v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-173790i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(34i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-177973i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(11i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_1;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(-918000i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    v1 = TaggedVal::from(196111i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32,
                    );
                    return Some(v0.try_as_i32()?);
                    break;
                }
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(1056613i32);
                v2 = TaggedVal::from(38i32);
                v3 = TaggedVal::from(1056689i32);
                v4 = TaggedVal::from(175i32);
                v5 = TaggedVal::from(1056864i32);
                v6 = TaggedVal::from(419i32);
                v0 = TaggedVal::from(self.func_229(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                    v3.try_as_i32()?,
                    v4.try_as_i32()?,
                    v5.try_as_i32()?,
                    v6.try_as_i32()?,
                )?);
                local_1 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_1);
            return Some(v0.try_as_i32()?);
            break;
        }
        v0 = TaggedVal::from(local_0);
        v1 = TaggedVal::from(1055932i32);
        v2 = TaggedVal::from(41i32);
        v3 = TaggedVal::from(1056014i32);
        v4 = TaggedVal::from(290i32);
        v5 = TaggedVal::from(1056304i32);
        v6 = TaggedVal::from(309i32);
        v0 = TaggedVal::from(self.func_229(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
            v5.try_as_i32()?,
            v6.try_as_i32()?,
        )?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_243(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(127i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(15i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_4 = v1.try_as_i32()?;
            v2 = TaggedVal::from(48i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(local_4);
            v3 = TaggedVal::from(87i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(local_4);
            v4 = TaggedVal::from(10i32);
            v3 = TaggedVal::from(((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
            local_3 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                continue 'label_0;
            }
            break;
        }
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(128i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(129i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(128i32);
            v2 = TaggedVal::from(1054556i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(1054572i32);
        v3 = TaggedVal::from(2i32);
        v4 = TaggedVal::from(local_2);
        v5 = TaggedVal::from(local_0);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(128i32);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(0i32);
        v6 = TaggedVal::from(local_0);
        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
        v0 = TaggedVal::from(self.func_218(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
            v5.try_as_i32()?,
        )?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_244(&mut self, arg_0: i64, arg_1: i32, arg_2: i32) -> Option<i32> {
        let mut local_0: i64 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = arg_2;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut local_5: i64 = 0i64;
        let mut local_6: i32 = 0i32;
        let mut local_7: i32 = 0i32;
        let mut local_8: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_3 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(39i32);
        local_4 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(10000i64);
                v0 = TaggedVal::from(
                    ((v0.try_as_i64()? as u64) >= (v1.try_as_i64()? as u64)) as i32,
                );
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_0);
                local_5 = v0.try_as_i64()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(39i32);
            local_4 = v0.try_as_i32()?;
            'label_2: loop {
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(9i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_4);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_6 = v0.try_as_i32()?;
                v1 = TaggedVal::from(-4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(local_0);
                v3 = TaggedVal::from(10000i64);
                v2 = TaggedVal::from(
                    (v2.try_as_i64()? as u64).checked_div(v3.try_as_i64()? as u64)?,
                );
                local_5 = v2.try_as_i64()?;
                v3 = TaggedVal::from(10000i64);
                v2 = TaggedVal::from(v2.try_as_i64()?.wrapping_mul(v3.try_as_i64()?));
                v1 = TaggedVal::from(v1.try_as_i64()?.wrapping_sub(v2.try_as_i64()?));
                v1 = TaggedVal::from(v1.try_as_i64()? as i32);
                local_7 = v1.try_as_i32()?;
                v2 = TaggedVal::from(65535i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(100i32);
                v1 = TaggedVal::from(
                    (v1.try_as_i32()? as u32).checked_div(v2.try_as_i32()? as u32)?,
                );
                local_8 = v1.try_as_i32()?;
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(1054574i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                v0 = TaggedVal::from(local_6);
                v1 = TaggedVal::from(-2i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_7);
                v2 = TaggedVal::from(local_8);
                v3 = TaggedVal::from(100i32);
                v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_mul(v3.try_as_i32()?));
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
                v2 = TaggedVal::from(65535i32);
                v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(1054574i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                v0 = TaggedVal::from(local_4);
                v1 = TaggedVal::from(-4i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                local_4 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_0);
                v1 = TaggedVal::from(99999999i64);
                v0 =
                    TaggedVal::from(((v0.try_as_i64()? as u64) > (v1.try_as_i64()? as u64)) as i32);
                local_6 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_5);
                local_0 = v0.try_as_i64()?;
                v0 = TaggedVal::from(local_6);
                if v0.try_as_i32()? != 0 {
                    {}
                    continue 'label_2;
                }
                break;
            }
            break;
        }
        'label_3: loop {
            v0 = TaggedVal::from(local_5);
            v0 = TaggedVal::from(v0.try_as_i64()? as i32);
            local_6 = v0.try_as_i32()?;
            v1 = TaggedVal::from(99i32);
            v0 = TaggedVal::from((v0.try_as_i32()? <= v1.try_as_i32()?) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_3;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(9i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(-2i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            local_4 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_5);
            v1 = TaggedVal::from(v1.try_as_i64()? as i32);
            local_6 = v1.try_as_i32()?;
            v2 = TaggedVal::from(local_6);
            v3 = TaggedVal::from(65535i32);
            v2 = TaggedVal::from(v2.try_as_i32()? & v3.try_as_i32()?);
            v3 = TaggedVal::from(100i32);
            v2 = TaggedVal::from((v2.try_as_i32()? as u32).checked_div(v3.try_as_i32()? as u32)?);
            local_6 = v2.try_as_i32()?;
            v3 = TaggedVal::from(100i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_mul(v3.try_as_i32()?));
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
            v2 = TaggedVal::from(65535i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            v2 = TaggedVal::from(1i32);
            v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
            v2 = TaggedVal::from(1054574i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            v1 = TaggedVal::from(
                read_mem_u16(&self.memory, (v1.try_as_i32()? + 0) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            write_mem_u16(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u16,
            )?;
            break;
        }
        'label_4: loop {
            'label_5: loop {
                v0 = TaggedVal::from(local_6);
                v1 = TaggedVal::from(10i32);
                v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_5;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(9i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_4);
                v2 = TaggedVal::from(-2i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                local_4 = v1.try_as_i32()?;
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v1 = TaggedVal::from(local_6);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
                v2 = TaggedVal::from(1054574i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v1 = TaggedVal::from(
                    read_mem_u16(&self.memory, (v1.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                write_mem_u16(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()? as u16,
                )?;
                {}
                break 'label_4;
                break;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(9i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_4);
            v2 = TaggedVal::from(-1i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            local_4 = v1.try_as_i32()?;
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_6);
            v2 = TaggedVal::from(48i32);
            v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        v2 = TaggedVal::from(1054248i32);
        v3 = TaggedVal::from(0i32);
        v4 = TaggedVal::from(local_3);
        v5 = TaggedVal::from(9i32);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(local_4);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(39i32);
        v6 = TaggedVal::from(local_4);
        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
        v0 = TaggedVal::from(self.func_218(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
            v5.try_as_i32()?,
        )?);
        local_4 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_3);
        v1 = TaggedVal::from(48i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_4);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_245(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(127i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(15i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_4 = v1.try_as_i32()?;
            v2 = TaggedVal::from(48i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(local_4);
            v3 = TaggedVal::from(55i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(local_4);
            v4 = TaggedVal::from(10i32);
            v3 = TaggedVal::from(((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
            v1 = TaggedVal::from(15i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_3 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                continue 'label_0;
            }
            break;
        }
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(128i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(129i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(128i32);
            v2 = TaggedVal::from(1054556i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(1054572i32);
        v3 = TaggedVal::from(2i32);
        v4 = TaggedVal::from(local_2);
        v5 = TaggedVal::from(local_0);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(128i32);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(0i32);
        v6 = TaggedVal::from(local_0);
        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
        v0 = TaggedVal::from(self.func_218(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
            v5.try_as_i32()?,
        )?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_246(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(0i32);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_0);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(127i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            v1 = TaggedVal::from(local_3);
            v2 = TaggedVal::from(15i32);
            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
            local_4 = v1.try_as_i32()?;
            v2 = TaggedVal::from(48i32);
            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
            v2 = TaggedVal::from(local_4);
            v3 = TaggedVal::from(55i32);
            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
            v3 = TaggedVal::from(local_4);
            v4 = TaggedVal::from(10i32);
            v3 = TaggedVal::from(((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32);
            if ValType::from(v1) != ValType::from(v2) {
                return None;
            }
            if v3.try_as_i32()? != 0 {
                v1 = v1;
            } else {
                v1 = v2;
            }
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 0) as usize,
                v1.try_as_i32()? as u8,
            )?;
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(-1i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(4i32);
            v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
            local_3 = v0.try_as_i32()?;
            if v0.try_as_i32()? != 0 {
                {}
                continue 'label_0;
            }
            break;
        }
        'label_1: loop {
            v0 = TaggedVal::from(local_0);
            v1 = TaggedVal::from(128i32);
            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
            local_3 = v0.try_as_i32()?;
            v1 = TaggedVal::from(129i32);
            v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_1;
            }
            v0 = TaggedVal::from(local_3);
            v1 = TaggedVal::from(128i32);
            v2 = TaggedVal::from(1054556i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(1i32);
        v2 = TaggedVal::from(1054572i32);
        v3 = TaggedVal::from(2i32);
        v4 = TaggedVal::from(local_2);
        v5 = TaggedVal::from(local_0);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(128i32);
        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
        v5 = TaggedVal::from(0i32);
        v6 = TaggedVal::from(local_0);
        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
        v0 = TaggedVal::from(self.func_218(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
            v5.try_as_i32()?,
        )?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_247(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i64 = 0i64;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        v0 = TaggedVal::from((v0.try_as_i32()? as i64));
        local_2 = v0.try_as_i64()?;
        v1 = TaggedVal::from(local_2);
        v2 = TaggedVal::from(63i64);
        v1 = TaggedVal::from(v1.try_as_i64()? >> (v2.try_as_i64()? % 64));
        local_2 = v1.try_as_i64()?;
        v0 = TaggedVal::from(v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?));
        v1 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(v0.try_as_i64()? ^ v1.try_as_i64()?);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(-1i32);
        v1 = TaggedVal::from(v1.try_as_i32()? ^ v2.try_as_i32()?);
        v2 = TaggedVal::from(31i32);
        v1 = TaggedVal::from((v1.try_as_i32()? as u32) >> (v2.try_as_i32()? % 32));
        v2 = TaggedVal::from(local_1);
        v0 =
            TaggedVal::from(self.func_244(v0.try_as_i64()?, v1.try_as_i32()?, v2.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_248(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        v1 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(self.func_190(v0.try_as_i32()?, v1.try_as_i32()?)?);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_249(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        'label_0: loop {
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                v1 = TaggedVal::from(1i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v1.try_as_i32()? + 24) as usize,
                )?);
                v2 = TaggedVal::from(1057384i32);
                v3 = TaggedVal::from(4i32);
                v4 = TaggedVal::from(local_1);
                v5 = TaggedVal::from(28i32);
                v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                v4 = TaggedVal::from(read_mem_i32(&self.memory, (v4.try_as_i32()? + 0) as usize)?);
                v4 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v4.try_as_i32()? + 12) as usize,
                )?);
                {
                    let rets = self.indirect_call(v4.try_as_i32()? as usize, &[v1, v2, v3])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v1 = rets[0];
                }
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 8) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_1);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 0) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(0i32);
                write_mem_u8(
                    &mut self.memory,
                    (v0.try_as_i32()? + 9) as usize,
                    v1.try_as_i32()? as u8,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(0i32);
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 4) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_0);
                v2 = TaggedVal::from(1i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                write_mem_i32(
                    &mut self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                    v1.try_as_i32()?,
                )?;
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(local_2);
                v2 = TaggedVal::from(12i32);
                v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
                v2 = TaggedVal::from(1054516i32);
                v0 = TaggedVal::from(self.func_207(
                    v0.try_as_i32()?,
                    v1.try_as_i32()?,
                    v2.try_as_i32()?,
                )?);

                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(
                    read_mem_u8(&self.memory, (v0.try_as_i32()? + 8) as usize)
                        .and_then(|x| Some(x as i32))?,
                );
                local_1 = v0.try_as_i32()?;
                'label_2: loop {
                    v0 = TaggedVal::from(local_2);
                    v0 = TaggedVal::from(read_mem_i32(
                        &self.memory,
                        (v0.try_as_i32()? + 4) as usize,
                    )?);
                    local_3 = v0.try_as_i32()?;
                    v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(255i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    local_0 = v0.try_as_i32()?;
                    v0 = TaggedVal::from(1i32);
                    local_1 = v0.try_as_i32()?;
                    'label_3: loop {
                        v0 = TaggedVal::from(local_0);
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_3;
                        }
                        'label_4: loop {
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(1i32);
                            v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 9) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v1 = TaggedVal::from(255i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_2);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_0 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(1i32);
                            local_1 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 24) as usize,
                            )?);
                            v1 = TaggedVal::from(1054512i32);
                            v2 = TaggedVal::from(1i32);
                            v3 = TaggedVal::from(local_0);
                            v4 = TaggedVal::from(28i32);
                            v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 0) as usize,
                            )?);
                            v3 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v3.try_as_i32()? + 12) as usize,
                            )?);
                            {
                                let rets =
                                    self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                                if rets.len() != 1 {
                                    return None;
                                }
                                v0 = rets[0];
                            }
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_2);
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                        )?);
                        local_1 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v0.try_as_i32()? + 24) as usize,
                        )?);
                        v1 = TaggedVal::from(1054513i32);
                        v2 = TaggedVal::from(1i32);
                        v3 = TaggedVal::from(local_1);
                        v4 = TaggedVal::from(28i32);
                        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 0) as usize,
                        )?);
                        v3 = TaggedVal::from(read_mem_i32(
                            &self.memory,
                            (v3.try_as_i32()? + 12) as usize,
                        )?);
                        {
                            let rets =
                                self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                            if rets.len() != 1 {
                                return None;
                            }
                            v0 = rets[0];
                        }
                        local_1 = v0.try_as_i32()?;
                        break;
                    }
                    v0 = TaggedVal::from(local_2);
                    v1 = TaggedVal::from(local_1);
                    write_mem_u8(
                        &mut self.memory,
                        (v0.try_as_i32()? + 8) as usize,
                        v1.try_as_i32()? as u8,
                    )?;
                    break;
                }
                v0 = TaggedVal::from(local_1);
                v1 = TaggedVal::from(255i32);
                v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                v1 = TaggedVal::from(0i32);
                v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
                local_1 = v0.try_as_i32()?;
                {}
                break 'label_0;
                break;
            }
            v0 = TaggedVal::from(local_1);
            v0 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v0.try_as_i32()? + 24) as usize,
            )?);
            v1 = TaggedVal::from(1057388i32);
            v2 = TaggedVal::from(4i32);
            v3 = TaggedVal::from(local_1);
            v4 = TaggedVal::from(28i32);
            v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
            v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
            v3 = TaggedVal::from(read_mem_i32(
                &self.memory,
                (v3.try_as_i32()? + 12) as usize,
            )?);
            {
                let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                if rets.len() != 1 {
                    return None;
                }
                v0 = rets[0];
            }
            local_1 = v0.try_as_i32()?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        Some(v0.try_as_i32()?)
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_250(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut local_4: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        let mut v5: TaggedVal;
        let mut v6: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(128i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_0);
        v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
        local_0 = v0.try_as_i32()?;
        'label_0: loop {
            'label_1: loop {
                'label_2: loop {
                    'label_3: loop {
                        'label_4: loop {
                            v0 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(read_mem_i32(
                                &self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                            )?);
                            local_3 = v0.try_as_i32()?;
                            v1 = TaggedVal::from(16i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_4;
                            }
                            v0 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(
                                read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                    .and_then(|x| Some(x as i32))?,
                            );
                            local_4 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_3);
                            v1 = TaggedVal::from(32i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            if v0.try_as_i32()? != 0 {
                                {}
                                break 'label_3;
                            }
                            v0 = TaggedVal::from(local_4);
                            v0 = TaggedVal::from((v0.try_as_i32()? as u32 as u64 as i64));
                            v1 = TaggedVal::from(255i64);
                            v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
                            v1 = TaggedVal::from(1i32);
                            v2 = TaggedVal::from(local_1);
                            v0 = TaggedVal::from(self.func_244(
                                v0.try_as_i64()?,
                                v1.try_as_i32()?,
                                v2.try_as_i32()?,
                            )?);
                            local_0 = v0.try_as_i32()?;
                            {}
                            break 'label_2;
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(
                            read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                                .and_then(|x| Some(x as i32))?,
                        );
                        local_4 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(0i32);
                        local_0 = v0.try_as_i32()?;
                        'label_5: loop {
                            v0 = TaggedVal::from(local_2);
                            v1 = TaggedVal::from(local_0);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(127i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            v1 = TaggedVal::from(local_4);
                            v2 = TaggedVal::from(15i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                            local_3 = v1.try_as_i32()?;
                            v2 = TaggedVal::from(48i32);
                            v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                            v2 = TaggedVal::from(local_3);
                            v3 = TaggedVal::from(87i32);
                            v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                            v3 = TaggedVal::from(local_3);
                            v4 = TaggedVal::from(10i32);
                            v3 = TaggedVal::from(
                                ((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32,
                            );
                            if ValType::from(v1) != ValType::from(v2) {
                                return None;
                            }
                            if v3.try_as_i32()? != 0 {
                                v1 = v1;
                            } else {
                                v1 = v2;
                            }
                            write_mem_u8(
                                &mut self.memory,
                                (v0.try_as_i32()? + 0) as usize,
                                v1.try_as_i32()? as u8,
                            )?;
                            v0 = TaggedVal::from(local_0);
                            v1 = TaggedVal::from(-1i32);
                            v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                            local_0 = v0.try_as_i32()?;
                            v0 = TaggedVal::from(local_4);
                            v1 = TaggedVal::from(4i32);
                            v0 = TaggedVal::from(
                                (v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32),
                            );
                            v1 = TaggedVal::from(15i32);
                            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                            local_4 = v0.try_as_i32()?;
                            if v0.try_as_i32()? != 0 {
                                {}
                                continue 'label_5;
                            }
                            break;
                        }
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(128i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_4 = v0.try_as_i32()?;
                        v1 = TaggedVal::from(129i32);
                        v0 = TaggedVal::from(
                            ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                        );
                        if v0.try_as_i32()? != 0 {
                            {}
                            break 'label_1;
                        }
                        v0 = TaggedVal::from(local_1);
                        v1 = TaggedVal::from(1i32);
                        v2 = TaggedVal::from(1054572i32);
                        v3 = TaggedVal::from(2i32);
                        v4 = TaggedVal::from(local_2);
                        v5 = TaggedVal::from(local_0);
                        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                        v5 = TaggedVal::from(128i32);
                        v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                        v5 = TaggedVal::from(0i32);
                        v6 = TaggedVal::from(local_0);
                        v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
                        v0 = TaggedVal::from(self.func_218(
                            v0.try_as_i32()?,
                            v1.try_as_i32()?,
                            v2.try_as_i32()?,
                            v3.try_as_i32()?,
                            v4.try_as_i32()?,
                            v5.try_as_i32()?,
                        )?);
                        local_0 = v0.try_as_i32()?;
                        {}
                        break 'label_2;
                        break;
                    }
                    v0 = TaggedVal::from(0i32);
                    local_0 = v0.try_as_i32()?;
                    'label_6: loop {
                        v0 = TaggedVal::from(local_2);
                        v1 = TaggedVal::from(local_0);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(127i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        v1 = TaggedVal::from(local_4);
                        v2 = TaggedVal::from(15i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
                        local_3 = v1.try_as_i32()?;
                        v2 = TaggedVal::from(48i32);
                        v1 = TaggedVal::from(v1.try_as_i32()? | v2.try_as_i32()?);
                        v2 = TaggedVal::from(local_3);
                        v3 = TaggedVal::from(55i32);
                        v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
                        v3 = TaggedVal::from(local_3);
                        v4 = TaggedVal::from(10i32);
                        v3 = TaggedVal::from(
                            ((v3.try_as_i32()? as u32) < (v4.try_as_i32()? as u32)) as i32,
                        );
                        if ValType::from(v1) != ValType::from(v2) {
                            return None;
                        }
                        if v3.try_as_i32()? != 0 {
                            v1 = v1;
                        } else {
                            v1 = v2;
                        }
                        write_mem_u8(
                            &mut self.memory,
                            (v0.try_as_i32()? + 0) as usize,
                            v1.try_as_i32()? as u8,
                        )?;
                        v0 = TaggedVal::from(local_0);
                        v1 = TaggedVal::from(-1i32);
                        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                        local_0 = v0.try_as_i32()?;
                        v0 = TaggedVal::from(local_4);
                        v1 = TaggedVal::from(4i32);
                        v0 = TaggedVal::from((v0.try_as_i32()? as u32) >> (v1.try_as_i32()? % 32));
                        v1 = TaggedVal::from(15i32);
                        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                        local_4 = v0.try_as_i32()?;
                        if v0.try_as_i32()? != 0 {
                            {}
                            continue 'label_6;
                        }
                        break;
                    }
                    v0 = TaggedVal::from(local_0);
                    v1 = TaggedVal::from(128i32);
                    v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                    local_4 = v0.try_as_i32()?;
                    v1 = TaggedVal::from(129i32);
                    v0 = TaggedVal::from(
                        ((v0.try_as_i32()? as u32) >= (v1.try_as_i32()? as u32)) as i32,
                    );
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_0;
                    }
                    v0 = TaggedVal::from(local_1);
                    v1 = TaggedVal::from(1i32);
                    v2 = TaggedVal::from(1054572i32);
                    v3 = TaggedVal::from(2i32);
                    v4 = TaggedVal::from(local_2);
                    v5 = TaggedVal::from(local_0);
                    v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                    v5 = TaggedVal::from(128i32);
                    v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
                    v5 = TaggedVal::from(0i32);
                    v6 = TaggedVal::from(local_0);
                    v5 = TaggedVal::from(v5.try_as_i32()?.wrapping_sub(v6.try_as_i32()?));
                    v0 = TaggedVal::from(self.func_218(
                        v0.try_as_i32()?,
                        v1.try_as_i32()?,
                        v2.try_as_i32()?,
                        v3.try_as_i32()?,
                        v4.try_as_i32()?,
                        v5.try_as_i32()?,
                    )?);
                    local_0 = v0.try_as_i32()?;
                    break;
                }
                v0 = TaggedVal::from(local_2);
                v1 = TaggedVal::from(128i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
                v0 = TaggedVal::from(local_0);
                return Some(v0.try_as_i32()?);
                break;
            }
            v0 = TaggedVal::from(local_4);
            v1 = TaggedVal::from(128i32);
            v2 = TaggedVal::from(1054556i32);
            self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
            unreachable!("Reached a point explicitly marked unreachable in WASM module");
            break;
        }
        v0 = TaggedVal::from(local_4);
        v1 = TaggedVal::from(128i32);
        v2 = TaggedVal::from(1054556i32);
        self.func_183(v0.try_as_i32()?, v1.try_as_i32()?, v2.try_as_i32()?)?;
        unreachable!("Reached a point explicitly marked unreachable in WASM module");
        // no implicit return
    }

    #[allow(
        unused_mut,
        unused_variables,
        unused_assignments,
        unused_parens,
        unreachable_code,
        unused_labels
    )]
    fn func_251(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        let mut local_0: i32 = arg_0;
        let mut local_1: i32 = arg_1;
        let mut local_2: i32 = 0i32;
        let mut local_3: i32 = 0i32;
        let mut v0: TaggedVal;
        let mut v1: TaggedVal;
        let mut v2: TaggedVal;
        let mut v3: TaggedVal;
        let mut v4: TaggedVal;
        v0 = self.globals[0];
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
        local_2 = v0.try_as_i32()?;
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v0 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v0.try_as_i32()? + 24) as usize,
        )?);
        v1 = TaggedVal::from(1057392i32);
        v2 = TaggedVal::from(9i32);
        v3 = TaggedVal::from(local_1);
        v4 = TaggedVal::from(28i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v3 = TaggedVal::from(read_mem_i32(&self.memory, (v3.try_as_i32()? + 0) as usize)?);
        v3 = TaggedVal::from(read_mem_i32(
            &self.memory,
            (v3.try_as_i32()? + 12) as usize,
        )?);
        {
            let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
            if rets.len() != 1 {
                return None;
            }
            v0 = rets[0];
        }
        local_3 = v0.try_as_i32()?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(0i32);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 5) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_3);
        write_mem_u8(
            &mut self.memory,
            (v0.try_as_i32()? + 4) as usize,
            v1.try_as_i32()? as u8,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_1);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 0) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1057401i32);
        v2 = TaggedVal::from(11i32);
        v3 = TaggedVal::from(local_2);
        v4 = TaggedVal::from(12i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v4 = TaggedVal::from(1057368i32);
        v0 = TaggedVal::from(self.func_195(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?);

        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(local_0);
        v2 = TaggedVal::from(4i32);
        v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
        write_mem_i32(
            &mut self.memory,
            (v0.try_as_i32()? + 12) as usize,
            v1.try_as_i32()?,
        )?;
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(1057412i32);
        v2 = TaggedVal::from(9i32);
        v3 = TaggedVal::from(local_2);
        v4 = TaggedVal::from(12i32);
        v3 = TaggedVal::from(v3.try_as_i32()?.wrapping_add(v4.try_as_i32()?));
        v4 = TaggedVal::from(1057424i32);
        v0 = TaggedVal::from(self.func_195(
            v0.try_as_i32()?,
            v1.try_as_i32()?,
            v2.try_as_i32()?,
            v3.try_as_i32()?,
            v4.try_as_i32()?,
        )?);

        v0 = TaggedVal::from(local_2);
        v0 = TaggedVal::from(
            read_mem_u8(&self.memory, (v0.try_as_i32()? + 4) as usize)
                .and_then(|x| Some(x as i32))?,
        );
        local_1 = v0.try_as_i32()?;
        'label_0: loop {
            v0 = TaggedVal::from(local_2);
            v0 = TaggedVal::from(
                read_mem_u8(&self.memory, (v0.try_as_i32()? + 5) as usize)
                    .and_then(|x| Some(x as i32))?,
            );
            v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
            if v0.try_as_i32()? != 0 {
                {}
                break 'label_0;
            }
            v0 = TaggedVal::from(local_1);
            v1 = TaggedVal::from(255i32);
            v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
            local_0 = v0.try_as_i32()?;
            v0 = TaggedVal::from(1i32);
            local_1 = v0.try_as_i32()?;
            'label_1: loop {
                v0 = TaggedVal::from(local_0);
                if v0.try_as_i32()? != 0 {
                    {}
                    break 'label_1;
                }
                v0 = TaggedVal::from(local_2);
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                local_1 = v0.try_as_i32()?;
                v1 = TaggedVal::from(28i32);
                v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
                v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 12) as usize,
                )?);
                local_0 = v0.try_as_i32()?;
                v0 = TaggedVal::from(local_1);
                v0 = TaggedVal::from(read_mem_i32(
                    &self.memory,
                    (v0.try_as_i32()? + 24) as usize,
                )?);
                local_3 = v0.try_as_i32()?;
                'label_2: loop {
                    v0 = TaggedVal::from(local_1);
                    v0 = TaggedVal::from(
                        read_mem_u8(&self.memory, (v0.try_as_i32()? + 0) as usize)
                            .and_then(|x| Some(x as i32))?,
                    );
                    v1 = TaggedVal::from(4i32);
                    v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
                    if v0.try_as_i32()? != 0 {
                        {}
                        break 'label_2;
                    }
                    v0 = TaggedVal::from(local_3);
                    v1 = TaggedVal::from(1054507i32);
                    v2 = TaggedVal::from(2i32);
                    v3 = TaggedVal::from(local_0);
                    {
                        let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                        if rets.len() != 1 {
                            return None;
                        }
                        v0 = rets[0];
                    }
                    local_1 = v0.try_as_i32()?;
                    {}
                    break 'label_1;
                    break;
                }
                v0 = TaggedVal::from(local_3);
                v1 = TaggedVal::from(1054506i32);
                v2 = TaggedVal::from(1i32);
                v3 = TaggedVal::from(local_0);
                {
                    let rets = self.indirect_call(v3.try_as_i32()? as usize, &[v0, v1, v2])?;
                    if rets.len() != 1 {
                        return None;
                    }
                    v0 = rets[0];
                }
                local_1 = v0.try_as_i32()?;
                break;
            }
            v0 = TaggedVal::from(local_2);
            v1 = TaggedVal::from(local_1);
            write_mem_u8(
                &mut self.memory,
                (v0.try_as_i32()? + 4) as usize,
                v1.try_as_i32()? as u8,
            )?;
            break;
        }
        v0 = TaggedVal::from(local_2);
        v1 = TaggedVal::from(16i32);
        v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
        self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
        v0 = TaggedVal::from(local_1);
        v1 = TaggedVal::from(255i32);
        v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
        v1 = TaggedVal::from(0i32);
        v0 = TaggedVal::from((v0.try_as_i32()? != v1.try_as_i32()?) as i32);
        Some(v0.try_as_i32()?)
    }
}

impl WasmModule {
    #[allow(dead_code)]
    fn indirect_call(&mut self, idx: usize, args: &[TaggedVal]) -> Option<Vec<TaggedVal>> {
        let call_target = (*self.indirect_call_table.get(idx)?)?;
        match call_target {
            0 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_0(a0)?;
                Some(vec![])
            }
            1 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let rets = self.func_1(a0, a1, a2, a3)?;
                Some(vec![TaggedVal::from(rets)])
            }
            2 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_2(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            3 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_3(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            4 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_4(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            5 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_5(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            6 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_6()?;
                Some(vec![])
            }
            7 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_7()?;
                Some(vec![])
            }
            8 => {
                if args.len() != 5 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                self.func_8(a0, a1, a2, a3, a4)?;
                Some(vec![])
            }
            9 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_9(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            10 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_10(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            11 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_11(a0)?;
                Some(vec![])
            }
            12 => {
                if args.len() != 0 {
                    return None;
                }

                let rets = self.func_12()?;
                Some(vec![TaggedVal::from(rets)])
            }
            13 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_13(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            14 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_14(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            15 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_15(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            16 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_16()?;
                Some(vec![])
            }
            17 => {
                if args.len() != 0 {
                    return None;
                }

                let rets = self.func_17()?;
                Some(vec![TaggedVal::from(rets)])
            }
            18 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_18(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            19 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_19(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            20 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_20(a0, a1, a2)?;
                Some(vec![])
            }
            21 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let rets = self.func_21(a0, a1, a2, a3)?;
                Some(vec![TaggedVal::from(rets)])
            }
            22 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_22(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            23 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_23(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            24 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_24(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            25 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_25(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            26 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_26(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            27 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_27(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            28 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_28(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            29 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_29(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            30 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_30(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            31 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_31(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            32 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_32(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            33 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_33(a0, a1, a2, a3)?;
                Some(vec![])
            }
            34 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_34(a0, a1, a2, a3)?;
                Some(vec![])
            }
            35 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_35(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            36 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_36(a0, a1, a2, a3)?;
                Some(vec![])
            }
            37 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_37(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            38 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_38(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            39 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_39(a0)?;
                Some(vec![])
            }
            40 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_40(a0, a1)?;
                Some(vec![])
            }
            41 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_41(a0, a1)?;
                Some(vec![])
            }
            42 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_42(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            43 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_43(a0)?;
                Some(vec![])
            }
            44 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_44(a0)?;
                Some(vec![])
            }
            45 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_45(a0, a1, a2)?;
                Some(vec![])
            }
            46 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_46(a0)?;
                Some(vec![])
            }
            47 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_47(a0)?;
                Some(vec![])
            }
            48 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_48(a0)?;
                Some(vec![])
            }
            49 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_49(a0)?;
                Some(vec![])
            }
            50 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_50(a0)?;
                Some(vec![])
            }
            51 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_51(a0)?;
                Some(vec![])
            }
            52 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_52(a0)?;
                Some(vec![])
            }
            53 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_53(a0)?;
                Some(vec![])
            }
            54 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_54(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            55 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_55(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            56 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_56(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            57 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_57(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            58 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_58(a0, a1)?;
                Some(vec![])
            }
            59 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_59(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            60 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_60(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            61 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_61(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            62 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_62(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            63 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_63(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            64 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_64(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            65 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_65(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            66 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_66(a0, a1)?;
                Some(vec![])
            }
            67 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_67(a0)?;
                Some(vec![])
            }
            68 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_68(a0, a1)?;
                Some(vec![])
            }
            69 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_69()?;
                Some(vec![])
            }
            70 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_70(a0, a1)?;
                Some(vec![])
            }
            71 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_71(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            72 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_72(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            73 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_73()?;
                Some(vec![])
            }
            74 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_74(a0, a1)?;
                Some(vec![])
            }
            75 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_75()?;
                Some(vec![])
            }
            76 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_76(a0, a1)?;
                Some(vec![])
            }
            77 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_77(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            78 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_78(a0, a1)?;
                Some(vec![])
            }
            79 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_79(a0, a1, a2)?;
                Some(vec![])
            }
            80 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_80(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            81 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_81(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            82 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_82(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            83 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_83(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            84 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_84(a0, a1)?;
                Some(vec![])
            }
            85 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_85(a0, a1)?;
                Some(vec![])
            }
            86 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_86(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            87 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_87(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            88 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_88(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            89 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_89(a0, a1, a2, a3)?;
                Some(vec![])
            }
            90 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_90(a0, a1)?;
                Some(vec![])
            }
            91 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_91(a0, a1, a2, a3)?;
                Some(vec![])
            }
            92 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_92(a0, a1, a2, a3)?;
                Some(vec![])
            }
            93 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_93(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            94 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_94(a0, a1)?;
                Some(vec![])
            }
            95 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_95(a0, a1, a2, a3)?;
                Some(vec![])
            }
            96 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_96(a0, a1, a2)?;
                Some(vec![])
            }
            97 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_97(a0, a1, a2, a3)?;
                Some(vec![])
            }
            98 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_98(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            99 => {
                if args.len() != 0 {
                    return None;
                }

                let rets = self.func_99()?;
                Some(vec![TaggedVal::from(rets)])
            }
            100 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_100(a0, a1, a2, a3)?;
                Some(vec![])
            }
            101 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_101(a0, a1, a2)?;
                Some(vec![])
            }
            102 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_102(a0, a1, a2, a3)?;
                Some(vec![])
            }
            103 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_103(a0, a1, a2)?;
                Some(vec![])
            }
            104 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_104(a0)?;
                Some(vec![])
            }
            105 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_105(a0, a1, a2, a3)?;
                Some(vec![])
            }
            106 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_106(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            107 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_107(a0, a1, a2, a3)?;
                Some(vec![])
            }
            108 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_108(a0, a1, a2, a3)?;
                Some(vec![])
            }
            109 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_109(a0, a1, a2)?;
                Some(vec![])
            }
            110 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_110(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            111 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_111(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            112 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_112(a0, a1)?;
                Some(vec![])
            }
            113 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_113()?;
                Some(vec![])
            }
            114 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_114()?;
                Some(vec![])
            }
            115 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_115(a0)?;
                Some(vec![])
            }
            116 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_116(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            117 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_117(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            118 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_118(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            119 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_119(a0, a1)?;
                Some(vec![])
            }
            120 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_120(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            121 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_121(a0)?;
                Some(vec![])
            }
            122 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_122(a0)?;
                Some(vec![])
            }
            123 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_123(a0, a1)?;
                Some(vec![])
            }
            124 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_124(a0, a1)?;
                Some(vec![])
            }
            125 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_125(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            126 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_126(a0, a1, a2)?;
                Some(vec![])
            }
            127 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let rets = self.func_127(a0, a1, a2, a3)?;
                Some(vec![TaggedVal::from(rets)])
            }
            128 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_128(a0, a1, a2)?;
                Some(vec![])
            }
            129 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_129(a0)?;
                Some(vec![])
            }
            130 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_130(a0, a1, a2, a3)?;
                Some(vec![])
            }
            131 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_131(a0, a1)?;
                Some(vec![])
            }
            132 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_132(a0, a1)?;
                Some(vec![])
            }
            133 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_133(a0, a1)?;
                Some(vec![])
            }
            134 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_134(a0, a1)?;
                Some(vec![])
            }
            135 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_135(a0, a1)?;
                Some(vec![])
            }
            136 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let rets = self.func_136(a0, a1, a2, a3)?;
                Some(vec![TaggedVal::from(rets)])
            }
            137 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_137(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            138 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_138(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            139 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_139(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            140 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_140(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            141 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_141(a0, a1, a2, a3)?;
                Some(vec![])
            }
            142 => {
                if args.len() != 5 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                self.func_142(a0, a1, a2, a3, a4)?;
                Some(vec![])
            }
            143 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_143(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            144 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_144()?;
                Some(vec![])
            }
            145 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_145(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            146 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_146(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            147 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_147(a0)?;
                Some(vec![])
            }
            148 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_148(a0)?;
                Some(vec![])
            }
            149 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_149(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            150 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_150(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            151 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_151(a0, a1)?;
                Some(vec![])
            }
            152 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_152(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            153 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_153(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            154 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_154(a0)?;
                Some(vec![])
            }
            155 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_155()?;
                Some(vec![])
            }
            156 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_156(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            157 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_157()?;
                Some(vec![])
            }
            158 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_158()?;
                Some(vec![])
            }
            159 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_159()?;
                Some(vec![])
            }
            160 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_160()?;
                Some(vec![])
            }
            161 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_161()?;
                Some(vec![])
            }
            162 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_162(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            163 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_163(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            164 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_164(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            165 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_165(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            166 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_166(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            167 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_167(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            168 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_168(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            169 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_169(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            170 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_170(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            171 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_171(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            172 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_172(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            173 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_173(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            174 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_174(a0, a1)?;
                Some(vec![])
            }
            175 => {
                if args.len() != 0 {
                    return None;
                }

                self.func_175()?;
                Some(vec![])
            }
            176 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_176(a0, a1)?;
                Some(vec![])
            }
            177 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_177(a0, a1)?;
                Some(vec![])
            }
            178 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_178(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            179 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_179(a0)?;
                Some(vec![])
            }
            180 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_180(a0, a1, a2)?;
                Some(vec![])
            }
            181 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_181(a0, a1, a2)?;
                Some(vec![])
            }
            182 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_182(a0, a1, a2)?;
                Some(vec![])
            }
            183 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_183(a0, a1, a2)?;
                Some(vec![])
            }
            184 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_184(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            185 => {
                if args.len() != 5 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                self.func_185(a0, a1, a2, a3, a4)?;
                Some(vec![])
            }
            186 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_186(a0, a1)?;
                Some(vec![])
            }
            187 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_187(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            188 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_188(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            189 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_189(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            190 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_190(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            191 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_191(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            192 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_192(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            193 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_193(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            194 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_194(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            195 => {
                if args.len() != 5 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                let rets = self.func_195(a0, a1, a2, a3, a4)?;
                Some(vec![TaggedVal::from(rets)])
            }
            196 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_196(a0, a1, a2)?;
                Some(vec![])
            }
            197 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_197(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            198 => {
                if args.len() != 5 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                self.func_198(a0, a1, a2, a3, a4)?;
                Some(vec![])
            }
            199 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_199(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            200 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_200(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            201 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_201(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            202 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_202(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            203 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_203(a0, a1)?;
                Some(vec![])
            }
            204 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_204(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            205 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_205(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            206 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_206(a0, a1, a2, a3)?;
                Some(vec![])
            }
            207 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_207(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            208 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_208(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            209 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_209(a0, a1, a2)?;
                Some(vec![])
            }
            210 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_210(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            211 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_211(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            212 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_212(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            213 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_213(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            214 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_214(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            215 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_215(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            216 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_216(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            217 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_217(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            218 => {
                if args.len() != 6 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                let a5 = args[5].try_as_i32()?;
                let rets = self.func_218(a0, a1, a2, a3, a4, a5)?;
                Some(vec![TaggedVal::from(rets)])
            }
            219 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let rets = self.func_219(a0, a1, a2, a3)?;
                Some(vec![TaggedVal::from(rets)])
            }
            220 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_220(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            221 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_221(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            222 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_222(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            223 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_223(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            224 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_224(a0, a1, a2, a3)?;
                Some(vec![])
            }
            225 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_225(a0, a1)?;
                Some(vec![])
            }
            226 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_226(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            227 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_227(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            228 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_228(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            229 => {
                if args.len() != 7 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                let a4 = args[4].try_as_i32()?;
                let a5 = args[5].try_as_i32()?;
                let a6 = args[6].try_as_i32()?;
                let rets = self.func_229(a0, a1, a2, a3, a4, a5, a6)?;
                Some(vec![TaggedVal::from(rets)])
            }
            230 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_230(a0)?;
                Some(vec![])
            }
            231 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_231(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            232 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_232(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            233 => {
                if args.len() != 4 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let a3 = args[3].try_as_i32()?;
                self.func_233(a0, a1, a2, a3)?;
                Some(vec![])
            }
            234 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                self.func_234(a0)?;
                Some(vec![])
            }
            235 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_235(a0, a1, a2)?;
                Some(vec![])
            }
            236 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_236(a0, a1, a2)?;
                Some(vec![])
            }
            237 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                self.func_237(a0, a1)?;
                Some(vec![])
            }
            238 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_238(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            239 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_239(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            240 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                self.func_240(a0, a1, a2)?;
                Some(vec![])
            }
            241 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_241(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            242 => {
                if args.len() != 1 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let rets = self.func_242(a0)?;
                Some(vec![TaggedVal::from(rets)])
            }
            243 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_243(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            244 => {
                if args.len() != 3 {
                    return None;
                }
                let a0 = args[0].try_as_i64()?;
                let a1 = args[1].try_as_i32()?;
                let a2 = args[2].try_as_i32()?;
                let rets = self.func_244(a0, a1, a2)?;
                Some(vec![TaggedVal::from(rets)])
            }
            245 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_245(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            246 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_246(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            247 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_247(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            248 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_248(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            249 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_249(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            250 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_250(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            251 => {
                if args.len() != 2 {
                    return None;
                }
                let a0 = args[0].try_as_i32()?;
                let a1 = args[1].try_as_i32()?;
                let rets = self.func_251(a0, a1)?;
                Some(vec![TaggedVal::from(rets)])
            }
            _ => None,
        }
    }
}

impl WasmModule {
    #[allow(dead_code)]
    pub fn get_memory(&mut self) -> *mut u8 {
        self.memory.as_mut_ptr()
    }
}

impl WasmModule {
    pub fn _start(&mut self) -> Option<()> {
        self.func_7()
    }
}

impl WasmModule {
    #[allow(non_snake_case)]
    pub fn __original_main(&mut self) -> Option<i32> {
        self.func_17()
    }
}

impl WasmModule {
    pub fn main(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
        self.func_18(arg_0, arg_1)
    }
}

impl WasmModule {
    #[allow(non_snake_case)]
    pub fn get___data_end(&self) -> Option<i32> {
        self.globals[1].try_as_i32()
    }
}

impl WasmModule {
    #[allow(non_snake_case)]
    pub fn get___heap_base(&self) -> Option<i32> {
        self.globals[2].try_as_i32()
    }
}
fn main() {
    let mut wasm_module = WasmModule::new();
    wasm_module._start().unwrap();
}
